spider_1:
  query_name: spider_1
  question: How many singers do we have? Display as num_singers.
  golden_query: SELECT count(*) as num_singers FROM spider_dev.concert_singer.singer
  tables:
  - singer
  comparison_rules:
  - columns:
    - num_singers
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_2:
  query_name: spider_2
  question: What is the total number of singers? Display as num_singers.
  golden_query: SELECT count(*) as num_singers FROM spider_dev.concert_singer.singer
  tables:
  - singer
  comparison_rules:
  - columns:
    - num_singers
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_3:
  query_name: spider_3
  question: Show name, country, age for all singers ordered by age from the oldest
    to the youngest.
  golden_query: SELECT name ,  country ,  age FROM spider_dev.concert_singer.singer
    ORDER BY age DESC
  tables:
  - singer
  comparison_rules:
  - columns:
    - name
    - country
    - age
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_4:
  query_name: spider_4
  question: What are the names, countries, and ages for every singer in descending
    order of age?
  golden_query: SELECT name ,  country ,  age FROM spider_dev.concert_singer.singer
    ORDER BY age DESC
  tables:
  - singer
  comparison_rules:
  - columns:
    - name
    - country
    - age
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_5:
  query_name: spider_5
  question: What is the average, minimum, and maximum age of all singers from France?
    Display as avg_age, min_age, max_age.
  golden_query: SELECT avg(age) as avg_age,  min(age) as min_age,  max(age) as max_age
    FROM spider_dev.concert_singer.singer WHERE country  =  'France'
  tables:
  - singer
  comparison_rules:
  - columns:
    - avg_age
    - min_age
    - max_age
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_6:
  query_name: spider_6
  question: What is the average, minimum, and maximum age for all French singers?
    Display as avg_age, min_age, max_age.
  golden_query: SELECT avg(age) as avg_age,  min(age) as min_age,  max(age) as max_age
    FROM spider_dev.concert_singer.singer WHERE country  =  'France'
  tables:
  - singer
  comparison_rules:
  - columns:
    - avg_age
    - min_age
    - max_age
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_7:
  query_name: spider_7
  question: Show the song name and the release year of the song by the youngest singer.
    age column in singer table presents singer age. Show 1 row.
  golden_query: SELECT song_name ,  song_release_year FROM spider_dev.concert_singer.singer
    ORDER BY age LIMIT 1
  tables:
  - singer
  comparison_rules:
  - columns:
    - song_name
    - song_release_year
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_8:
  query_name: spider_8
  question: What are the unique song names and release years for all the songs of
    the youngest singer? age column in singer table presents singer age. Show 1 row.
  golden_query: SELECT song_name ,  song_release_year FROM spider_dev.concert_singer.singer
    ORDER BY age limit 1
  tables:
  - singer
  comparison_rules:
  - columns:
    - song_name
    - song_release_year
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_9:
  query_name: spider_9
  question: What are all distinct countries where singers above age 20 are from?
  golden_query: SELECT DISTINCT country FROM spider_dev.concert_singer.singer WHERE
    age  >  20
  tables:
  - singer
  comparison_rules:
  - columns:
    - country
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_10:
  query_name: spider_10
  question: What are  the different countries with singers above age 20?
  golden_query: SELECT DISTINCT country FROM spider_dev.concert_singer.singer WHERE
    age  >  20
  tables:
  - singer
  comparison_rules:
  - columns:
    - country
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_11:
  query_name: spider_11
  question: Show all countries and the number of singers in each country. Display
    as num_singers.
  golden_query: SELECT country ,  count(*) as num_singers FROM spider_dev.concert_singer.singer
    GROUP BY country
  tables:
  - singer
  comparison_rules:
  - columns:
    - country
    - num_singers
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_12:
  query_name: spider_12
  question: How many singers are from each country? Display as num_singers.
  golden_query: SELECT country ,  count(*) as num_singers FROM spider_dev.concert_singer.singer
    GROUP BY country
  tables:
  - singer
  comparison_rules:
  - columns:
    - country
    - num_singers
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_13:
  query_name: spider_13
  question: List all song names by singers above the average age.
  golden_query: SELECT song_name FROM spider_dev.concert_singer.singer WHERE age  >  (SELECT
    avg(age) FROM spider_dev.concert_singer.singer)
  tables:
  - singer
  comparison_rules:
  - columns:
    - song_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_14:
  query_name: spider_14
  question: What are all the song names by singers who are older than average?
  golden_query: SELECT song_name FROM spider_dev.concert_singer.singer WHERE age  >  (SELECT
    avg(age) FROM spider_dev.concert_singer.singer)
  tables:
  - singer
  comparison_rules:
  - columns:
    - song_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_15:
  query_name: spider_15
  question: Show location and name for all stadiums with a capacity between 5000 and
    10000.
  golden_query: SELECT LOCATION ,  name FROM spider_dev.concert_singer.stadium WHERE
    capacity BETWEEN 5000 AND 10000
  tables:
  - stadium
  comparison_rules:
  - columns:
    - LOCATION
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_16:
  query_name: spider_16
  question: What are the locations and names of all stations with capacity between
    5000 and 10000?
  golden_query: SELECT LOCATION ,  name FROM spider_dev.concert_singer.stadium WHERE
    capacity BETWEEN 5000 AND 10000
  tables:
  - stadium
  comparison_rules:
  - columns:
    - LOCATION
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_17:
  query_name: spider_17
  question: What is the maximum capacity and the average of all stadiums ? Display
    as max_capacity, avg_capacity.
  golden_query: select max(capacity) as max_capacity, avg(capacity) as avg_capacity
    from spider_dev.concert_singer.stadium
  tables:
  - stadium
  comparison_rules:
  - columns:
    - max_capacity
    - avg_capacity
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_18:
  query_name: spider_18
  question: What is the average and maximum capacities for all stadiums ? Display
    as avg_capacity, max_capacity
  golden_query: select avg(capacity) as avg_capacity, max(capacity) as max_capacity
    from spider_dev.concert_singer.stadium
  tables:
  - stadium
  comparison_rules:
  - columns:
    - avg_capacity
    - max_capacity
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_19:
  query_name: spider_19
  question: What is the name and capacity for the stadium with highest average attendance?
  golden_query: SELECT name ,  capacity FROM spider_dev.concert_singer.stadium ORDER
    BY average DESC LIMIT 1
  tables:
  - stadium
  comparison_rules:
  - columns:
    - name
    - capacity
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_20:
  query_name: spider_20
  question: What is the name and capacity for the stadium with the highest average
    attendance?
  golden_query: SELECT name ,  capacity FROM spider_dev.concert_singer.stadium ORDER
    BY average DESC LIMIT 1
  tables:
  - stadium
  comparison_rules:
  - columns:
    - name
    - capacity
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_21:
  query_name: spider_21
  question: How many concerts are there in year 2014 or 2015? Display as num_concerts.
  golden_query: SELECT count(*) as num_concerts FROM spider_dev.concert_singer.concert
    WHERE YEAR  =  2014 OR YEAR  =  2015
  tables:
  - concert
  comparison_rules:
  - columns:
    - num_concerts
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_22:
  query_name: spider_22
  question: How many concerts occurred in 2014 or 2015? Display as num_concerts.
  golden_query: SELECT count(*) as num_concerts FROM spider_dev.concert_singer.concert
    WHERE YEAR  =  2014 OR YEAR  =  2015
  tables:
  - concert
  comparison_rules:
  - columns:
    - num_concerts
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_23:
  query_name: spider_23
  question: Show the stadium name and the number of concerts in each stadium. Include the stadiums where no concerts happened as well. Display
    as stadium_name, num_concerts.
  golden_query: SELECT name AS stadium_name, COUNT(concert_id) AS num_concerts FROM spider_dev.concert_singer.stadium AS s LEFT JOIN spider_dev.concert_singer.concert AS c ON s.stadium_id = c.stadium_id GROUP BY name
  tables:
  - stadium
  - concert
  comparison_rules:
  - columns:
    - stadium_name
    - num_concerts
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_24:
  query_name: spider_24
  question: For each stadium, how many concerts play there? Display as stadium_name, num_concerts.
  golden_query: SELECT name as stadium_name, COALESCE(num_concerts, 0) AS num_concerts FROM spider_dev.concert_singer.stadium AS s LEFT JOIN ( SELECT stadium_id, COUNT(*) AS num_concerts FROM spider_dev.concert_singer.concert GROUP BY stadium_id ) AS c ON s.stadium_id = TRY_TO_NUMBER(c.stadium_id)
  tables:
  - stadium
  - concert
  comparison_rules:
  - columns:
    - stadium_name
    - num_concerts
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_25:
  query_name: spider_25
  question: Show the stadium name and capacity with most number of concerts in year
    2014 or after. Show me 1 record
  golden_query: SELECT T2.name , T2.capacity FROM spider_dev.concert_singer.concert
    AS T1 JOIN spider_dev.concert_singer.stadium AS T2 ON T1.stadium_id  =  T2.stadium_id
    WHERE T1.year  >=  2014 GROUP BY T2.name, T2.capacity ORDER BY count(*) DESC LIMIT
    1
  tables:
  - stadium
  - concert
  comparison_rules:
  - columns:
    - name
    - capacity
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_26:
  query_name: spider_26
  question: What is the name and capacity of the stadium with the most concerts after
    2013 ? Display as name, capacity. Show me 1 row.
  golden_query: "WITH filtered_concerts AS (                      \n    SELECT   \
    \                                    \n        stadium_id,                   \
    \           \n        COUNT(concert_id) AS concert_count       \n    FROM spider_dev.concert_singer.concert\
    \       \n    WHERE                                        \n        TRY_TO_NUMBER(year)
    > 2013               \n    GROUP BY                                     \n   \
    \     stadium_id                               \n)                           \
    \                     \n                                                 \nSELECT\
    \                                           \n    s.name,                    \
    \                  \n    s.capacity                                   \nFROM filtered_concerts
    AS fc                     \nINNER JOIN spider_dev.concert_singer.stadium AS s\n\
    \    ON fc.stadium_id = s.stadium_id              \nORDER BY                 \
    \                        \n    fc.concert_count DESC                        \n
    LIMIT 1"
  tables:
  - stadium
  - concert
  comparison_rules:
  - columns:
    - name
    - capacity
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_27:
  query_name: spider_27
  question: Which year has most number of concerts? Sort by number of concerts and
    show 1 row
  golden_query: SELECT YEAR FROM spider_dev.concert_singer.concert GROUP BY YEAR ORDER
    BY count(*) DESC LIMIT 1
  tables:
  - concert
  comparison_rules:
  - columns:
    - YEAR
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_28:
  query_name: spider_28
  question: What is the year that had the most concerts? Sort by number of concerts
    and show 1 row
  golden_query: SELECT YEAR FROM spider_dev.concert_singer.concert GROUP BY YEAR ORDER
    BY count(*) DESC LIMIT 1
  tables:
  - concert
  comparison_rules:
  - columns:
    - YEAR
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_29:
  query_name: spider_29
  question: Show the stadium names without any concert.
  golden_query: SELECT name FROM spider_dev.concert_singer.stadium WHERE stadium_id
    NOT IN (SELECT stadium_id FROM spider_dev.concert_singer.concert)
  tables:
  - stadium
  - concert
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_30:
  query_name: spider_30
  question: What are the names of the stadiums without any concerts?
  golden_query: SELECT name FROM spider_dev.concert_singer.stadium WHERE stadium_id
    NOT IN (SELECT stadium_id FROM spider_dev.concert_singer.concert)
  tables:
  - stadium
  - concert
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_31:
  query_name: spider_31
  question: Show countries where a singer above age 40 and also a singer below 30
    are from.
  golden_query: SELECT country FROM spider_dev.concert_singer.singer WHERE age  >  40
    INTERSECT SELECT country FROM spider_dev.concert_singer.singer WHERE age  <  30
  tables:
  - singer
  comparison_rules:
  - columns:
    - country
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_32:
  query_name: spider_32
  question: Show names for all stadiums except for stadiums having a concert in year
    2014.
  golden_query: SELECT name FROM spider_dev.concert_singer.stadium EXCEPT SELECT T2.name
    FROM spider_dev.concert_singer.concert AS T1 JOIN spider_dev.concert_singer.stadium
    AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
  tables:
  - stadium
  - concert
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_33:
  query_name: spider_33
  question: What are the names of all stadiums that did not have a concert in 2014?
  golden_query: SELECT name FROM spider_dev.concert_singer.stadium EXCEPT SELECT T2.name
    FROM spider_dev.concert_singer.concert AS T1 JOIN spider_dev.concert_singer.stadium
    AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
  tables:
  - stadium
  - concert
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_34:
  query_name: spider_34
  question: Show the name and theme for all concerts and the number of singers in
    each concert. Display as num_singers.
  golden_query: SELECT T2.concert_name ,  T2.theme ,  count(*) as num_singers FROM
    spider_dev.concert_singer.singer_in_concert AS T1 JOIN spider_dev.concert_singer.concert
    AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_name ,  T2.theme
  tables:
  - singer_in_concert
  - concert
  comparison_rules:
  - columns:
    - concert_name
    - theme
    - num_singers
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_35:
  query_name: spider_35
  question: What are the names , themes , and number of singers for every concert
    ? Display as num_singers.
  golden_query: select t2.concert_name ,  t2.theme ,  count(*) as num_singers from
    spider_dev.concert_singer.singer_in_concert as t1 join spider_dev.concert_singer.concert
    as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_name ,  t2.theme
  tables:
  - singer_in_concert
  - concert
  comparison_rules:
  - columns:
    - concert_name
    - theme
    - num_singers
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_36:
  query_name: spider_36
  question: List singer names and number of concerts for each singer. Display num_concerts.
  golden_query: SELECT T2.name ,  count(*) as num_concerts FROM spider_dev.concert_singer.singer_in_concert
    AS T1 JOIN spider_dev.concert_singer.singer AS T2 ON T1.singer_id  =  T2.singer_id
    GROUP BY T2.name
  tables:
  - singer_in_concert
  - singer
  comparison_rules:
  - columns:
    - name
    - num_concerts
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_37:
  query_name: spider_37
  question: What are the names of the singers and number of concerts for each person?
    Display as num_concerts.
  golden_query: SELECT T2.name ,  count(*) as num_concerts FROM spider_dev.concert_singer.singer_in_concert
    AS T1 JOIN spider_dev.concert_singer.singer AS T2 ON T1.singer_id  =  T2.singer_id
    GROUP BY T2.name
  tables:
  - singer_in_concert
  - singer
  comparison_rules:
  - columns:
    - name
    - num_concerts
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_38:
  query_name: spider_38
  question: List all singer names in concerts in year 2014.
  golden_query: SELECT T2.name FROM spider_dev.concert_singer.singer_in_concert AS
    T1 JOIN spider_dev.concert_singer.singer AS T2 ON T1.singer_id  =  T2.singer_id
    JOIN spider_dev.concert_singer.concert AS T3 ON T1.concert_id  =  T3.concert_id
    WHERE T3.year  =  2014
  tables:
  - singer_in_concert
  - concert
  - singer
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_39:
  query_name: spider_39
  question: What are the names of the singers who performed in a concert in 2014?
  golden_query: SELECT T2.name FROM spider_dev.concert_singer.singer_in_concert AS
    T1 JOIN spider_dev.concert_singer.singer AS T2 ON T1.singer_id  =  T2.singer_id
    JOIN spider_dev.concert_singer.concert AS T3 ON T1.concert_id  =  T3.concert_id
    WHERE T3.year  =  2014
  tables:
  - singer_in_concert
  - concert
  - singer
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_40:
  query_name: spider_40
  question: what is the name and nation of the singer who have a song having 'Hey'
    in its name?
  golden_query: SELECT name ,  country FROM spider_dev.concert_singer.singer WHERE
    song_name LIKE '%Hey%'
  tables:
  - singer
  comparison_rules:
  - columns:
    - name
    - country
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_41:
  query_name: spider_41
  question: What is the name and country of origin of every singer who has a song
    with the word 'Hey' in its title?
  golden_query: SELECT name ,  country FROM spider_dev.concert_singer.singer WHERE
    song_name LIKE '%Hey%'
  tables:
  - singer
  comparison_rules:
  - columns:
    - name
    - country
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_42:
  query_name: spider_42
  question: Find the name and location of the stadiums which some concerts happened
    in the years of both 2014 and also in 2015.
  golden_query: SELECT T2.name ,  T2.location FROM spider_dev.concert_singer.concert
    AS T1 JOIN spider_dev.concert_singer.stadium AS T2 ON T1.stadium_id  =  T2.stadium_id
    WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM spider_dev.concert_singer.concert
    AS T1 JOIN spider_dev.concert_singer.stadium AS T2 ON T1.stadium_id  =  T2.stadium_id
    WHERE T1.Year  =  2015
  tables:
  - stadium
  - concert
  comparison_rules:
  - columns:
    - name
    - location
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_43:
  query_name: spider_43
  question: What are the unique names and locations of the stadiums that had concerts
    that occurred in both 2014, 2015?
  golden_query: SELECT distinct T2.name ,  T2.location FROM spider_dev.concert_singer.concert
    AS T1 JOIN spider_dev.concert_singer.stadium AS T2 ON T1.stadium_id  =  T2.stadium_id
    WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM spider_dev.concert_singer.concert
    AS T1 JOIN spider_dev.concert_singer.stadium AS T2 ON T1.stadium_id  =  T2.stadium_id
    WHERE T1.Year  =  2015
  tables:
  - stadium
  - concert
  comparison_rules:
  - columns:
    - name
    - location
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_44:
  query_name: spider_44
  question: Find the number of concerts happened in the stadium with the highest capacity
    . Display as num_concerts.
  golden_query: select count(*) as num_concerts from spider_dev.concert_singer.concert
    where stadium_id = (select stadium_id from spider_dev.concert_singer.stadium order
    by capacity desc limit 1)
  tables:
  - stadium
  - concert
  comparison_rules:
  - columns:
    - num_concerts
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_45:
  query_name: spider_45
  question: What are the number of concerts that occurred in the stadium with the
    largest capacity ? Display as num_concerts.
  golden_query: select count(*) as num_concerts from spider_dev.concert_singer.concert
    where stadium_id = (select stadium_id from spider_dev.concert_singer.stadium order
    by capacity desc limit 1)
  tables:
  - stadium
  - concert
  comparison_rules:
  - columns:
    - num_concerts
    match: exact
  auto_select_schema: 'false'
  schemas:
  - concert_singer
spider_46:
  query_name: spider_46
  question: Find the number of pets whose weight is heavier than 10. Display as num_pets.
  golden_query: SELECT count(*) as num_pets FROM spider_dev.pets_1.pets WHERE weight  >  10
  tables:
  - pets
  comparison_rules:
  - columns:
    - num_pets
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_47:
  query_name: spider_47
  question: How many pets have a greater weight than 10? Display as num_pets.
  golden_query: SELECT count(*) as num_pets FROM spider_dev.pets_1.pets WHERE weight  >  10
  tables:
  - pets
  comparison_rules:
  - columns:
    - num_pets
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_48:
  query_name: spider_48
  question: Find the weight of the youngest dog.
  golden_query: SELECT weight FROM spider_dev.pets_1.pets ORDER BY pet_age LIMIT 1
  tables:
  - pets
  comparison_rules:
  - columns:
    - weight
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_49:
  query_name: spider_49
  question: How much does the youngest dog weigh?
  golden_query: SELECT weight FROM spider_dev.pets_1.pets ORDER BY pet_age LIMIT 1
  tables:
  - pets
  comparison_rules:
  - columns:
    - weight
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_50:
  query_name: spider_50
  question: Find the maximum weight for each type of pet. List the maximum weight
    and pet type. Display as max_weight.
  golden_query: SELECT max(weight) as max_weight,  petType FROM spider_dev.pets_1.pets
    GROUP BY petType
  tables:
  - pets
  comparison_rules:
  - columns:
    - max_weight
    - petType
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_51:
  query_name: spider_51
  question: List the maximum weight and type for each type of pet. Display as max_weight.
  golden_query: SELECT max(weight) as max_weight,  petType FROM spider_dev.pets_1.pets
    GROUP BY petType
  tables:
  - pets
  comparison_rules:
  - columns:
    - max_weight
    - petType
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_52:
  query_name: spider_52
  question: Find number of pets owned by students who are older than 20. Just give
    the total count. Display as num_pets.
  golden_query: SELECT count(*) as num_pets FROM spider_dev.pets_1.student AS T1 JOIN
    spider_dev.pets_1.has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
  tables:
  - has_pet
  - student
  comparison_rules:
  - columns:
    - num_pets
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_53:
  query_name: spider_53
  question: How many pets are owned by students that have an age greater than 20?
    Display as num_pets.
  golden_query: SELECT count(*) as num_pets FROM spider_dev.pets_1.student AS T1 JOIN
    spider_dev.pets_1.has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
  tables:
  - has_pet
  - student
  comparison_rules:
  - columns:
    - num_pets
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_54:
  query_name: spider_54
  question: Find the number of dog pets that are raised by female students (with sex
    F). Display as num_pets.
  golden_query: SELECT count(*) as num_pets FROM spider_dev.pets_1.student AS T1 JOIN
    spider_dev.pets_1.has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN spider_dev.pets_1.pets
    AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
  tables:
  - has_pet
  - student
  - pets
  comparison_rules:
  - columns:
    - num_pets
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_55:
  query_name: spider_55
  question: How many dog pets are raised by female students? Display as num_pets.
  golden_query: SELECT count(*) as num_pets FROM spider_dev.pets_1.student AS T1 JOIN
    spider_dev.pets_1.has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN spider_dev.pets_1.pets
    AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
  tables:
  - has_pet
  - student
  - pets
  comparison_rules:
  - columns:
    - num_pets
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_56:
  query_name: spider_56
  question: Find the number of distinct type of pets. Display as num_pets.
  golden_query: SELECT count(DISTINCT pettype) as num_pets FROM spider_dev.pets_1.pets
  tables:
  - pets
  comparison_rules:
  - columns:
    - num_pets
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_57:
  query_name: spider_57
  question: How many different types of pet are there? Display as num_pets.
  golden_query: SELECT count(DISTINCT pettype) as num_pets FROM spider_dev.pets_1.pets
  tables:
  - pets
  comparison_rules:
  - columns:
    - num_pets
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_58:
  query_name: spider_58
  question: Find unique first name of students who have cat or dog pet.
  golden_query: SELECT DISTINCT T1.Fname FROM spider_dev.pets_1.student AS T1 JOIN
    spider_dev.pets_1.has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN spider_dev.pets_1.pets
    AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
  tables:
  - has_pet
  - student
  - pets
  comparison_rules:
  - columns:
    - Fname
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_59:
  query_name: spider_59
  question: What are the unique first names of every student who has a cat or dog
    as a pet?
  golden_query: SELECT DISTINCT T1.Fname FROM spider_dev.pets_1.student AS T1 JOIN
    spider_dev.pets_1.has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN spider_dev.pets_1.pets
    AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
  tables:
  - has_pet
  - student
  - pets
  comparison_rules:
  - columns:
    - Fname
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_60:
  query_name: spider_60
  question: Find the first name of students who have both cat and dog pets .
  golden_query: select t1.fname from spider_dev.pets_1.student as t1 join spider_dev.pets_1.has_pet
    as t2 on t1.stuid  =  t2.stuid join spider_dev.pets_1.pets as t3 on t3.petid  =  t2.petid
    where t3.pettype  =  'cat' intersect select t1.fname from spider_dev.pets_1.student
    as t1 join spider_dev.pets_1.has_pet as t2 on t1.stuid  =  t2.stuid join spider_dev.pets_1.pets
    as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'
  tables:
  - has_pet
  - student
  - pets
  comparison_rules:
  - columns:
    - fname
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_61:
  query_name: spider_61
  question: What are the students' first names who have both cats and dogs as pets?
  golden_query: SELECT T1.Fname FROM spider_dev.pets_1.student AS T1 JOIN spider_dev.pets_1.has_pet
    AS T2 ON T1.stuid  =  T2.stuid JOIN spider_dev.pets_1.pets AS T3 ON T3.petid  =  T2.petid
    WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM spider_dev.pets_1.student
    AS T1 JOIN spider_dev.pets_1.has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN spider_dev.pets_1.pets
    AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'
  tables:
  - has_pet
  - student
  - pets
  comparison_rules:
  - columns:
    - Fname
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_62:
  query_name: spider_62
  question: Find the major and age of students who do not have a cat pet. Include the stadiums where no concerts happened as well.
  golden_query: SELECT major ,  age FROM spider_dev.pets_1.student WHERE stuid NOT
    IN (SELECT T1.stuid FROM spider_dev.pets_1.student AS T1 JOIN spider_dev.pets_1.has_pet
    AS T2 ON T1.stuid  =  T2.stuid JOIN spider_dev.pets_1.pets AS T3 ON T3.petid  =  T2.petid
    WHERE T3.pettype  =  'cat')
  tables:
  - has_pet
  - student
  - pets
  comparison_rules:
  - columns:
    - major
    - age
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_63:
  query_name: spider_63
  question: What unique major is every student who does not own a cat as a pet, and
    also how old are they?This should include students who may not own pet at all
  golden_query: "WITH no_cat_owners AS (\nSELECT DISTINCT s.stuid\nFROM spider_dev.pets_1.student
    AS s\nLEFT JOIN spider_dev.pets_1.has_pet AS hp\nON s.stuid = hp.stuid\nLEFT JOIN
    spider_dev.pets_1.pets AS p\nON hp.petid = p.petid\nWHERE\np.pettype != 'cat'
    OR p.pettype IS NULL\n)\n\nSELECT\ns.stuid,\ns.major,\ns.age\nFROM spider_dev.pets_1.student
    AS s\nINNER JOIN no_cat_owners AS nco\nON s.stuid = nco.stuid"
  tables:
  - has_pet
  - student
  - pets
  comparison_rules:
  - columns:
    - major
    - age
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_64:
  query_name: spider_64
  question: Find the id of students who do not have a cat pet. Include the students who may not own pet at all.
  golden_query: SELECT stuid FROM spider_dev.pets_1.student EXCEPT SELECT T1.stuid
    FROM spider_dev.pets_1.student AS T1 JOIN spider_dev.pets_1.has_pet AS T2 ON T1.stuid  =  T2.stuid
    JOIN spider_dev.pets_1.pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
  tables:
  - has_pet
  - student
  - pets
  comparison_rules:
  - columns:
    - stuid
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_65:
  query_name: spider_65
  question: What are the ids of the students who do not own cats as pets?
  golden_query: SELECT stuid FROM spider_dev.pets_1.student EXCEPT SELECT T1.stuid
    FROM spider_dev.pets_1.student AS T1 JOIN spider_dev.pets_1.has_pet AS T2 ON T1.stuid  =  T2.stuid
    JOIN spider_dev.pets_1.pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
  tables:
  - has_pet
  - student
  - pets
  comparison_rules:
  - columns:
    - stuid
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_66:
  query_name: spider_66
  question: Find unique first name and age of students who have a dog but do not have
    a cat as a pet.
  golden_query: SELECT distinct T1.fname ,  T1.age FROM spider_dev.pets_1.student
    AS T1 JOIN spider_dev.pets_1.has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN spider_dev.pets_1.pets
    AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN
    (SELECT T1.stuid FROM spider_dev.pets_1.student AS T1 JOIN spider_dev.pets_1.has_pet
    AS T2 ON T1.stuid  =  T2.stuid JOIN spider_dev.pets_1.pets AS T3 ON T3.petid  =  T2.petid
    WHERE T3.pettype  =  'cat')
  tables:
  - has_pet
  - student
  - pets
  comparison_rules:
  - columns:
    - fname
    - age
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_67:
  query_name: spider_67
  question: What is the unique first name of every student who has a dog but does
    not have a cat?
  golden_query: SELECT distinct T1.fname ,  T1.age FROM spider_dev.pets_1.student
    AS T1 JOIN spider_dev.pets_1.has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN spider_dev.pets_1.pets
    AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN
    (SELECT T1.stuid FROM spider_dev.pets_1.student AS T1 JOIN spider_dev.pets_1.has_pet
    AS T2 ON T1.stuid  =  T2.stuid JOIN spider_dev.pets_1.pets AS T3 ON T3.petid  =  T2.petid
    WHERE T3.pettype  =  'cat')
  tables:
  - has_pet
  - student
  - pets
  comparison_rules:
  - columns:
    - fname
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_68:
  query_name: spider_68
  question: Find the type and weight of the youngest pet.
  golden_query: SELECT pettype ,  weight FROM spider_dev.pets_1.pets ORDER BY pet_age
    LIMIT 1
  tables:
  - pets
  comparison_rules:
  - columns:
    - pettype
    - weight
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_69:
  query_name: spider_69
  question: What type of pet is the youngest animal, and how much does it weigh?
  golden_query: SELECT pettype ,  weight FROM spider_dev.pets_1.pets ORDER BY pet_age
    LIMIT 1
  tables:
  - pets
  comparison_rules:
  - columns:
    - pettype
    - weight
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_70:
  query_name: spider_70
  question: Find the id and weight of all pets whose age is older than 1.
  golden_query: SELECT petid ,  weight FROM spider_dev.pets_1.pets WHERE pet_age  >  1
  tables:
  - pets
  comparison_rules:
  - columns:
    - petid
    - weight
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_71:
  query_name: spider_71
  question: What is the id and weight of every pet who is older than 1?
  golden_query: SELECT petid ,  weight FROM spider_dev.pets_1.pets WHERE pet_age  >  1
  tables:
  - pets
  comparison_rules:
  - columns:
    - petid
    - weight
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_72:
  query_name: spider_72
  question: Find the average and maximum pet age for each type of pet. Display as
    avg_age, max_age.
  golden_query: SELECT avg(pet_age) as avg_age,  max(pet_age) max_age,  pettype FROM
    spider_dev.pets_1.pets GROUP BY pettype
  tables:
  - pets
  comparison_rules:
  - columns:
    - avg_age
    - max_age
    - pettype
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_73:
  query_name: spider_73
  question: What is the average and maximum age of pet for each pet type? Display
    as average_age, max_age, pettype
  golden_query: SELECT avg(pet_age) average_age,  max(pet_age) max_age,  pettype FROM
    spider_dev.pets_1.pets GROUP BY pettype
  tables:
  - pets
  comparison_rules:
  - columns:
    - average_age
    - max_age
    - pettype
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_74:
  query_name: spider_74
  question: Find the average weight for each pet type. Display as avg_wei
  golden_query: SELECT avg(weight) as avg_wei,  pettype FROM spider_dev.pets_1.pets
    GROUP BY pettype
  tables:
  - pets
  comparison_rules:
  - columns:
    - avg_wei
    - pettype
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_75:
  query_name: spider_75
  question: What is the average weight for each type of pet? Display as avg_wei
  golden_query: SELECT avg(weight) as avg_wei,  pettype FROM spider_dev.pets_1.pets
    GROUP BY pettype
  tables:
  - pets
  comparison_rules:
  - columns:
    - avg_wei
    - pettype
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_76:
  query_name: spider_76
  question: Find the unique first name and age of students who have a pet.
  golden_query: SELECT DISTINCT T1.fname ,  T1.age FROM spider_dev.pets_1.student
    AS T1 JOIN spider_dev.pets_1.has_pet AS T2 ON T1.stuid  =  T2.stuid
  tables:
  - has_pet
  - student
  comparison_rules:
  - columns:
    - fname
    - age
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_77:
  query_name: spider_77
  question: What are the different first names and ages of the students who do have
    pets?
  golden_query: SELECT DISTINCT T1.fname ,  T1.age FROM spider_dev.pets_1.student
    AS T1 JOIN spider_dev.pets_1.has_pet AS T2 ON T1.stuid  =  T2.stuid
  tables:
  - has_pet
  - student
  comparison_rules:
  - columns:
    - fname
    - age
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_78:
  query_name: spider_78
  question: Find the id of the pet owned by student whose last name is ‘Smith’.
  golden_query: SELECT T2.petid FROM spider_dev.pets_1.student AS T1 JOIN spider_dev.pets_1.has_pet
    AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'
  tables:
  - has_pet
  - student
  comparison_rules:
  - columns:
    - petid
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_79:
  query_name: spider_79
  question: What is the id of the pet owned by the student whose last name is 'Smith'?
  golden_query: SELECT T2.petid FROM spider_dev.pets_1.student AS T1 JOIN spider_dev.pets_1.has_pet
    AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'
  tables:
  - has_pet
  - student
  comparison_rules:
  - columns:
    - petid
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_80:
  query_name: spider_80
  question: Find the number of pets for each student who has any pet and student id.
    Display as num_pets.
  golden_query: SELECT count(*) as num_pets,  T1.stuid FROM spider_dev.pets_1.student
    AS T1 JOIN spider_dev.pets_1.has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid
  tables:
  - has_pet
  - student
  comparison_rules:
  - columns:
    - num_pets
    - stuid
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_81:
  query_name: spider_81
  question: For students who have pets , how many pets does each student have ? list
    their ids instead of names . Display as num_pets
  golden_query: select count(*) as num_pets,  t1.stuid from spider_dev.pets_1.student
    as t1 join spider_dev.pets_1.has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid
  tables:
  - has_pet
  - student
  comparison_rules:
  - columns:
    - num_pets
    - stuid
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_82:
  query_name: spider_82
  question: Find the first name and gender of student who have more than one pet.
  golden_query: SELECT T1.fname ,  T1.sex FROM spider_dev.pets_1.student AS T1 JOIN
    spider_dev.pets_1.has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.fname ,  T1.sex
    HAVING count(*)  >  1
  tables:
  - has_pet
  - student
  comparison_rules:
  - columns:
    - fname
    - sex
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_83:
  query_name: spider_83
  question: What is the first name and gender of the all the students who have more
    than one pet?
  golden_query: SELECT T1.fname ,  T1.sex FROM spider_dev.pets_1.student AS T1 JOIN
    spider_dev.pets_1.has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.fname ,  T1.sex
    HAVING count(*)  >  1
  tables:
  - has_pet
  - student
  comparison_rules:
  - columns:
    - fname
    - sex
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_84:
  query_name: spider_84
  question: Find the last name of the student who has a cat that is age 3.
  golden_query: SELECT T1.lname FROM spider_dev.pets_1.student AS T1 JOIN spider_dev.pets_1.has_pet
    AS T2 ON T1.stuid  =  T2.stuid JOIN spider_dev.pets_1.pets AS T3 ON T3.petid  =  T2.petid
    WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
  tables:
  - has_pet
  - student
  - pets
  comparison_rules:
  - columns:
    - lname
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_85:
  query_name: spider_85
  question: What is the last name of the student who has a cat that is 3 years old?
  golden_query: SELECT T1.lname FROM spider_dev.pets_1.student AS T1 JOIN spider_dev.pets_1.has_pet
    AS T2 ON T1.stuid  =  T2.stuid JOIN spider_dev.pets_1.pets AS T3 ON T3.petid  =  T2.petid
    WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
  tables:
  - has_pet
  - student
  - pets
  comparison_rules:
  - columns:
    - lname
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_86:
  query_name: spider_86
  question: Find the average age of students who do not have any pet . Display as
    avg_age
  golden_query: select avg(age) as avg_age from spider_dev.pets_1.student where stuid
    not in (select stuid from spider_dev.pets_1.has_pet)
  tables:
  - has_pet
  - student
  comparison_rules:
  - columns:
    - avg_age
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_87:
  query_name: spider_87
  question: What is the average age for all students who do not own any pets ?Display
    as avg_age
  golden_query: select avg(age) as avg_age from spider_dev.pets_1.student where stuid
    not in (select stuid from spider_dev.pets_1.has_pet)
  tables:
  - has_pet
  - student
  comparison_rules:
  - columns:
    - avg_age
    match: exact
  auto_select_schema: 'false'
  schemas:
  - pets_1
spider_88:
  query_name: spider_88
  question: How many continents are there? Display as num_cont.
  golden_query: SELECT count(*) as num_cont FROM spider_dev.car_1.CONTINENTS;
  tables:
  - CONTINENTS
  comparison_rules:
  - columns:
    - num_cont
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_89:
  query_name: spider_89
  question: What is the number of continents? Display as num_cont.
  golden_query: SELECT count(*) as num_cont FROM spider_dev.car_1.CONTINENTS;
  tables:
  - CONTINENTS
  comparison_rules:
  - columns:
    - num_cont
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_90:
  query_name: spider_90
  question: How many countries does each continent have? List the continent id, continent
    name and the number of countries. Display as num_country.
  golden_query: SELECT T1.ContId ,  T1.Continent ,  count(*) as num_country FROM spider_dev.car_1.CONTINENTS
    AS T1 JOIN spider_dev.car_1.COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP
    BY T1.ContId ,  T1.Continent;
  tables:
  - COUNTRIES
  - CONTINENTS
  comparison_rules:
  - columns:
    - ContId
    - Continent
    - num_country
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_91:
  query_name: spider_91
  question: For each continent, list its id, name, and how many countries it has?
    Display as num_country.
  golden_query: SELECT T1.ContId ,  T1.Continent ,  count(*) as num_country FROM spider_dev.car_1.CONTINENTS
    AS T1 JOIN spider_dev.car_1.COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP
    BY T1.ContId ,  T1.Continent;
  tables:
  - COUNTRIES
  - CONTINENTS
  comparison_rules:
  - columns:
    - ContId
    - Continent
    - num_country
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_92:
  query_name: spider_92
  question: How many countries are listed? Display as num_country.
  golden_query: SELECT count(*) as num_country FROM spider_dev.car_1.COUNTRIES;
  tables:
  - COUNTRIES
  comparison_rules:
  - columns:
    - num_country
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_93:
  query_name: spider_93
  question: How many countries exist? Display as num_country.
  golden_query: SELECT count(*) as num_country FROM spider_dev.car_1.COUNTRIES;
  tables:
  - COUNTRIES
  comparison_rules:
  - columns:
    - num_country
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_94:
  query_name: spider_94
  question: How many models does each car maker produce? List maker full name, id
    and the number. Display as num_models.
  golden_query: SELECT T1.FullName ,  T1.Id ,  count(*) as num_models FROM spider_dev.car_1.CAR_MAKERS
    AS T1 JOIN spider_dev.car_1.MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.FullName
    ,  T1.Id;
  tables:
  - MODEL_LIST
  - CAR_MAKERS
  comparison_rules:
  - columns:
    - FullName
    - Id
    - num_models
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_95:
  query_name: spider_95
  question: What is the full name of each car maker, along with its id and how many
    models it produces? Display as num_models.
  golden_query: SELECT T1.FullName ,  T1.Id ,  count(*) as num_models FROM spider_dev.car_1.CAR_MAKERS
    AS T1 JOIN spider_dev.car_1.MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.FullName
    ,  T1.Id;
  tables:
  - MODEL_LIST
  - CAR_MAKERS
  comparison_rules:
  - columns:
    - FullName
    - Id
    - num_models
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_96:
  query_name: spider_96
  question: Which model of the car has the minimum horsepower? Show 1 row.
  golden_query: SELECT T1.Model FROM spider_dev.car_1.CAR_NAMES AS T1 JOIN spider_dev.car_1.CARS_DATA
    AS T2 ON T1.MakeId = T2.Id ORDER BY TRY_TO_NUMBER(T2.horsepower) ASC NULLS LAST
    LIMIT 1;
  tables:
  - CARS_DATA
  - CAR_NAMES
  comparison_rules:
  - columns:
    - Model
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_97:
  query_name: spider_97
  question: What is the model of the car with the smallest amount of horsepower? Show
    1 row.
  golden_query: SELECT T1.Model FROM spider_dev.car_1.CAR_NAMES AS T1 JOIN spider_dev.car_1.CARS_DATA
    AS T2 ON T1.MakeId = T2.Id ORDER BY TRY_TO_NUMBER(T2.horsepower) ASC NULLS LAST
    LIMIT 1;
  tables:
  - CARS_DATA
  - CAR_NAMES
  comparison_rules:
  - columns:
    - Model
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_98:
  query_name: spider_98
  question: Find the model of the car whose weight is below the average weight.
  golden_query: SELECT T1.model FROM spider_dev.car_1.CAR_NAMES AS T1 JOIN spider_dev.car_1.CARS_DATA
    AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM spider_dev.car_1.CARS_DATA)
  tables:
  - CARS_DATA
  - CAR_NAMES
  comparison_rules:
  - columns:
    - model
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_99:
  query_name: spider_99
  question: What is the model for the car with a weight smaller than the average?
  golden_query: SELECT T1.model FROM spider_dev.car_1.CAR_NAMES AS T1 JOIN spider_dev.car_1.CARS_DATA
    AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM spider_dev.car_1.CARS_DATA)
  tables:
  - CARS_DATA
  - CAR_NAMES
  comparison_rules:
  - columns:
    - model
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_100:
  query_name: spider_100
  question: Find unique name of the makers that produced some cars in the year of
    1970?
  golden_query: SELECT DISTINCT T1.Maker FROM spider_dev.car_1.CAR_MAKERS AS T1 JOIN
    spider_dev.car_1.MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN spider_dev.car_1.CAR_NAMES
    AS T3 ON T2.model  =  T3.model JOIN spider_dev.car_1.CARS_DATA AS T4 ON T3.MakeId  =  T4.id
    WHERE T4.year  =  '1970';
  tables:
  - MODEL_LIST
  - CARS_DATA
  - CAR_MAKERS
  - CAR_NAMES
  comparison_rules:
  - columns:
    - Maker
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_101:
  query_name: spider_101
  question: What is the name of the different car makers who produced a car in 1970?
  golden_query: SELECT DISTINCT T1.Maker FROM spider_dev.car_1.CAR_MAKERS AS T1 JOIN
    spider_dev.car_1.MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN spider_dev.car_1.CAR_NAMES
    AS T3 ON T2.model  =  T3.model JOIN spider_dev.car_1.CARS_DATA AS T4 ON T3.MakeId  =  T4.id
    WHERE T4.year  =  '1970';
  tables:
  - MODEL_LIST
  - CARS_DATA
  - CAR_MAKERS
  - CAR_NAMES
  comparison_rules:
  - columns:
    - Maker
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_102:
  query_name: spider_102
  question: Find the make and production time of the cars that were produced in the
    earliest year?
  golden_query: SELECT T2.Make ,  T1.Year FROM spider_dev.car_1.CARS_DATA AS T1 JOIN
    spider_dev.car_1.CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT
    min(YEAR) FROM spider_dev.car_1.CARS_DATA);
  tables:
  - CARS_DATA
  - CAR_NAMES
  comparison_rules:
  - columns:
    - Make
    - Year
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_103:
  query_name: spider_103
  question: What is the maker of the carr produced in the earliest year and what year
    was it?
  golden_query: SELECT T2.Make ,  T1.Year FROM spider_dev.car_1.CARS_DATA AS T1 JOIN
    spider_dev.car_1.CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT
    min(YEAR) FROM spider_dev.car_1.CARS_DATA);
  tables:
  - CARS_DATA
  - CAR_NAMES
  comparison_rules:
  - columns:
    - Make
    - Year
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_104:
  query_name: spider_104
  question: Which distinct car models are the produced after 1980?
  golden_query: SELECT DISTINCT T1.model FROM spider_dev.car_1.MODEL_LIST AS T1 JOIN
    spider_dev.car_1.CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN spider_dev.car_1.CARS_DATA
    AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;
  tables:
  - MODEL_LIST
  - CARS_DATA
  - CAR_NAMES
  comparison_rules:
  - columns:
    - model
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_105:
  query_name: spider_105
  question: What are the different models for the cards produced after 1980?
  golden_query: SELECT DISTINCT T1.model FROM spider_dev.car_1.MODEL_LIST AS T1 JOIN
    spider_dev.car_1.CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN spider_dev.car_1.CARS_DATA
    AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;
  tables:
  - MODEL_LIST
  - CARS_DATA
  - CAR_NAMES
  comparison_rules:
  - columns:
    - model
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_106:
  query_name: spider_106
  question: How many car makers are there in each continents? List the continent name
    and the count. Display as num_makers.
  golden_query: SELECT T1.Continent ,  count(*) as num_makers FROM spider_dev.car_1.CONTINENTS
    AS T1 JOIN spider_dev.car_1.COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN
    spider_dev.car_1.car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;
  tables:
  - COUNTRIES
  - CONTINENTS
  - car_makers
  comparison_rules:
  - columns:
    - Continent
    - num_makers
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_107:
  query_name: spider_107
  question: What is the name of each continent and how many car makers are there in
    each one? Display as continent_name, num_makers."
  golden_query: SELECT cont.continent AS continent_name, COUNT(DISTINCT id) AS num_makers FROM spider_dev.car_1.continents AS cont LEFT JOIN spider_dev.car_1.countries AS cn ON contid = cn.continent LEFT JOIN spider_dev.car_1.car_makers AS cm ON countryid = country GROUP BY cont.continent ORDER BY num_makers DESC
  tables:
  - COUNTRIES
  - CONTINENTS
  - car_makers
  comparison_rules:
  - columns:
    - continent_name
    - num_makers
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_108:
  query_name: spider_108
  question: Which of the countries has the most car makers? List the country name.
  golden_query: SELECT T2.CountryName FROM spider_dev.car_1.CAR_MAKERS AS T1 JOIN
    spider_dev.car_1.COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T2.CountryName
    ORDER BY Count(*) DESC LIMIT 1;
  tables:
  - COUNTRIES
  - CAR_MAKERS
  comparison_rules:
  - columns:
    - CountryName
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_109:
  query_name: spider_109
  question: What is the name of the country with the most car makers?
  golden_query: SELECT T2.CountryName FROM spider_dev.car_1.CAR_MAKERS AS T1 JOIN
    spider_dev.car_1.COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T2.CountryName
    ORDER BY Count(*) DESC LIMIT 1;
  tables:
  - COUNTRIES
  - CAR_MAKERS
  comparison_rules:
  - columns:
    - CountryName
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_110:
  query_name: spider_110
  question: How many car models are produced by each maker ? Only list the count and
    the maker full name . Display as num_models.
  golden_query: select count(*) as num_models,  t2.fullname from spider_dev.car_1.model_list
    as t1 join spider_dev.car_1.car_makers as t2 on t1.maker  =  t2.id group by t2.fullname;
  tables:
  - model_list
  - car_makers
  comparison_rules:
  - columns:
    - num_models
    - fullname
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_111:
  query_name: spider_111
  question: What is the number of car models that are produced by each maker and what
    is the id and full name of each maker? Display as num_models.
  golden_query: SELECT Count(*) as num_models,  T2.FullName ,  T2.id FROM spider_dev.car_1.MODEL_LIST
    AS T1 JOIN spider_dev.car_1.CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.FullName
    ,  T2.id;
  tables:
  - MODEL_LIST
  - CAR_MAKERS
  comparison_rules:
  - columns:
    - num_models
    - FullName
    - id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_112:
  query_name: spider_112
  question: What is the accelerate of the car make amc hornet sportabout (sw)?
  golden_query: SELECT T1.Accelerate FROM spider_dev.car_1.CARS_DATA AS T1 JOIN spider_dev.car_1.CAR_NAMES
    AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';
  tables:
  - CARS_DATA
  - CAR_NAMES
  comparison_rules:
  - columns:
    - Accelerate
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_113:
  query_name: spider_113
  question: How much does the car accelerate that makes amc hornet sportabout (sw)?
  golden_query: SELECT T1.Accelerate FROM spider_dev.car_1.CARS_DATA AS T1 JOIN spider_dev.car_1.CAR_NAMES
    AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';
  tables:
  - CARS_DATA
  - CAR_NAMES
  comparison_rules:
  - columns:
    - Accelerate
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_114:
  query_name: spider_114
  question: How many car makers are there in France? Display as num_makers.
  golden_query: SELECT count(*) as num_makers FROM spider_dev.car_1.CAR_MAKERS AS
    T1 JOIN spider_dev.car_1.COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE
    T2.CountryName  =  'France';
  tables:
  - COUNTRIES
  - CAR_MAKERS
  comparison_rules:
  - columns:
    - num_makers
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_115:
  query_name: spider_115
  question: What is the number of makers of care in France? Display as num_makers.
  golden_query: SELECT count(*) as num_makers FROM spider_dev.car_1.CAR_MAKERS AS
    T1 JOIN spider_dev.car_1.COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE
    T2.CountryName  =  'France';
  tables:
  - COUNTRIES
  - CAR_MAKERS
  comparison_rules:
  - columns:
    - num_makers
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_116:
  query_name: spider_116
  question: How many car models are produced in the usa? Display as num_models.
  golden_query: SELECT count(*) as num_models FROM spider_dev.car_1.MODEL_LIST AS
    T1 JOIN spider_dev.car_1.CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN spider_dev.car_1.COUNTRIES
    AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
  tables:
  - COUNTRIES
  - MODEL_LIST
  - CAR_MAKERS
  comparison_rules:
  - columns:
    - num_models
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_117:
  query_name: spider_117
  question: What is the count of unique car models produced in the United States?
    Display as count_of_car_models.
  golden_query: SELECT count(distinct model) as count_of_car_models FROM spider_dev.car_1.MODEL_LIST
    AS T1 JOIN spider_dev.car_1.CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN spider_dev.car_1.COUNTRIES
    AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'United States';
  tables:
  - COUNTRIES
  - MODEL_LIST
  - CAR_MAKERS
  comparison_rules:
  - columns:
    - count_of_car_models
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_118:
  query_name: spider_118
  question: What is the average miles per gallon(mpg) of the cars with 4 cylinders?
    mpg column is text and can have null values
  golden_query: "SELECT AVG(TRY_TO_NUMBER(mpg)) AS avg_mpg\nFROM spider_dev.car_1.cars_data\n\
    WHERE\n    cylinders = 4 AND NOT mpg IS NULL"
  tables:
  - cars_data
  comparison_rules:
  - columns:
    - avg_mpg
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_119:
  query_name: spider_119
  question: What is the average miles per gallon of all the cards with 4 cylinders?
    mpg column is text and can have null values
  golden_query: "SELECT AVG(TRY_TO_NUMBER(mpg)) AS avg_mpg\nFROM spider_dev.car_1.cars_data\n\
    WHERE\n    cylinders = 4 AND NOT mpg IS NULL"
  tables:
  - cars_data
  comparison_rules:
  - columns:
    - avg_mpg
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_120:
  query_name: spider_120
  question: What is the smallest weight of the car produced with 8 cylinders on 1974
    ? Display as min_weight.
  golden_query: select min(weight) as min_weight from spider_dev.car_1.cars_data where
    cylinders  =  8 and year  =  1974
  tables:
  - cars_data
  comparison_rules:
  - columns:
    - min_weight
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_121:
  query_name: spider_121
  question: What is the minimum weight of the car with 8 cylinders produced in 1974
    ? Display as min_weight.
  golden_query: select min(weight) as min_weight from spider_dev.car_1.cars_data where
    cylinders  =  8 and year  =  1974
  tables:
  - cars_data
  comparison_rules:
  - columns:
    - min_weight
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_122:
  query_name: spider_122
  question: What are all the makers and models in model_list table?
  golden_query: SELECT Maker ,  Model FROM spider_dev.car_1.MODEL_LIST;
  tables:
  - MODEL_LIST
  comparison_rules:
  - columns:
    - Maker
    - Model
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_123:
  query_name: spider_123
  question: What are the makers and models in model_list table?
  golden_query: SELECT Maker ,  Model FROM spider_dev.car_1.MODEL_LIST;
  tables:
  - MODEL_LIST
  comparison_rules:
  - columns:
    - Maker
    - Model
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_124:
  query_name: spider_124
  question: What are the countries having at least one car maker? List name and id.
  golden_query: SELECT T1.CountryName ,  T1.CountryId FROM spider_dev.car_1.COUNTRIES
    AS T1 JOIN spider_dev.car_1.CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP
    BY T1.CountryName ,  T1.CountryId HAVING count(*)  >=  1;
  tables:
  - COUNTRIES
  - CAR_MAKERS
  comparison_rules:
  - columns:
    - CountryName
    - CountryId
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_125:
  query_name: spider_125
  question: What are the names and ids of all countries with at least one car maker?
  golden_query: SELECT T1.CountryName ,  T1.CountryId FROM spider_dev.car_1.COUNTRIES
    AS T1 JOIN spider_dev.car_1.CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP
    BY T1.CountryName ,  T1.CountryId HAVING count(*)  >=  1;
  tables:
  - COUNTRIES
  - CAR_MAKERS
  comparison_rules:
  - columns:
    - CountryName
    - CountryId
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_126:
  query_name: spider_126
  question: What is the number of the cars with horsepower more than 150? horsepower
    can be in text and may have null values. Display as num_cars.
  golden_query: "SELECT COUNT(*) as num_cars \nFROM spider_dev.car_1.cars_data\nWHERE\n\
    \    TRY_TO_NUMBER(horsepower) > 150 AND NOT horsepower IS NULL"
  tables:
  - cars_data
  comparison_rules:
  - columns:
    - num_cars
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_127:
  query_name: spider_127
  question: What is the number of cars with a horsepower greater than 150? horsepower
    can be in text and may have null values. Display as num_cars.
  golden_query: "SELECT COUNT(*) as num_cars \nFROM spider_dev.car_1.cars_data\nWHERE\n\
    \    TRY_TO_NUMBER(horsepower) > 150\n"
  tables:
  - cars_data
  comparison_rules:
  - columns:
    - num_cars
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_128:
  query_name: spider_128
  question: What is the average weight of cars each year? Display as avg_weight.
  golden_query: SELECT avg(Weight) as avg_weight,  YEAR FROM spider_dev.car_1.CARS_DATA
    GROUP BY YEAR;
  tables:
  - CARS_DATA
  comparison_rules:
  - columns:
    - avg_weight
    - YEAR
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_129:
  query_name: spider_129
  question: What is the average weight and year for each year? Display as avg_weight.
  golden_query: SELECT avg(Weight) as avg_weight,  YEAR FROM spider_dev.car_1.CARS_DATA
    GROUP BY YEAR;
  tables:
  - CARS_DATA
  comparison_rules:
  - columns:
    - avg_weight
    - YEAR
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_130:
  query_name: spider_130
  question: Which countries in europe have at least 3 car manufacturers?
  golden_query: SELECT T1.CountryName FROM spider_dev.car_1.COUNTRIES AS T1 JOIN spider_dev.car_1.CONTINENTS
    AS T2 ON T1.Continent  =  T2.ContId JOIN spider_dev.car_1.CAR_MAKERS AS T3 ON
    T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName
    HAVING count(*)  >=  3;
  tables:
  - COUNTRIES
  - CONTINENTS
  - CAR_MAKERS
  comparison_rules:
  - columns:
    - CountryName
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_131:
  query_name: spider_131
  question: What are the names of all European countries with at least 3 manufacturers?
  golden_query: SELECT T1.CountryName FROM spider_dev.car_1.COUNTRIES AS T1 JOIN spider_dev.car_1.CONTINENTS
    AS T2 ON T1.Continent  =  T2.ContId JOIN spider_dev.car_1.CAR_MAKERS AS T3 ON
    T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName
    HAVING count(*)  >=  3;
  tables:
  - COUNTRIES
  - CONTINENTS
  - CAR_MAKERS
  comparison_rules:
  - columns:
    - CountryName
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_132:
  query_name: spider_132
  question: What is the maximum horsepower and the make of the car models with 3 cylinders?
    Display as max_horsepower.
  golden_query: SELECT T2.horsepower as max_horsepower, T1.Make FROM spider_dev.car_1.CAR_NAMES
    AS T1 JOIN spider_dev.car_1.CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders
    = 3 ORDER BY TRY_TO_NUMBER(T2.horsepower) DESC nulls last;
  tables:
  - CARS_DATA
  - CAR_NAMES
  comparison_rules:
  - columns:
    - max_horsepower
    - Make
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_133:
  query_name: spider_133
  question: What is the largest amount of horsepower for the models with 3 cylinders
    and what make is it? Display as horsepower, make.
  golden_query: SELECT T2.horsepower, T1.Make FROM spider_dev.car_1.CAR_NAMES AS T1
    JOIN spider_dev.car_1.CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders
    = 3 ORDER BY TRY_TO_NUMBER(T2.horsepower) DESC nulls last;
  tables:
  - CARS_DATA
  - CAR_NAMES
  comparison_rules:
  - columns:
    - horsepower
    - Make
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_134:
  query_name: spider_134
  question: Which model saves the most gasoline? That is to say, have the maximum
    miles per gallon.
  golden_query: select t1.model  from spider_dev.car_1.car_names as t1 join spider_dev.car_1.cars_data
    as t2 on t1.makeid = t2.id order by try_to_number(t2.mpg) desc NULLS LAST limit
    1;
  tables:
  - cars_data
  - car_names
  comparison_rules:
  - columns:
    - Model
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_135:
  query_name: spider_135
  question: What is the car model with the highest mpg ?
  golden_query: select t1.model  from spider_dev.car_1.car_names as t1 join spider_dev.car_1.cars_data
    as t2 on t1.makeid = t2.id order by try_to_number(t2.mpg) desc NULLS LAST limit
    1;
  tables:
  - cars_data
  - car_names
  comparison_rules:
  - columns:
    - model
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_136:
  query_name: spider_136
  question: What is the average horsepower of the cars before 1980? horsepower can
    be in text and may have null values
  golden_query: "SELECT AVG(TRY_TO_NUMBER(horsepower)) AS avg_horsepower\nFROM spider_dev.car_1.cars_data\n\
    WHERE\n    year < 1980\n"
  tables:
  - cars_data
  comparison_rules:
  - columns:
    - avg_horsepower
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_137:
  query_name: spider_137
  question: What is the average horsepower for all cars produced before 1980 ? horsepower
    can be in text and may have null values
  golden_query: "SELECT AVG(TRY_TO_NUMBER(horsepower)) AS avg_horsepower\nFROM spider_dev.car_1.cars_data\n\
    WHERE\n    year < 1980\n"
  tables:
  - cars_data
  comparison_rules:
  - columns:
    - avg_horsepower
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_138:
  query_name: spider_138
  question: What is the average edispl of the cars of model volvo? Display as avg_edi.
  golden_query: SELECT avg(T2.edispl) as avg_edi FROM spider_dev.car_1.CAR_NAMES AS
    T1 JOIN spider_dev.car_1.CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';
  tables:
  - CARS_DATA
  - CAR_NAMES
  comparison_rules:
  - columns:
    - avg_edi
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_139:
  query_name: spider_139
  question: What is the average edispl for all volvo model? Display as avg_edipsl
  golden_query: SELECT avg(T2.edispl) as avg_edipsl FROM spider_dev.car_1.CAR_NAMES
    AS T1 JOIN spider_dev.car_1.CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';
  tables:
  - CARS_DATA
  - CAR_NAMES
  comparison_rules:
  - columns:
    - avg_edipsl
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_140:
  query_name: spider_140
  question: What is the maximum accelerate for different number of cylinders? Display
    as max_acc.
  golden_query: SELECT max(Accelerate) as max_acc,  Cylinders FROM spider_dev.car_1.CARS_DATA
    GROUP BY Cylinders;
  tables:
  - CARS_DATA
  comparison_rules:
  - columns:
    - max_acc
    - Cylinders
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_141:
  query_name: spider_141
  question: What is the maximum accelerate for all the different cylinders? Display
    as max_acc.
  golden_query: SELECT max(Accelerate) as max_acc,  Cylinders FROM spider_dev.car_1.CARS_DATA
    GROUP BY Cylinders;
  tables:
  - CARS_DATA
  comparison_rules:
  - columns:
    - max_acc
    - Cylinders
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_142:
  query_name: spider_142
  question: Which model has the most version(make) of cars?
  golden_query: SELECT Model FROM spider_dev.car_1.CAR_NAMES GROUP BY Model ORDER
    BY count(*) DESC LIMIT 1;
  tables:
  - CAR_NAMES
  comparison_rules:
  - columns:
    - Model
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_143:
  query_name: spider_143
  question: What model has the most different versions?
  golden_query: SELECT Model FROM spider_dev.car_1.CAR_NAMES GROUP BY Model ORDER
    BY count(*) DESC LIMIT 1;
  tables:
  - CAR_NAMES
  comparison_rules:
  - columns:
    - Model
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_144:
  query_name: spider_144
  question: How many cars have more than 4 cylinders? Display as num_cars.
  golden_query: SELECT count(*) as num_cars FROM spider_dev.car_1.CARS_DATA WHERE
    Cylinders  >  4;
  tables:
  - CARS_DATA
  comparison_rules:
  - columns:
    - num_cars
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_145:
  query_name: spider_145
  question: What is the number of cars with more than 4 cylinders? Display as num_cars.
  golden_query: SELECT count(*) as num_cars FROM spider_dev.car_1.CARS_DATA WHERE
    Cylinders  >  4;
  tables:
  - CARS_DATA
  comparison_rules:
  - columns:
    - num_cars
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_146:
  query_name: spider_146
  question: how many cars were produced in 1980? Display as num_cars.
  golden_query: SELECT count(*) as num_cars FROM spider_dev.car_1.CARS_DATA WHERE
    YEAR  =  1980;
  tables:
  - CARS_DATA
  comparison_rules:
  - columns:
    - num_cars
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_147:
  query_name: spider_147
  question: In 1980, how many cars were made? Display as num_cars.
  golden_query: SELECT count(*) as num_cars FROM spider_dev.car_1.CARS_DATA WHERE
    YEAR  =  1980;
  tables:
  - CARS_DATA
  comparison_rules:
  - columns:
    - num_cars
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_148:
  query_name: spider_148
  question: How many car models were produced by the maker with full name American
    Motor Company? Display as num_models.
  golden_query: SELECT count(*) as num_models FROM spider_dev.car_1.CAR_MAKERS AS
    T1 JOIN spider_dev.car_1.MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American
    Motor Company';
  tables:
  - MODEL_LIST
  - CAR_MAKERS
  comparison_rules:
  - columns:
    - num_models
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_149:
  query_name: spider_149
  question: What is the number of car models created by the car maker American Motor
    Company? Display as num_models.
  golden_query: SELECT count(*) as num_models FROM spider_dev.car_1.CAR_MAKERS AS
    T1 JOIN spider_dev.car_1.MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American
    Motor Company';
  tables:
  - MODEL_LIST
  - CAR_MAKERS
  comparison_rules:
  - columns:
    - num_models
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_150:
  query_name: spider_150
  question: Which makers designed more than 3 car models? List full name and the id.
  golden_query: SELECT T1.FullName ,  T1.Id FROM spider_dev.car_1.CAR_MAKERS AS T1
    JOIN spider_dev.car_1.MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.FullName
    ,  T1.Id HAVING count(*)  >  3;
  tables:
  - MODEL_LIST
  - CAR_MAKERS
  comparison_rules:
  - columns:
    - FullName
    - Id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_151:
  query_name: spider_151
  question: What are the names and ids of all makers with more than 3 models? Display
    fullname and id
  golden_query: SELECT T1.FullName ,  T1.Id FROM spider_dev.car_1.CAR_MAKERS AS T1
    JOIN spider_dev.car_1.MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.FullName
    ,  T1.Id HAVING count(*)  >  3;
  tables:
  - MODEL_LIST
  - CAR_MAKERS
  comparison_rules:
  - columns:
    - FullName
    - Id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_152:
  query_name: spider_152
  question: Which distinctive models are produced by maker with the full name General
    Motors or weighing more than 3500?
  golden_query: SELECT DISTINCT T2.Model FROM spider_dev.car_1.CAR_NAMES AS T1 JOIN
    spider_dev.car_1.MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN spider_dev.car_1.CAR_MAKERS
    AS T3 ON T2.Maker  =  T3.Id JOIN spider_dev.car_1.CARS_DATA AS T4 ON T1.MakeId  =  T4.Id
    WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
  tables:
  - MODEL_LIST
  - CARS_DATA
  - CAR_MAKERS
  - CAR_NAMES
  comparison_rules:
  - columns:
    - Model
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_153:
  query_name: spider_153
  question: What are the different models created by either the car maker General
    Motors or weighed more than 3500?
  golden_query: SELECT DISTINCT T2.Model FROM spider_dev.car_1.CAR_NAMES AS T1 JOIN
    spider_dev.car_1.MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN spider_dev.car_1.CAR_MAKERS
    AS T3 ON T2.Maker  =  T3.Id JOIN spider_dev.car_1.CARS_DATA AS T4 ON T1.MakeId  =  T4.Id
    WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
  tables:
  - MODEL_LIST
  - CARS_DATA
  - CAR_MAKERS
  - CAR_NAMES
  comparison_rules:
  - columns:
    - Model
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_154:
  query_name: spider_154
  question: In which years cars were produced weighing no less than 3000 and no more
    than 4000 ?
  golden_query: select distinct year from spider_dev.car_1.cars_data where weight
    between 3000 and 4000;
  tables:
  - cars_data
  comparison_rules:
  - columns:
    - year
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_155:
  query_name: spider_155
  question: What are the different years in which there were cars produced that weighed
    less than 4000 and also cars that weighted more than 3000 ?
  golden_query: select distinct year from spider_dev.car_1.cars_data where weight
    between 3000 and 4000;
  tables:
  - cars_data
  comparison_rules:
  - columns:
    - year
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_156:
  query_name: spider_156
  question: What is the horsepower of the car with the largest accelerate?
  golden_query: SELECT T1.horsepower FROM spider_dev.car_1.CARS_DATA AS T1 ORDER BY
    T1.accelerate DESC LIMIT 1;
  tables:
  - CARS_DATA
  comparison_rules:
  - columns:
    - horsepower
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_157:
  query_name: spider_157
  question: What is the horsepower of the car with the greatest accelerate?
  golden_query: SELECT T1.horsepower FROM spider_dev.car_1.CARS_DATA AS T1 ORDER BY
    T1.accelerate DESC LIMIT 1;
  tables:
  - CARS_DATA
  comparison_rules:
  - columns:
    - horsepower
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_158:
  query_name: spider_158
  question: For model volvo, how many cylinders does the car with the least accelerate
    have?
  golden_query: SELECT T1.cylinders FROM spider_dev.car_1.CARS_DATA AS T1 JOIN spider_dev.car_1.CAR_NAMES
    AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate
    ASC LIMIT 1;
  tables:
  - CARS_DATA
  - CAR_NAMES
  comparison_rules:
  - columns:
    - cylinders
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_159:
  query_name: spider_159
  question: For a volvo model, how many cylinders does the version with least accelerate
    have?
  golden_query: SELECT T1.cylinders FROM spider_dev.car_1.CARS_DATA AS T1 JOIN spider_dev.car_1.CAR_NAMES
    AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate
    ASC LIMIT 1;
  tables:
  - CARS_DATA
  - CAR_NAMES
  comparison_rules:
  - columns:
    - cylinders
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_160:
  query_name: spider_160
  question: How many cars have a larger accelerate than the car with the largest horsepower?
    Display as num_cars.
  golden_query: SELECT COUNT(*) as num_cars FROM spider_dev.car_1.CARS_DATA WHERE
    Accelerate  >  ( SELECT Accelerate FROM spider_dev.car_1.CARS_DATA ORDER BY Horsepower
    DESC LIMIT 1 );
  tables:
  - CARS_DATA
  comparison_rules:
  - columns:
    - num_cars
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_161:
  query_name: spider_161
  question: What is the number of cars with a greater accelerate than the one with
    the most horsepower? Display as num_cars.
  golden_query: SELECT COUNT(*) as num_cars FROM spider_dev.car_1.CARS_DATA WHERE
    Accelerate  >  ( SELECT Accelerate FROM spider_dev.car_1.CARS_DATA ORDER BY Horsepower
    DESC LIMIT 1 );
  tables:
  - CARS_DATA
  comparison_rules:
  - columns:
    - num_cars
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_162:
  query_name: spider_162
  question: How many countries has more than 2 car makers ? Display as num_country.
  golden_query: select count(*) as num_country from spider_dev.car_1.countries as
    t1 join spider_dev.car_1.car_makers as t2 on t1.countryid  =  t2.country group
    by t1.countryid having count(*)  >  2
  tables:
  - countries
  - car_makers
  comparison_rules:
  - columns:
    - num_country
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_163:
  query_name: spider_163
  question: What is the number of countries with more than 2 car makers ? Display
    as num_country.
  golden_query: select count(*) as num_country from spider_dev.car_1.countries as
    t1 join spider_dev.car_1.car_makers as t2 on t1.countryid  =  t2.country group
    by t1.countryid having count(*)  >  2
  tables:
  - countries
  - car_makers
  comparison_rules:
  - columns:
    - num_country
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_164:
  query_name: spider_164
  question: How many cars has over 6 cylinders? Display as num_cars.
  golden_query: SELECT COUNT(*) as num_cars FROM spider_dev.car_1.CARS_DATA WHERE
    Cylinders  >  6;
  tables:
  - CARS_DATA
  comparison_rules:
  - columns:
    - num_cars
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_165:
  query_name: spider_165
  question: What is the number of cars ith over 6 cylinders? Display as num_cars.
  golden_query: SELECT COUNT(*) as num_cars FROM spider_dev.car_1.CARS_DATA WHERE
    Cylinders  >  6;
  tables:
  - CARS_DATA
  comparison_rules:
  - columns:
    - num_cars
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_166:
  query_name: spider_166
  question: For the cars with 4 cylinders, which model has the largest horsepower?
  golden_query: SELECT T1.Model FROM spider_dev.car_1.CAR_NAMES AS T1 JOIN spider_dev.car_1.CARS_DATA
    AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC
    LIMIT 1;
  tables:
  - CARS_DATA
  - CAR_NAMES
  comparison_rules:
  - columns:
    - Model
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_167:
  query_name: spider_167
  question: For all of the 4 cylinder cars, which model has the most horsepower?
  golden_query: SELECT T1.Model FROM spider_dev.car_1.CAR_NAMES AS T1 JOIN spider_dev.car_1.CARS_DATA
    AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC
    LIMIT 1;
  tables:
  - CARS_DATA
  - CAR_NAMES
  comparison_rules:
  - columns:
    - Model
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_168:
  query_name: spider_168
  question: Among the cars with more than lowest horsepower, which ones do not have
    more than 3 cylinders? List the car makeid and make name.
  golden_query: SELECT T2.MakeId , T2.Make FROM spider_dev.car_1.CARS_DATA AS T1 JOIN
    spider_dev.car_1.CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE TRY_TO_NUMBER(T1.horsepower)
    > (SELECT min(TRY_TO_NUMBER(horsepower)) FROM spider_dev.car_1.CARS_DATA) AND
    T1.Cylinders <= 3;
  tables:
  - CARS_DATA
  - CAR_NAMES
  comparison_rules:
  - columns:
    - MakeId
    - Make
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_169:
  query_name: spider_169
  question: Among the cars that do not have the minimum horsepower , what are the
    make ids and names of all those with less than 4 cylinders ?
  golden_query: select t2.makeid , t2.make from spider_dev.car_1.cars_data as t1 join
    spider_dev.car_1.car_names as t2 on t1.id = t2.makeid where TRY_TO_NUMBER(t1.horsepower)
    > (select min(TRY_TO_NUMBER(horsepower)) from spider_dev.car_1.cars_data) and
    t1.cylinders < 4;
  tables:
  - car_names
  - cars_data
  comparison_rules:
  - columns:
    - makeid
    - make
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_170:
  query_name: spider_170
  question: What is the maximum miles per gallon of the car with 8 cylinders or produced
    before 1980 ? Display as max_mpg
  golden_query: select MAX(TRY_TO_NUMBER(mpg)) as max_mpg from spider_dev.car_1.cars_data
    where cylinders  =  8 or year  <  1980
  tables:
  - cars_data
  comparison_rules:
  - columns:
    - max_mpg
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_171:
  query_name: spider_171
  question: What is the maximum mpg of the cars that had 8 cylinders or that were
    produced before 1980 ? Display as max_mpg
  golden_query: select MAX(TRY_TO_NUMBER(mpg)) as max_mpg from spider_dev.car_1.cars_data
    where cylinders  =  8 or year  <  1980
  tables:
  - cars_data
  comparison_rules:
  - columns:
    - max_mpg
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_172:
  query_name: spider_172
  question: Which models are lighter than 3500 but not built by car maker 'Ford Motor
    Company'?
  golden_query: "WITH filtered_cars_data AS (\nSELECT *\nFROM spider_dev.car_1.cars_data\n
    WHERE\nweight < 3500\n)\n\nSELECT ml.model\nFROM filtered_cars_data AS fcd\nINNER
    JOIN spider_dev.car_1.car_names AS cn\nON fcd.id = cn.makeid\nINNER JOIN spider_dev.car_1.model_list
    AS ml\nON cn.model = ml.model\nINNER JOIN spider_dev.car_1.car_makers AS cm\n
    ON ml.maker = cm.id\nWHERE\ncm.fullname != 'Ford Motor Company'"
  tables:
  - model_list
  - car_makers
  - car_names
  - cars_data
  comparison_rules:
  - columns:
    - model
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_173:
  query_name: spider_173
  question: What are the different models wthat are lighter than 3500 but were not
    built by car maker 'Ford Motor Company'?
  golden_query: SELECT DISTINCT T1.model FROM spider_dev.car_1.MODEL_LIST AS T1 JOIN
    spider_dev.car_1.CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN spider_dev.car_1.CARS_DATA
    AS T3 ON T2.MakeId  =  T3.Id JOIN spider_dev.car_1.CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id
    WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';
  tables:
  - MODEL_LIST
  - CARS_DATA
  - CAR_MAKERS
  - CAR_NAMES
  comparison_rules:
  - columns:
    - model
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_174:
  query_name: spider_174
  question: What are the name of the countries where there is not a single car maker?
  golden_query: SELECT CountryName FROM spider_dev.car_1.countries EXCEPT SELECT T1.CountryName
    FROM spider_dev.car_1.countries AS T1 JOIN spider_dev.car_1.CAR_MAKERS AS T2 ON
    T1.countryId  =  T2.Country;
  tables:
  - CAR_MAKERS
  - countries
  comparison_rules:
  - columns:
    - CountryName
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_175:
  query_name: spider_175
  question: What are the names of the countries with no car makers?
  golden_query: SELECT CountryName FROM spider_dev.car_1.countries EXCEPT SELECT T1.CountryName
    FROM spider_dev.car_1.countries AS T1 JOIN spider_dev.car_1.CAR_MAKERS AS T2 ON
    T1.countryId  =  T2.Country;
  tables:
  - CAR_MAKERS
  - countries
  comparison_rules:
  - columns:
    - CountryName
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_176:
  query_name: spider_176
  question: Which are the car makers which produce at least 2 models and more than
    3 car makers ? List the id and the maker .
  golden_query: select t1.id ,  t1.maker from spider_dev.car_1.car_makers as t1 join
    spider_dev.car_1.model_list as t2 on t1.id  =  t2.maker group by t1.id ,  t1.maker
    having count(*)  >=  2 intersect select t1.id ,  t1.maker from spider_dev.car_1.car_makers
    as t1 join spider_dev.car_1.model_list as t2 on t1.id  =  t2.maker join spider_dev.car_1.car_names
    as t3 on t2.model  =  t3.model group by t1.id ,  t1.maker having count(*)  >  3;
  tables:
  - car_names
  - model_list
  - car_makers
  comparison_rules:
  - columns:
    - id
    - maker
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_177:
  query_name: spider_177
  question: What are the ids and makers of all car makers that produce at least 2
    models and make more than 3 cars?
  golden_query: SELECT T1.Id ,  T1.Maker FROM spider_dev.car_1.CAR_MAKERS AS T1 JOIN
    spider_dev.car_1.MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id ,  T1.Maker
    HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM spider_dev.car_1.CAR_MAKERS
    AS T1 JOIN spider_dev.car_1.MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN spider_dev.car_1.CAR_NAMES
    AS T3 ON T2.model  =  T3.model GROUP BY T1.Id ,  T1.Maker HAVING count(*)  >  3;
  tables:
  - MODEL_LIST
  - CAR_MAKERS
  - CAR_NAMES
  comparison_rules:
  - columns:
    - Id
    - Maker
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_178:
  query_name: spider_178
  question: What are the id and names of the countries which have more than 3 car
    makers or produce the 'fiat' model?
  golden_query: SELECT T1.countryId ,  T1.CountryName FROM spider_dev.car_1.Countries
    AS T1 JOIN spider_dev.car_1.CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP
    BY T1.countryId ,  T1.CountryName HAVING count(*)  >  3 UNION SELECT T1.countryId
    ,  T1.CountryName FROM spider_dev.car_1.Countries AS T1 JOIN spider_dev.car_1.CAR_MAKERS
    AS T2 ON T1.CountryId  =  T2.Country JOIN spider_dev.car_1.MODEL_LIST AS T3 ON
    T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';
  tables:
  - CAR_MAKERS
  - MODEL_LIST
  - Countries
  comparison_rules:
  - columns:
    - countryId
    - CountryName
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_179:
  query_name: spider_179
  question: What are the ids and names of all countries that either have more than
    3 car makers or produce fiat model ?
  golden_query: select t1.countryid ,  t1.countryname from spider_dev.car_1.countries
    as t1 join spider_dev.car_1.car_makers as t2 on t1.countryid  =  t2.country group
    by t1.countryid ,  t1.countryname having count(*)  >  3 union select t1.countryid
    ,  t1.countryname from spider_dev.car_1.countries as t1 join spider_dev.car_1.car_makers
    as t2 on t1.countryid  =  t2.country join spider_dev.car_1.model_list as t3 on
    t2.id  =  t3.maker where t3.model  =  'fiat';
  tables:
  - model_list
  - countries
  - car_makers
  comparison_rules:
  - columns:
    - countryid
    - countryname
    match: exact
  auto_select_schema: 'false'
  schemas:
  - car_1
spider_180:
  query_name: spider_180
  question: Which country does Airline 'JetBlue Airways' belong to?
  golden_query: SELECT Country FROM spider_dev.flight_2.AIRLINES WHERE Airline  =  'JetBlue
    Airways'
  tables:
  - AIRLINES
  comparison_rules:
  - columns:
    - Country
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_181:
  query_name: spider_181
  question: What country is 'JetBlue Airways' affiliated with?
  golden_query: SELECT Country FROM spider_dev.flight_2.AIRLINES WHERE Airline  =  'JetBlue
    Airways'
  tables:
  - AIRLINES
  comparison_rules:
  - columns:
    - Country
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_182:
  query_name: spider_182
  question: What is the abbreviation of Airline 'JetBlue Airways'?
  golden_query: SELECT Abbreviation FROM spider_dev.flight_2.AIRLINES WHERE Airline  =  'JetBlue
    Airways'
  tables:
  - AIRLINES
  comparison_rules:
  - columns:
    - Abbreviation
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_183:
  query_name: spider_183
  question: Which abbreviation corresponds to 'JetBlue Airways'?
  golden_query: SELECT Abbreviation FROM spider_dev.flight_2.AIRLINES WHERE Airline  =  'Jetblue
    Airways'
  tables:
  - AIRLINES
  comparison_rules:
  - columns:
    - Abbreviation
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_184:
  query_name: spider_184
  question: List all airline names and their abbreviations in 'USA'.
  golden_query: SELECT Airline ,  Abbreviation FROM spider_dev.flight_2.AIRLINES WHERE
    Country  =  'USA'
  tables:
  - AIRLINES
  comparison_rules:
  - columns:
    - Airline
    - Abbreviation
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_185:
  query_name: spider_185
  question: What are the airline names and abbreviations for airlines in the USA?
  golden_query: SELECT Airline ,  Abbreviation FROM spider_dev.flight_2.AIRLINES WHERE
    Country  =  'USA'
  tables:
  - AIRLINES
  comparison_rules:
  - columns:
    - Airline
    - Abbreviation
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_186:
  query_name: spider_186
  question: List the airport code and name in the city of Anthony.
  golden_query: SELECT AirportCode ,  AirportName FROM spider_dev.flight_2.AIRPORTS
    WHERE city  =  'Anthony'
  tables:
  - AIRPORTS
  comparison_rules:
  - columns:
    - AirportCode
    - AirportName
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_187:
  query_name: spider_187
  question: Give the airport code and airport name corresonding to the city Anthony.
  golden_query: SELECT AirportCode ,  AirportName FROM spider_dev.flight_2.AIRPORTS
    WHERE city  =  'Anthony'
  tables:
  - AIRPORTS
  comparison_rules:
  - columns:
    - AirportCode
    - AirportName
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_188:
  query_name: spider_188
  question: How many airlines do we have? Display as num_airlines.
  golden_query: SELECT count(*) as num_airlines FROM spider_dev.flight_2.AIRLINES
  tables:
  - AIRLINES
  comparison_rules:
  - columns:
    - num_airlines
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_189:
  query_name: spider_189
  question: What is the total number of airlines? Display as total_airlines.
  golden_query: SELECT count(*) as total_airlines FROM spider_dev.flight_2.AIRLINES
  tables:
  - AIRLINES
  comparison_rules:
  - columns:
    - total_airlines
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_190:
  query_name: spider_190
  question: How many airports do we have? Display as num_airports.
  golden_query: SELECT count(*) as num_airports FROM spider_dev.flight_2.AIRPORTS
  tables:
  - AIRPORTS
  comparison_rules:
  - columns:
    - num_airports
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_191:
  query_name: spider_191
  question: Return the number of  airports. Display as num_airports.
  golden_query: SELECT count(*) as num_airports FROM spider_dev.flight_2.AIRPORTS
  tables:
  - AIRPORTS
  comparison_rules:
  - columns:
    - num_airports
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_192:
  query_name: spider_192
  question: How many flights do we have? Display as num_flights.
  golden_query: SELECT count(*) as num_flights FROM spider_dev.flight_2.FLIGHTS
  tables:
  - FLIGHTS
  comparison_rules:
  - columns:
    - num_flights
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_193:
  query_name: spider_193
  question: Return the number of flights. Display as num_flights.
  golden_query: SELECT count(*) as num_flights FROM spider_dev.flight_2.FLIGHTS
  tables:
  - FLIGHTS
  comparison_rules:
  - columns:
    - num_flights
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_194:
  query_name: spider_194
  question: Which airline has abbreviation 'UAL'?
  golden_query: SELECT Airline FROM spider_dev.flight_2.AIRLINES WHERE Abbreviation  =  'UAL'
  tables:
  - AIRLINES
  comparison_rules:
  - columns:
    - Airline
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_195:
  query_name: spider_195
  question: Give the airline with abbreviation 'UAL'.
  golden_query: SELECT Airline FROM spider_dev.flight_2.AIRLINES WHERE Abbreviation  =  'UAL'
  tables:
  - AIRLINES
  comparison_rules:
  - columns:
    - Airline
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_196:
  query_name: spider_196
  question: How many airlines are from USA? Display as num_airlines.
  golden_query: SELECT count(*) as num_airlines FROM spider_dev.flight_2.AIRLINES
    WHERE Country  =  'USA'
  tables:
  - AIRLINES
  comparison_rules:
  - columns:
    - num_airlines
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_197:
  query_name: spider_197
  question: Return the number of airlines in the USA. Display as num_airlines.
  golden_query: SELECT count(*) as num_airlines FROM spider_dev.flight_2.AIRLINES
    WHERE Country  =  'USA'
  tables:
  - AIRLINES
  comparison_rules:
  - columns:
    - num_airlines
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_198:
  query_name: spider_198
  question: Which city and country is the 'Alton' airport at?
  golden_query: SELECT City ,  Country FROM spider_dev.flight_2.AIRPORTS WHERE AirportName
    = 'Alton'
  tables:
  - AIRPORTS
  comparison_rules:
  - columns:
    - City
    - Country
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_199:
  query_name: spider_199
  question: Give the city and country for the 'Alton' airport.
  golden_query: SELECT City ,  Country FROM spider_dev.flight_2.AIRPORTS WHERE AirportName='Alton'
  tables:
  - AIRPORTS
  comparison_rules:
  - columns:
    - City
    - Country
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_200:
  query_name: spider_200
  question: What is the airport name for airport 'AKO'?
  golden_query: SELECT AirportName FROM spider_dev.flight_2.AIRPORTS WHERE AirportCode  =  'AKO'
  tables:
  - AIRPORTS
  comparison_rules:
  - columns:
    - AirportName
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_201:
  query_name: spider_201
  question: Return the name of the airport with code 'AKO'.
  golden_query: SELECT AirportName FROM spider_dev.flight_2.AIRPORTS WHERE AirportCode  =  'AKO'
  tables:
  - AIRPORTS
  comparison_rules:
  - columns:
    - AirportName
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_202:
  query_name: spider_202
  question: What are airport names at City 'Aberdeen'?
  golden_query: SELECT AirportName FROM spider_dev.flight_2.AIRPORTS WHERE City =
    'Aberdeen'
  tables:
  - AIRPORTS
  comparison_rules:
  - columns:
    - AirportName
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_203:
  query_name: spider_203
  question: What are the names of airports in Aberdeen?
  golden_query: SELECT AirportName FROM spider_dev.flight_2.AIRPORTS WHERE City =
    'Aberdeen'
  tables:
  - AIRPORTS
  comparison_rules:
  - columns:
    - AirportName
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_204:
  query_name: spider_204
  question: How many flights depart from 'APG'? Display as num_flights.
  golden_query: SELECT count(*) as num_flights FROM spider_dev.flight_2.FLIGHTS WHERE
    SourceAirport  =  'APG'
  tables:
  - FLIGHTS
  comparison_rules:
  - columns:
    - num_flights
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_205:
  query_name: spider_205
  question: Count the number of flights departing from 'APG'.  Display as num_flights.
  golden_query: SELECT count(*) as num_flights FROM spider_dev.flight_2.FLIGHTS WHERE
    SourceAirport  =  'APG'
  tables:
  - FLIGHTS
  comparison_rules:
  - columns:
    - num_flights
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_206:
  query_name: spider_206
  question: How many flights have destination ATO? Display as num_flights.
  golden_query: SELECT count(*) as num_flights FROM spider_dev.flight_2.FLIGHTS WHERE
    DestAirport  =  'ATO'
  tables:
  - FLIGHTS
  comparison_rules:
  - columns:
    - num_flights
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_207:
  query_name: spider_207
  question: Count the number of flights into ATO. Display as num_flights.
  golden_query: SELECT count(*) as num_flights FROM spider_dev.flight_2.FLIGHTS WHERE
    DestAirport  =  'ATO'
  tables:
  - FLIGHTS
  comparison_rules:
  - columns:
    - num_flights
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_208:
  query_name: spider_208
  question: How many flights depart from City Aberdeen? Display as num_flights.
  golden_query: SELECT count(*) as num_flights FROM spider_dev.flight_2.FLIGHTS AS
    T1 JOIN spider_dev.flight_2.AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode
    WHERE T2.City  =  'Aberdeen'
  tables:
  - FLIGHTS
  - AIRPORTS
  comparison_rules:
  - columns:
    - num_flights
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_209:
  query_name: spider_209
  question: Return the number of flights departing from Aberdeen. Display as num_flights.
  golden_query: SELECT count(*) as num_flights FROM spider_dev.flight_2.FLIGHTS AS
    T1 JOIN spider_dev.flight_2.AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode
    WHERE T2.City  =  'Aberdeen'
  tables:
  - FLIGHTS
  - AIRPORTS
  comparison_rules:
  - columns:
    - num_flights
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_210:
  query_name: spider_210
  question: How many flights arriving in Aberdeen city? Display as num_flights.
  golden_query: SELECT count(*) as num_flights FROM spider_dev.flight_2.FLIGHTS AS
    T1 JOIN spider_dev.flight_2.AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode
    WHERE T2.City  =  'Aberdeen'
  tables:
  - FLIGHTS
  - AIRPORTS
  comparison_rules:
  - columns:
    - num_flights
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_211:
  query_name: spider_211
  question: Return the number of flights arriving in Aberdeen. Display as num_flights.
  golden_query: SELECT count(*) as num_flights FROM spider_dev.flight_2.FLIGHTS AS
    T1 JOIN spider_dev.flight_2.AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode
    WHERE T2.City  =  'Aberdeen'
  tables:
  - FLIGHTS
  - AIRPORTS
  comparison_rules:
  - columns:
    - num_flights
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_212:
  query_name: spider_212
  question: How many flights depart from City 'Aberdeen' and have destination City
    'Ashley'? Display as num_flights.
  golden_query: SELECT count(*) as num_flights FROM spider_dev.flight_2.FLIGHTS AS
    T1 JOIN spider_dev.flight_2.AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode
    JOIN spider_dev.flight_2.AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode
    WHERE T2.City  =  'Ashley' AND T3.City  =  'Aberdeen'
  tables:
  - FLIGHTS
  - AIRPORTS
  comparison_rules:
  - columns:
    - num_flights
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_213:
  query_name: spider_213
  question: How many flights fly from Aberdeen to Ashley?  Display as num_flights.
  golden_query: SELECT count(*) as num_flights FROM spider_dev.flight_2.FLIGHTS AS
    T1 JOIN spider_dev.flight_2.AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode
    JOIN spider_dev.flight_2.AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode
    WHERE T2.City  =  'Ashley' AND T3.City  =  'Aberdeen'
  tables:
  - FLIGHTS
  - AIRPORTS
  comparison_rules:
  - columns:
    - num_flights
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_214:
  query_name: spider_214
  question: How many flights does airline 'JetBlue Airways' have? Display as num_flights.
  golden_query: SELECT count(*) as num_flights FROM spider_dev.flight_2.FLIGHTS AS
    T1 JOIN spider_dev.flight_2.AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline
    = 'JetBlue Airways'
  tables:
  - AIRLINES
  - FLIGHTS
  comparison_rules:
  - columns:
    - num_flights
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_215:
  query_name: spider_215
  question: Give the number of Jetblue Airways flights. Display as num_flights.
  golden_query: SELECT count(*) as num_flights FROM spider_dev.flight_2.FLIGHTS AS
    T1 JOIN spider_dev.flight_2.AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline
    = 'JetBlue Airways'
  tables:
  - AIRLINES
  - FLIGHTS
  comparison_rules:
  - columns:
    - num_flights
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_216:
  query_name: spider_216
  question: How many 'United Airlines' flights go to Airport 'ASY'? Display as num_flights.
  golden_query: SELECT count(*) as num_flights FROM spider_dev.flight_2.AIRLINES AS
    T1 JOIN spider_dev.flight_2.FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  'United
    Airlines' AND T2.DestAirport  =  'ASY'
  tables:
  - FLIGHTS
  - AIRLINES
  comparison_rules:
  - columns:
    - num_flights
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_217:
  query_name: spider_217
  question: Count the number of United Airlines flights arriving in ASY Airport. Display
    as num_flights.
  golden_query: SELECT count(*) as num_flights FROM spider_dev.flight_2.AIRLINES AS
    T1 JOIN spider_dev.flight_2.FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  'United
    Airlines' AND T2.DestAirport  =  'ASY'
  tables:
  - FLIGHTS
  - AIRLINES
  comparison_rules:
  - columns:
    - num_flights
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_218:
  query_name: spider_218
  question: How many 'United Airlines' flights depart from Airport 'AHD'? Display
    as num_flights.
  golden_query: SELECT count(*) as num_flights FROM spider_dev.flight_2.AIRLINES AS
    T1 JOIN spider_dev.flight_2.FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  'United
    Airlines' AND T2.SourceAirport  =  'AHD'
  tables:
  - FLIGHTS
  - AIRLINES
  comparison_rules:
  - columns:
    - num_flights
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_219:
  query_name: spider_219
  question: Return the number of United Airlines flights leaving from AHD Airport.Display
    as num_flights.
  golden_query: SELECT count(*) as num_flights FROM spider_dev.flight_2.AIRLINES AS
    T1 JOIN spider_dev.flight_2.FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  'United
    Airlines' AND T2.SourceAirport  =  'AHD'
  tables:
  - FLIGHTS
  - AIRLINES
  comparison_rules:
  - columns:
    - num_flights
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_220:
  query_name: spider_220
  question: How many United Airlines flights go to City 'Aberdeen'? Display as num_flights.
  golden_query: SELECT count(*) as num_flights FROM spider_dev.flight_2.FLIGHTS AS
    T1 JOIN spider_dev.flight_2.AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode
    JOIN spider_dev.flight_2.AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  'Aberdeen'
    AND T3.Airline  =  'United Airlines'
  tables:
  - AIRLINES
  - FLIGHTS
  - AIRPORTS
  comparison_rules:
  - columns:
    - num_flights
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_221:
  query_name: spider_221
  question: Count the number of United Airlines flights that arrive in Aberdeen. Display
    as num_flights.
  golden_query: SELECT count(*) as num_flights FROM spider_dev.flight_2.FLIGHTS AS
    T1 JOIN spider_dev.flight_2.AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode
    JOIN spider_dev.flight_2.AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  'Aberdeen'
    AND T3.Airline  =  'United Airlines'
  tables:
  - AIRLINES
  - FLIGHTS
  - AIRPORTS
  comparison_rules:
  - columns:
    - num_flights
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_222:
  query_name: spider_222
  question: Which city has most number of arriving flights?
  golden_query: SELECT T1.City FROM spider_dev.flight_2.AIRPORTS AS T1 JOIN spider_dev.flight_2.FLIGHTS
    AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*)
    DESC LIMIT 1
  tables:
  - FLIGHTS
  - AIRPORTS
  comparison_rules:
  - columns:
    - City
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_223:
  query_name: spider_223
  question: Which city has the most frequent destination airport?
  golden_query: SELECT T1.City FROM spider_dev.flight_2.AIRPORTS AS T1 JOIN spider_dev.flight_2.FLIGHTS
    AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*)
    DESC LIMIT 1
  tables:
  - FLIGHTS
  - AIRPORTS
  comparison_rules:
  - columns:
    - City
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_224:
  query_name: spider_224
  question: Which city has most number of departing flights?
  golden_query: SELECT T1.City FROM spider_dev.flight_2.AIRPORTS AS T1 JOIN spider_dev.flight_2.FLIGHTS
    AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*)
    DESC LIMIT 1
  tables:
  - FLIGHTS
  - AIRPORTS
  comparison_rules:
  - columns:
    - City
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_225:
  query_name: spider_225
  question: Which city is the most frequent source airport?
  golden_query: SELECT T1.City FROM spider_dev.flight_2.AIRPORTS AS T1 JOIN spider_dev.flight_2.FLIGHTS
    AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*)
    DESC LIMIT 1
  tables:
  - FLIGHTS
  - AIRPORTS
  comparison_rules:
  - columns:
    - City
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_226:
  query_name: spider_226
  question: What is the code of airport that has the highest number of flights? Sort
    by number of flights, airportcode in descending order. Show 1 row.
  golden_query: SELECT airportcode FROM ( SELECT sourceairport AS airportcode, COUNT(*)
    AS total_flights FROM spider_dev.flight_2.flights GROUP BY sourceairport UNION
    ALL SELECT destairport AS airportcode, COUNT(*) AS total_flights FROM spider_dev.flight_2.flights
    GROUP BY destairport ) AS combined_counts GROUP BY airportcode ORDER BY SUM(total_flights)
    DESC, airportcode DESC LIMIT 1
  tables:
  - flights
  comparison_rules:
  - columns:
    - AirportCode
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_227:
  query_name: spider_227
  question: What is the airport code of the airport with the most flights?
  golden_query: SELECT T1.AirportCode FROM spider_dev.flight_2.AIRPORTS AS T1 JOIN
    spider_dev.flight_2.FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport
    GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
  tables:
  - FLIGHTS
  - AIRPORTS
  comparison_rules:
  - columns:
    - AirportCode
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_228:
  query_name: spider_228
  question: What is the code of airport that has fewest number of flights?
  golden_query: "SELECT airportcode\nFROM (\n    SELECT\n        sourceairport AS
    airportcode,\n        COUNT(*) AS total_flights\n    FROM spider_dev.flight_2.flights\n\
    \    GROUP BY\n        sourceairport\n    UNION ALL\n    SELECT\n        destairport
    AS airportcode,\n        COUNT(*) AS total_flights\n    FROM spider_dev.flight_2.flights\n\
    \    GROUP BY\n        destairport\n) AS combined_counts\nGROUP BY\n    airportcode\n
    ORDER BY\n    SUM(total_flights) \nLIMIT 1"
  tables:
  - flights
  comparison_rules:
  - columns:
    - "*"
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_229:
  query_name: spider_229
  question: Give the code of the airport with the least flights. Sort by number of
    flights. Show 1 row.
  golden_query: SELECT T1.AirportCode FROM spider_dev.flight_2.AIRPORTS AS T1 JOIN
    spider_dev.flight_2.FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport
    GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
  tables:
  - FLIGHTS
  - AIRPORTS
  comparison_rules:
  - columns:
    - AirportCode
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_230:
  query_name: spider_230
  question: Which airline has most number of flights? Sort by number of flights. Show
    1 row.
  golden_query: SELECT T1.Airline FROM spider_dev.flight_2.AIRLINES AS T1 JOIN spider_dev.flight_2.FLIGHTS
    AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT
    1
  tables:
  - FLIGHTS
  - AIRLINES
  comparison_rules:
  - columns:
    - Airline
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_231:
  query_name: spider_231
  question: What airline serves the most flights?
  golden_query: SELECT T1.Airline FROM spider_dev.flight_2.AIRLINES AS T1 JOIN spider_dev.flight_2.FLIGHTS
    AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT
    1
  tables:
  - FLIGHTS
  - AIRLINES
  comparison_rules:
  - columns:
    - Airline
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_232:
  query_name: spider_232
  question: Find the abbreviation and country of the airline that has fewest number
    of flights?
  golden_query: SELECT T1.Abbreviation ,  T1.Country FROM spider_dev.flight_2.AIRLINES
    AS T1 JOIN spider_dev.flight_2.FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY
    T1.Abbreviation ,  T1.Country ORDER BY count(*)
  tables:
  - FLIGHTS
  - AIRLINES
  comparison_rules:
  - columns:
    - Abbreviation
    - Country
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_233:
  query_name: spider_233
  question: What is the abbreviation of the airilne has the fewest flights and what
    country is it in? Show 1 row.
  golden_query: SELECT T1.Abbreviation ,  T1.Country FROM spider_dev.flight_2.AIRLINES
    AS T1 JOIN spider_dev.flight_2.FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY
    T1.Abbreviation ,  T1.Country ORDER BY count(*) LIMIT 1
  tables:
  - FLIGHTS
  - AIRLINES
  comparison_rules:
  - columns:
    - Abbreviation
    - Country
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_234:
  query_name: spider_234
  question: What are airlines that have some flight departing from airport 'AHD'?
  golden_query: SELECT T1.Airline FROM spider_dev.flight_2.AIRLINES AS T1 JOIN spider_dev.flight_2.FLIGHTS
    AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'AHD'
  tables:
  - FLIGHTS
  - AIRLINES
  comparison_rules:
  - columns:
    - Airline
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_235:
  query_name: spider_235
  question: Which airlines have a flight with source airport AHD?
  golden_query: SELECT T1.Airline FROM spider_dev.flight_2.AIRLINES AS T1 JOIN spider_dev.flight_2.FLIGHTS
    AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'AHD'
  tables:
  - FLIGHTS
  - AIRLINES
  comparison_rules:
  - columns:
    - Airline
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_236:
  query_name: spider_236
  question: What are airlines that have flights arriving at airport 'AHD'?
  golden_query: SELECT T1.Airline FROM spider_dev.flight_2.AIRLINES AS T1 JOIN spider_dev.flight_2.FLIGHTS
    AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  'AHD'
  tables:
  - FLIGHTS
  - AIRLINES
  comparison_rules:
  - columns:
    - Airline
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_237:
  query_name: spider_237
  question: Which airlines have a flight with destination airport AHD?
  golden_query: SELECT T1.Airline FROM spider_dev.flight_2.AIRLINES AS T1 JOIN spider_dev.flight_2.FLIGHTS
    AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  'AHD'
  tables:
  - FLIGHTS
  - AIRLINES
  comparison_rules:
  - columns:
    - Airline
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_238:
  query_name: spider_238
  question: Find all airlines that have flights from both airports 'APG' and 'CVO'.
  golden_query: SELECT T1.Airline FROM spider_dev.flight_2.AIRLINES AS T1 JOIN spider_dev.flight_2.FLIGHTS
    AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'APG' INTERSECT SELECT
    T1.Airline FROM spider_dev.flight_2.AIRLINES AS T1 JOIN spider_dev.flight_2.FLIGHTS
    AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'CVO'
  tables:
  - FLIGHTS
  - AIRLINES
  comparison_rules:
  - columns:
    - Airline
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_239:
  query_name: spider_239
  question: Which airlines have departing flights from both APG and CVO airports?
  golden_query: SELECT T1.Airline FROM spider_dev.flight_2.AIRLINES AS T1 JOIN spider_dev.flight_2.FLIGHTS
    AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'APG' INTERSECT SELECT
    T1.Airline FROM spider_dev.flight_2.AIRLINES AS T1 JOIN spider_dev.flight_2.FLIGHTS
    AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'CVO'
  tables:
  - FLIGHTS
  - AIRLINES
  comparison_rules:
  - columns:
    - Airline
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_240:
  query_name: spider_240
  question: Find all airlines that have flights from airport 'CVO' but not from 'APG'.
  golden_query: SELECT T1.Airline FROM spider_dev.flight_2.AIRLINES AS T1 JOIN spider_dev.flight_2.FLIGHTS
    AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'CVO' EXCEPT SELECT
    T1.Airline FROM spider_dev.flight_2.AIRLINES AS T1 JOIN spider_dev.flight_2.FLIGHTS
    AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'APG'
  tables:
  - FLIGHTS
  - AIRLINES
  comparison_rules:
  - columns:
    - Airline
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_241:
  query_name: spider_241
  question: Which airlines have departures from CVO but not from APG airports?
  golden_query: SELECT T1.Airline FROM spider_dev.flight_2.AIRLINES AS T1 JOIN spider_dev.flight_2.FLIGHTS
    AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'CVO' EXCEPT SELECT
    T1.Airline FROM spider_dev.flight_2.AIRLINES AS T1 JOIN spider_dev.flight_2.FLIGHTS
    AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'APG'
  tables:
  - FLIGHTS
  - AIRLINES
  comparison_rules:
  - columns:
    - Airline
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_242:
  query_name: spider_242
  question: Find all airlines that have at least 10 flights. Display airline.
  golden_query: SELECT T1.Airline FROM spider_dev.flight_2.AIRLINES AS T1 JOIN spider_dev.flight_2.FLIGHTS
    AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
  tables:
  - FLIGHTS
  - AIRLINES
  comparison_rules:
  - columns:
    - Airline
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_243:
  query_name: spider_243
  question: Which airlines have at least 10 flights?. Display airline.
  golden_query: SELECT T1.Airline FROM spider_dev.flight_2.AIRLINES AS T1 JOIN spider_dev.flight_2.FLIGHTS
    AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
  tables:
  - FLIGHTS
  - AIRLINES
  comparison_rules:
  - columns:
    - Airline
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_244:
  query_name: spider_244
  question: Find all airlines that have fewer than 200 flights. Display airline.
  golden_query: SELECT T1.Airline FROM spider_dev.flight_2.AIRLINES AS T1 JOIN spider_dev.flight_2.FLIGHTS
    AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200
  tables:
  - FLIGHTS
  - AIRLINES
  comparison_rules:
  - columns:
    - Airline
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_245:
  query_name: spider_245
  question: Which airlines have less than 200 flights?. Display airline.
  golden_query: SELECT T1.Airline FROM spider_dev.flight_2.AIRLINES AS T1 JOIN spider_dev.flight_2.FLIGHTS
    AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200
  tables:
  - FLIGHTS
  - AIRLINES
  comparison_rules:
  - columns:
    - Airline
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_246:
  query_name: spider_246
  question: What are flight numbers of Airline 'United Airlines'?
  golden_query: "WITH filtered_airlines AS (\n    SELECT uid\n    FROM spider_dev.flight_2.airlines\n\
    \    WHERE\n        airline ILIKE 'United Airlines'\n)\n\nSELECT f.flightno\n
    FROM spider_dev.flight_2.flights AS f\nINNER JOIN filtered_airlines AS fa\n  \
    \  ON f.airline = fa.uid"
  tables:
  - flights
  - airlines
  comparison_rules:
  - columns:
    - FlightNo
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_247:
  query_name: spider_247
  question: Which flight numbers correspond to United Airlines flights?
  golden_query: SELECT T1.FlightNo FROM spider_dev.flight_2.FLIGHTS AS T1 JOIN spider_dev.flight_2.AIRLINES
    AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  'United Airlines'
  tables:
  - AIRLINES
  - FLIGHTS
  comparison_rules:
  - columns:
    - FlightNo
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_248:
  query_name: spider_248
  question: What are flight numbers of flights departing from Airport 'APG'?
  golden_query: SELECT FlightNo FROM spider_dev.flight_2.FLIGHTS WHERE SourceAirport  =  'APG'
  tables:
  - FLIGHTS
  comparison_rules:
  - columns:
    - FlightNo
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_249:
  query_name: spider_249
  question: Give the flight numbers of flights leaving from APG.
  golden_query: SELECT FlightNo FROM spider_dev.flight_2.FLIGHTS WHERE SourceAirport  =  'APG'
  tables:
  - FLIGHTS
  comparison_rules:
  - columns:
    - FlightNo
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_250:
  query_name: spider_250
  question: What are flight numbers of flights arriving at Airport 'APG'?
  golden_query: SELECT FlightNo FROM spider_dev.flight_2.FLIGHTS WHERE DestAirport  =  'APG'
  tables:
  - FLIGHTS
  comparison_rules:
  - columns:
    - FlightNo
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_251:
  query_name: spider_251
  question: Give the flight numbers of flights landing at APG.
  golden_query: SELECT FlightNo FROM spider_dev.flight_2.FLIGHTS WHERE DestAirport  =  'APG'
  tables:
  - FLIGHTS
  comparison_rules:
  - columns:
    - FlightNo
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_252:
  query_name: spider_252
  question: What are flight numbers of flights departing from City 'Aberdeen '?
  golden_query: SELECT T1.FlightNo FROM spider_dev.flight_2.FLIGHTS AS T1 JOIN spider_dev.flight_2.AIRPORTS
    AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  'Aberdeen'
  tables:
  - FLIGHTS
  - AIRPORTS
  comparison_rules:
  - columns:
    - FlightNo
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_253:
  query_name: spider_253
  question: Give the flight numbers of flights leaving from Aberdeen.
  golden_query: SELECT T1.FlightNo FROM spider_dev.flight_2.FLIGHTS AS T1 JOIN spider_dev.flight_2.AIRPORTS
    AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  'Aberdeen'
  tables:
  - FLIGHTS
  - AIRPORTS
  comparison_rules:
  - columns:
    - FlightNo
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_254:
  query_name: spider_254
  question: What are flight numbers of flights arriving at City 'Aberdeen'?
  golden_query: SELECT T1.FlightNo FROM spider_dev.flight_2.FLIGHTS AS T1 JOIN spider_dev.flight_2.AIRPORTS
    AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  'Aberdeen'
  tables:
  - FLIGHTS
  - AIRPORTS
  comparison_rules:
  - columns:
    - FlightNo
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_255:
  query_name: spider_255
  question: Give the flight numbers of flights arriving in Aberdeen.
  golden_query: SELECT T1.FlightNo FROM spider_dev.flight_2.FLIGHTS AS T1 JOIN spider_dev.flight_2.AIRPORTS
    AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  'Aberdeen'
  tables:
  - FLIGHTS
  - AIRPORTS
  comparison_rules:
  - columns:
    - FlightNo
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_256:
  query_name: spider_256
  question: Find the number of flights landing in the city of Aberdeen or Abilene.
    Display as num_flights.
  golden_query: SELECT count(*) as num_flights FROM spider_dev.flight_2.Flights AS
    T1 JOIN spider_dev.flight_2.Airports AS T2 ON T1.DestAirport  =  T2.AirportCode
    WHERE T2.city  =  'Aberdeen' OR T2.city  =  'Abilene'
  tables:
  - Flights
  - Airports
  comparison_rules:
  - columns:
    - num_flights
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_257:
  query_name: spider_257
  question: How many flights land in Aberdeen or Abilene? Display as num_flights.
  golden_query: SELECT count(*) as num_flights FROM spider_dev.flight_2.Flights AS
    T1 JOIN spider_dev.flight_2.Airports AS T2 ON T1.DestAirport  =  T2.AirportCode
    WHERE T2.city  =  'Aberdeen' OR T2.city  =  'Abilene'
  tables:
  - Flights
  - Airports
  comparison_rules:
  - columns:
    - num_flights
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_258:
  query_name: spider_258
  question: Find the name of airports which do not have any flight in and out.
  golden_query: SELECT AirportName FROM spider_dev.flight_2.Airports WHERE AirportCode
    NOT IN (SELECT SourceAirport FROM spider_dev.flight_2.Flights UNION SELECT DestAirport
    FROM spider_dev.flight_2.Flights)
  tables:
  - Flights
  - Airports
  comparison_rules:
  - columns:
    - AirportName
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_259:
  query_name: spider_259
  question: Which airports do not have departing or arriving flights? Display airport
    name.
  golden_query: SELECT AirportName FROM spider_dev.flight_2.Airports WHERE AirportCode
    NOT IN (SELECT SourceAirport FROM spider_dev.flight_2.Flights UNION SELECT DestAirport
    FROM spider_dev.flight_2.Flights)
  tables:
  - Flights
  - Airports
  comparison_rules:
  - columns:
    - AirportName
    match: exact
  auto_select_schema: 'false'
  schemas:
  - flight_2
spider_260:
  query_name: spider_260
  question: How many employees are there? Display as num_emp.
  golden_query: SELECT count(*) as num_emp FROM spider_dev.employee_hire_evaluation.employee
  tables:
  - employee
  comparison_rules:
  - columns:
    - num_emp
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_261:
  query_name: spider_261
  question: Count the number of employees.  Display as num_emp.
  golden_query: SELECT count(*) as num_emp FROM spider_dev.employee_hire_evaluation.employee
  tables:
  - employee
  comparison_rules:
  - columns:
    - num_emp
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_262:
  query_name: spider_262
  question: Sort employee names by their age in ascending order.
  golden_query: SELECT name FROM spider_dev.employee_hire_evaluation.employee ORDER
    BY age
  tables:
  - employee
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_263:
  query_name: spider_263
  question: List the names of employees and sort in ascending order of age.
  golden_query: SELECT name FROM spider_dev.employee_hire_evaluation.employee ORDER
    BY age
  tables:
  - employee
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_264:
  query_name: spider_264
  question: What is the number of employees from each city? Display as num_emp.
  golden_query: SELECT count(*) as num_emp,  city FROM spider_dev.employee_hire_evaluation.employee
    GROUP BY city
  tables:
  - employee
  comparison_rules:
  - columns:
    - num_emp
    - city
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_265:
  query_name: spider_265
  question: Count the number of employees for each city. Display as num_emp.
  golden_query: SELECT count(*) as num_emp ,  city FROM spider_dev.employee_hire_evaluation.employee
    GROUP BY city
  tables:
  - employee
  comparison_rules:
  - columns:
    - num_emp
    - city
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_266:
  query_name: spider_266
  question: Which cities do more than one employee under age 30 come from?
  golden_query: SELECT city FROM spider_dev.employee_hire_evaluation.employee WHERE
    age  <  30 GROUP BY city HAVING count(*)  >  1
  tables:
  - employee
  comparison_rules:
  - columns:
    - city
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_267:
  query_name: spider_267
  question: Find the cities that have more than one employee under age 30.
  golden_query: SELECT city FROM spider_dev.employee_hire_evaluation.employee WHERE
    age  <  30 GROUP BY city HAVING count(*)  >  1
  tables:
  - employee
  comparison_rules:
  - columns:
    - city
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_268:
  query_name: spider_268
  question: Find the number of shops in each location. Display as num_shops.
  golden_query: SELECT count(*) as num_shops,  LOCATION FROM spider_dev.employee_hire_evaluation.shop
    GROUP BY LOCATION
  tables:
  - shop
  comparison_rules:
  - columns:
    - num_shops
    - LOCATION
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_269:
  query_name: spider_269
  question: How many shops are there in each location? Display as num_shops.
  golden_query: SELECT count(*) as num_shops,  LOCATION FROM spider_dev.employee_hire_evaluation.shop
    GROUP BY LOCATION
  tables:
  - shop
  comparison_rules:
  - columns:
    - num_shops
    - LOCATION
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_270:
  query_name: spider_270
  question: Find the manager name and district of the shop whose number of products
    is the largest.
  golden_query: SELECT manager_name ,  district FROM spider_dev.employee_hire_evaluation.shop
    ORDER BY number_products DESC LIMIT 1
  tables:
  - shop
  comparison_rules:
  - columns:
    - manager_name
    - district
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_271:
  query_name: spider_271
  question: What are the manager name and district of the shop that sells the largest
    number of products?
  golden_query: SELECT manager_name ,  district FROM spider_dev.employee_hire_evaluation.shop
    ORDER BY number_products DESC LIMIT 1
  tables:
  - shop
  comparison_rules:
  - columns:
    - manager_name
    - district
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_272:
  query_name: spider_272
  question: find the minimum and maximum number of products of all stores. Display
    as min_num_products, max_num_products.
  golden_query: SELECT min(Number_products) as min_num_products,  max(Number_products)
    as max_num_products FROM spider_dev.employee_hire_evaluation.shop
  tables:
  - shop
  comparison_rules:
  - columns:
    - min_num_products
    - max_num_products
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_273:
  query_name: spider_273
  question: What are the minimum and maximum number of products across all the shops?
    Display as min_num_products, max_num_products.
  golden_query: SELECT min(Number_products) as min_num_products,  max(Number_products)
    as max_num_products FROM spider_dev.employee_hire_evaluation.shop
  tables:
  - shop
  comparison_rules:
  - columns:
    - min_num_products
    - max_num_products
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_274:
  query_name: spider_274
  question: Return the name, location and district of all shops in descending order
    of number of products.
  golden_query: SELECT name ,  LOCATION ,  district FROM spider_dev.employee_hire_evaluation.shop
    ORDER BY number_products DESC
  tables:
  - shop
  comparison_rules:
  - columns:
    - name
    - LOCATION
    - district
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_275:
  query_name: spider_275
  question: Sort all the shops by number products in descending order, and return
    the name, location and district of each shop.
  golden_query: SELECT name ,  LOCATION ,  district FROM spider_dev.employee_hire_evaluation.shop
    ORDER BY number_products DESC
  tables:
  - shop
  comparison_rules:
  - columns:
    - name
    - LOCATION
    - district
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_276:
  query_name: spider_276
  question: Find the names of stores whose number products is more than the average
    number of products.
  golden_query: SELECT name FROM spider_dev.employee_hire_evaluation.shop WHERE number_products  >  (SELECT
    avg(number_products) FROM spider_dev.employee_hire_evaluation.shop)
  tables:
  - shop
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_277:
  query_name: spider_277
  question: Which shops' number products is above the average? Give me the shop names.
  golden_query: SELECT name FROM spider_dev.employee_hire_evaluation.shop WHERE number_products  >  (SELECT
    avg(number_products) FROM spider_dev.employee_hire_evaluation.shop)
  tables:
  - shop
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_278:
  query_name: spider_278
  question: find the name of employee who was awarded the most times in the evaluation.
  golden_query: SELECT t1.name FROM spider_dev.employee_hire_evaluation.employee AS
    t1 JOIN spider_dev.employee_hire_evaluation.evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID
    GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1
  tables:
  - employee
  - evaluation
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_279:
  query_name: spider_279
  question: Which employee received the most awards in evaluations? Give me the employee
    name.
  golden_query: SELECT t1.name FROM spider_dev.employee_hire_evaluation.employee AS
    t1 JOIN spider_dev.employee_hire_evaluation.evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID
    GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1
  tables:
  - employee
  - evaluation
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_280:
  query_name: spider_280
  question: Find the name of the employee who got the highest one time bonus.
  golden_query: SELECT t1.name FROM spider_dev.employee_hire_evaluation.employee AS
    t1 JOIN spider_dev.employee_hire_evaluation.evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID
    ORDER BY t2.bonus DESC LIMIT 1
  tables:
  - employee
  - evaluation
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_281:
  query_name: spider_281
  question: Which employee received the biggest bonus? Give me the employee name.
  golden_query: SELECT t1.name FROM spider_dev.employee_hire_evaluation.employee AS
    t1 JOIN spider_dev.employee_hire_evaluation.evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID
    ORDER BY t2.bonus DESC LIMIT 1
  tables:
  - employee
  - evaluation
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_282:
  query_name: spider_282
  question: Find the names of employees who never won any award in the evaluation.
  golden_query: SELECT name FROM spider_dev.employee_hire_evaluation.employee WHERE
    Employee_ID NOT IN (SELECT Employee_ID FROM spider_dev.employee_hire_evaluation.evaluation)
  tables:
  - employee
  - evaluation
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_283:
  query_name: spider_283
  question: What are the names of the employees who never received any evaluation?
  golden_query: SELECT name FROM spider_dev.employee_hire_evaluation.employee WHERE
    Employee_ID NOT IN (SELECT Employee_ID FROM spider_dev.employee_hire_evaluation.evaluation)
  tables:
  - employee
  - evaluation
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_284:
  query_name: spider_284
  question: What is the name of the shop that is hiring the largest number of employees?
  golden_query: SELECT t2.name FROM spider_dev.employee_hire_evaluation.hiring AS
    t1 JOIN spider_dev.employee_hire_evaluation.shop AS t2 ON t1.shop_id  =  t2.shop_id
    GROUP BY t2.name ORDER BY count(*) DESC LIMIT 1
  tables:
  - hiring
  - shop
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_285:
  query_name: spider_285
  question: Which shop has the most employees? Give me the shop name.
  golden_query: SELECT t2.name FROM spider_dev.employee_hire_evaluation.hiring AS
    t1 JOIN spider_dev.employee_hire_evaluation.shop AS t2 ON t1.shop_id  =  t2.shop_id
    GROUP BY t2.name ORDER BY count(*) DESC LIMIT 1
  tables:
  - hiring
  - shop
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_286:
  query_name: spider_286
  question: Find the name of the shops that do not hire any employee.
  golden_query: SELECT name FROM spider_dev.employee_hire_evaluation.shop WHERE shop_id
    NOT IN (SELECT shop_id FROM spider_dev.employee_hire_evaluation.hiring)
  tables:
  - hiring
  - shop
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_287:
  query_name: spider_287
  question: Which shops run with no employees? Find the shop names
  golden_query: SELECT name FROM spider_dev.employee_hire_evaluation.shop WHERE shop_id
    NOT IN (SELECT shop_id FROM spider_dev.employee_hire_evaluation.hiring)
  tables:
  - hiring
  - shop
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_288:
  query_name: spider_288
  question: Find the number of employees hired in each shop; show the shop name as
    well. Display as num_emp.
  golden_query: SELECT count(*) as num_emp,  t2.name FROM spider_dev.employee_hire_evaluation.hiring
    AS t1 JOIN spider_dev.employee_hire_evaluation.shop AS t2 ON t1.shop_id  =  t2.shop_id
    GROUP BY t2.name
  tables:
  - hiring
  - shop
  comparison_rules:
  - columns:
    - num_emp
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_289:
  query_name: spider_289
  question: For each shop, return the number of employees working there and the name
    of the shop. Display as num_emp.
  golden_query: SELECT count(*) as num_emp,  t2.name FROM spider_dev.employee_hire_evaluation.hiring
    AS t1 JOIN spider_dev.employee_hire_evaluation.shop AS t2 ON t1.shop_id  =  t2.shop_id
    GROUP BY t2.name
  tables:
  - hiring
  - shop
  comparison_rules:
  - columns:
    - num_emp
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_290:
  query_name: spider_290
  question: What is total bonus given in all evaluations? Display as total_bonus.
  golden_query: SELECT sum(bonus) as total_bonus FROM spider_dev.employee_hire_evaluation.evaluation
  tables:
  - evaluation
  comparison_rules:
  - columns:
    - total_bonus
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_291:
  query_name: spider_291
  question: Find the total amount of bonus given in all the evaluations.Display as
    total_bonus.
  golden_query: SELECT sum(bonus) as total_bonus FROM spider_dev.employee_hire_evaluation.evaluation
  tables:
  - evaluation
  comparison_rules:
  - columns:
    - total_bonus
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_292:
  query_name: spider_292
  question: Give me all the information about hiring.
  golden_query: SELECT * FROM spider_dev.employee_hire_evaluation.hiring
  tables:
  - hiring
  comparison_rules:
  - columns:
    - '*'
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_293:
  query_name: spider_293
  question: What is all the information about hiring?
  golden_query: SELECT * FROM spider_dev.employee_hire_evaluation.hiring
  tables:
  - hiring
  comparison_rules:
  - columns:
    - '*'
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_294:
  query_name: spider_294
  question: Which district has both stores with less than 3000 products and stores
    with more than 10000 products?
  golden_query: SELECT district FROM spider_dev.employee_hire_evaluation.shop WHERE
    Number_products  <  3000 INTERSECT SELECT district FROM spider_dev.employee_hire_evaluation.shop
    WHERE Number_products  >  10000
  tables:
  - shop
  comparison_rules:
  - columns:
    - district
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_295:
  query_name: spider_295
  question: Find the districts in which there are both shops selling less than 3000
    products and shops selling more than 10000 products.
  golden_query: SELECT district FROM spider_dev.employee_hire_evaluation.shop WHERE
    Number_products  <  3000 INTERSECT SELECT district FROM spider_dev.employee_hire_evaluation.shop
    WHERE Number_products  >  10000
  tables:
  - shop
  comparison_rules:
  - columns:
    - district
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_296:
  query_name: spider_296
  question: How many different store locations are there? Display as num_locations.
  golden_query: SELECT count(DISTINCT LOCATION) as num_locations FROM spider_dev.employee_hire_evaluation.shop
  tables:
  - shop
  comparison_rules:
  - columns:
    - num_locations
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_297:
  query_name: spider_297
  question: Count the number of distinct store locations.Display as num_locations.
  golden_query: SELECT count(DISTINCT LOCATION) as num_locations FROM spider_dev.employee_hire_evaluation.shop
  tables:
  - shop
  comparison_rules:
  - columns:
    - num_locations
    match: exact
  auto_select_schema: 'false'
  schemas:
  - employee_hire_evaluation
spider_298:
  query_name: spider_298
  question: How many documents do we have? Display as num_docs.
  golden_query: SELECT count(*) as num_docs FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Documents
  tables:
  - Documents
  comparison_rules:
  - columns:
    - num_docs
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_299:
  query_name: spider_299
  question: Count the number of documents.Display as num_docs.
  golden_query: SELECT count(*) as num_docs FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Documents
  tables:
  - Documents
  comparison_rules:
  - columns:
    - num_docs
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_300:
  query_name: spider_300
  question: List document IDs, document names, and document descriptions for all documents.
  golden_query: SELECT document_id ,  document_name ,  document_description FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Documents
  tables:
  - Documents
  comparison_rules:
  - columns:
    - document_id
    - document_name
    - document_description
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_301:
  query_name: spider_301
  question: What are the ids, names, and descriptions for all documents?
  golden_query: SELECT document_id ,  document_name ,  document_description FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Documents
  tables:
  - Documents
  comparison_rules:
  - columns:
    - document_id
    - document_name
    - document_description
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_302:
  query_name: spider_302
  question: What is the document name and template id for document with description
    with the letter 'w' in it?
  golden_query: SELECT document_name ,  template_id FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Documents
    WHERE Document_Description LIKE '%w%'
  tables:
  - Documents
  comparison_rules:
  - columns:
    - document_name
    - template_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_303:
  query_name: spider_303
  question: Return the names and template ids for documents that contain the letter
    w in their description.
  golden_query: SELECT document_name ,  template_id FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Documents
    WHERE Document_Description LIKE '%w%'
  tables:
  - Documents
  comparison_rules:
  - columns:
    - document_name
    - template_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_304:
  query_name: spider_304
  question: What is the document id, template id and description for document named
    'Robbin CV'?
  golden_query: SELECT document_id ,  template_id ,  Document_Description FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Documents
    WHERE document_name  =  'Robbin CV'
  tables:
  - Documents
  comparison_rules:
  - columns:
    - document_id
    - template_id
    - Document_Description
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_305:
  query_name: spider_305
  question: Return the document id, template id, and description for the document
    with the name Robbin CV.
  golden_query: SELECT document_id ,  template_id ,  Document_Description FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Documents
    WHERE document_name  =  'Robbin CV'
  tables:
  - Documents
  comparison_rules:
  - columns:
    - document_id
    - template_id
    - Document_Description
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_306:
  query_name: spider_306
  question: How many different templates do all document use? Display as num_templates.
  golden_query: SELECT count(DISTINCT template_id) as num_templates FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Documents
  tables:
  - Documents
  comparison_rules:
  - columns:
    - num_templates
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_307:
  query_name: spider_307
  question: Count the number of different templates used for documents.Display as
    num_templates.
  golden_query: SELECT count(DISTINCT template_id) as num_templates FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Documents
  tables:
  - Documents
  comparison_rules:
  - columns:
    - num_templates
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_308:
  query_name: spider_308
  question: How many documents are using the template with type code 'PPT'? Display
    as num_docs.
  golden_query: SELECT count(*) as num_docs FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Documents
    AS T1 JOIN spider_dev.CRE_DOC_TEMPLATE_MGT.Templates AS T2 ON T1.Template_ID  =  T2.Template_ID
    WHERE T2.Template_Type_Code  =  'PPT'
  tables:
  - Templates
  - Documents
  comparison_rules:
  - columns:
    - num_docs
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_309:
  query_name: spider_309
  question: Count the number of documents that use template type 'PPT'. Display as
    num_docs.
  golden_query: SELECT count(*) as num_docs FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Documents
    AS T1 JOIN spider_dev.CRE_DOC_TEMPLATE_MGT.Templates AS T2 ON T1.Template_ID  =  T2.Template_ID
    WHERE T2.Template_Type_Code  =  'PPT'
  tables:
  - Templates
  - Documents
  comparison_rules:
  - columns:
    - num_docs
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_310:
  query_name: spider_310
  question: Show all template ids in templates and number of documents using each
    template.
  golden_query: "WITH document_counts AS (\nSELECT\ntemplate_id,\nCOUNT(*) AS num_documents\n
    FROM spider_dev.CRE_DOC_TEMPLATE_MGT.documents\nGROUP BY\ntemplate_id\n)\n\nSELECT\n
    t.template_id,\nCOALESCE(dc.num_documents, 0) AS num_documents\nFROM spider_dev.CRE_DOC_TEMPLATE_MGT.templates
    AS t\nLEFT JOIN document_counts AS dc\nON t.template_id = dc.template_id"
  tables: []
  comparison_rules:
  - columns:
    - template_id
    - num_documents
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_311:
  query_name: spider_311
  question: What are all different template ids used for documents, and how many times
    were each of them used? Display as num_documents
  golden_query: SELECT template_id ,  count(*) as num_documents FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Documents
    GROUP BY template_id
  tables:
  - Documents
  comparison_rules:
  - columns:
    - template_id
    - num_documents
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_312:
  query_name: spider_312
  question: What is the id and type code for the template used by the most documents?
    Display 1 row.
  golden_query: SELECT T1.template_id ,  T2.Template_Type_Code FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Documents
    AS T1 JOIN spider_dev.CRE_DOC_TEMPLATE_MGT.Templates AS T2 ON T1.template_id  =  T2.template_id
    GROUP BY T1.template_id ,  T2.Template_Type_Code ORDER BY count(*) DESC LIMIT
    1
  tables:
  - Templates
  - Documents
  comparison_rules:
  - columns:
    - template_id
    - Template_Type_Code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_313:
  query_name: spider_313
  question: Return the unique id and type code of the template that is used for the
    greatest number of documents. Sort by number of documents in descending order.
    Show 1 row.
  golden_query: SELECT T1.template_id ,  T2.Template_Type_Code FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Documents
    AS T1 JOIN spider_dev.CRE_DOC_TEMPLATE_MGT.Templates AS T2 ON T1.template_id  =  T2.template_id
    GROUP BY T1.template_id ,  T2.Template_Type_Code ORDER BY count(*) DESC LIMIT
    1
  tables:
  - Templates
  - Documents
  comparison_rules:
  - columns:
    - template_id
    - Template_Type_Code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_314:
  query_name: spider_314
  question: Show ids for all templates that are used by more than one document.
  golden_query: SELECT template_id FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Documents
    GROUP BY template_id HAVING count(*)  >  1
  tables:
  - Documents
  comparison_rules:
  - columns:
    - template_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_315:
  query_name: spider_315
  question: What are the template ids of any templates used in more than a single
    document?
  golden_query: SELECT template_id FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Documents
    GROUP BY template_id HAVING count(*)  >  1
  tables:
  - Documents
  comparison_rules:
  - columns:
    - template_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_316:
  query_name: spider_316
  question: Show ids for all templates not used by any document.
  golden_query: SELECT template_id FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates
    EXCEPT SELECT template_id FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Documents
  tables:
  - Templates
  - Documents
  comparison_rules:
  - columns:
    - template_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_317:
  query_name: spider_317
  question: What are the ids for templates that are not used in any documents?
  golden_query: SELECT template_id FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates
    EXCEPT SELECT template_id FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Documents
  tables:
  - Templates
  - Documents
  comparison_rules:
  - columns:
    - template_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_318:
  query_name: spider_318
  question: How many records are there in templates table? Display as num_rec.
  golden_query: SELECT count(*) as num_rec FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates
  tables:
  - Templates
  comparison_rules:
  - columns:
    - num_rec
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_319:
  query_name: spider_319
  question: Count the number of template id.Display as num_rec.
  golden_query: SELECT count(*) as num_rec FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates
  tables:
  - Templates
  comparison_rules:
  - columns:
    - num_rec
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_320:
  query_name: spider_320
  question: Show template ids, version numbers, and template type codes for all templates.
  golden_query: SELECT template_id ,  version_number ,  template_type_code FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates
  tables:
  - Templates
  comparison_rules:
  - columns:
    - template_id
    - version_number
    - template_type_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_321:
  query_name: spider_321
  question: What are the ids, version numbers, and type codes for each template?
  golden_query: SELECT template_id ,  version_number ,  template_type_code FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates
  tables:
  - Templates
  comparison_rules:
  - columns:
    - template_id
    - version_number
    - template_type_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_322:
  query_name: spider_322
  question: Show all distinct template type codes for all templates.
  golden_query: SELECT DISTINCT template_type_code FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates
  tables:
  - Templates
  comparison_rules:
  - columns:
    - template_type_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_323:
  query_name: spider_323
  question: What are the different template type codes?
  golden_query: SELECT DISTINCT template_type_code FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates
  tables:
  - Templates
  comparison_rules:
  - columns:
    - template_type_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_324:
  query_name: spider_324
  question: What are the ids of templates with template type code PP or PPT?
  golden_query: SELECT template_id FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates
    WHERE template_type_code  =  'PP' OR template_type_code  =  'PPT'
  tables:
  - Templates
  comparison_rules:
  - columns:
    - template_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_325:
  query_name: spider_325
  question: Return the ids of templates that have the code PP or PPT.
  golden_query: SELECT template_id FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates
    WHERE template_type_code  =  'PP' OR template_type_code  =  'PPT'
  tables:
  - Templates
  comparison_rules:
  - columns:
    - template_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_326:
  query_name: spider_326
  question: How many templates have template type code CV? Display as num_temp.
  golden_query: SELECT count(*) as num_temp FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates
    WHERE template_type_code  =  'CV'
  tables:
  - Templates
  comparison_rules:
  - columns:
    - num_temp
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_327:
  query_name: spider_327
  question: Count the number of templates of the type CV.Display as num_temp.
  golden_query: SELECT count(*) as num_temp FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates
    WHERE template_type_code  =  'CV'
  tables:
  - Templates
  comparison_rules:
  - columns:
    - num_temp
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_328:
  query_name: spider_328
  question: What is the version number and template type code for the template with
    version number later than 5?
  golden_query: SELECT version_number ,  template_type_code FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates
    WHERE version_number  >  5
  tables:
  - Templates
  comparison_rules:
  - columns:
    - version_number
    - template_type_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_329:
  query_name: spider_329
  question: Return the version numbers and template type codes of templates with a
    version number greater than 5.
  golden_query: SELECT version_number ,  template_type_code FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates
    WHERE version_number  >  5
  tables:
  - Templates
  comparison_rules:
  - columns:
    - version_number
    - template_type_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_330:
  query_name: spider_330
  question: Show all template type codes and number of templates for each. Display
    as num_temp.
  golden_query: SELECT template_type_code ,  count(*) as num_temp FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates
    GROUP BY template_type_code
  tables:
  - Templates
  comparison_rules:
  - columns:
    - template_type_code
    - num_temp
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_331:
  query_name: spider_331
  question: What are the different template type codes, and how many templates correspond
    to each? Display as num_temp.
  golden_query: SELECT template_type_code ,  count(*) as num_temp FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates
    GROUP BY template_type_code
  tables:
  - Templates
  comparison_rules:
  - columns:
    - template_type_code
    - num_temp
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_332:
  query_name: spider_332
  question: Which template type code has most number of templates?
  golden_query: SELECT template_type_code, COUNT(template_id) AS template_count FROM spider_dev.cre_doc_template_mgt.templates GROUP BY template_type_code ORDER BY template_count DESC, template_type_code ASC LIMIT 1
  tables:
  - Templates
  comparison_rules:
  - columns:
    - template_type_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_333:
  query_name: spider_333
  question: Return the type code of the template type that the most templates belong
    to.
  golden_query: SELECT template_type_code FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates
    GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
  tables:
  - Templates
  comparison_rules:
  - columns:
    - template_type_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_334:
  query_name: spider_334
  question: Show all template type codes with less than three templates.
  golden_query: SELECT template_type_code FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates
    GROUP BY template_type_code HAVING count(*)  <  3
  tables:
  - Templates
  comparison_rules:
  - columns:
    - template_type_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_335:
  query_name: spider_335
  question: What are the codes of template types that have fewer than 3 templates?
  golden_query: SELECT template_type_code FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates
    GROUP BY template_type_code HAVING count(*)  <  3
  tables:
  - Templates
  comparison_rules:
  - columns:
    - template_type_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_336:
  query_name: spider_336
  question: For all template type code, what is the smallest version number? Display
    as min_version_number
  golden_query: SELECT template_type_code, min(Version_Number) as min_version_number
    FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates group by template_type_code
  tables:
  - Templates
  comparison_rules:
  - columns:
    - template_type_code
    - min_version_number
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_337:
  query_name: spider_337
  question: Return the lowest version number, along with its corresponding template
    type code. Display as min_ver_number.
  golden_query: SELECT min(Version_Number) as min_ver_number,  template_type_code
    FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates group by template_type_code
  tables:
  - Templates
  comparison_rules:
  - columns:
    - min_ver_number
    - template_type_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_338:
  query_name: spider_338
  question: What is the template type code of the template used by document with the
    name 'Data base'?
  golden_query: SELECT T1.template_type_code FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates
    AS T1 JOIN spider_dev.CRE_DOC_TEMPLATE_MGT.Documents AS T2 ON T1.template_id  =  T2.template_id
    WHERE T2.document_name  =  'Data base'
  tables:
  - Templates
  - Documents
  comparison_rules:
  - columns:
    - template_type_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_339:
  query_name: spider_339
  question: Return the template type code of the template that is used by a document
    named Data base.
  golden_query: SELECT T1.template_type_code FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates
    AS T1 JOIN spider_dev.CRE_DOC_TEMPLATE_MGT.Documents AS T2 ON T1.template_id  =  T2.template_id
    WHERE T2.document_name  =  'Data base'
  tables:
  - Templates
  - Documents
  comparison_rules:
  - columns:
    - template_type_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_340:
  query_name: spider_340
  question: Show all document names using templates with template type code BK.
  golden_query: SELECT T2.document_name FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates
    AS T1 JOIN spider_dev.CRE_DOC_TEMPLATE_MGT.Documents AS T2 ON T1.template_id  =  T2.template_id
    WHERE T1.template_type_code  =  'BK'
  tables:
  - Templates
  - Documents
  comparison_rules:
  - columns:
    - document_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_341:
  query_name: spider_341
  question: What are the names of documents that use templates with the code BK?
  golden_query: SELECT T2.document_name FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates
    AS T1 JOIN spider_dev.CRE_DOC_TEMPLATE_MGT.Documents AS T2 ON T1.template_id  =  T2.template_id
    WHERE T1.template_type_code  =  'BK'
  tables:
  - Templates
  - Documents
  comparison_rules:
  - columns:
    - document_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_342:
  query_name: spider_342
  question: Show all template type codes and the number of documents using each type.
    Display as num_docs.
  golden_query: SELECT r.template_type_code, COUNT(document_id) AS num_docs FROM spider_dev.CRE_DOC_TEMPLATE_MGT.ref_template_types AS r LEFT JOIN spider_dev.CRE_DOC_TEMPLATE_MGT.templates AS t ON r.template_type_code = t.template_type_code LEFT JOIN spider_dev.CRE_DOC_TEMPLATE_MGT.documents AS d ON t.template_id = d.template_id GROUP BY r.template_type_code ORDER BY num_docs DESC NULLS LAST
  tables:
  - Templates
  - Documents
  comparison_rules:
  - columns:
    - template_type_code
    - num_docs
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_343:
  query_name: spider_343
  question: What are the different template type codes, and how many documents use
    each type? Display as num_docs.
  golden_query: SELECT T1.template_type_code ,  count(*) as num_docs FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates
    AS T1 JOIN spider_dev.CRE_DOC_TEMPLATE_MGT.Documents AS T2 ON T1.template_id  =  T2.template_id
    GROUP BY T1.template_type_code
  tables:
  - Templates
  - Documents
  comparison_rules:
  - columns:
    - template_type_code
    - num_docs
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_344:
  query_name: spider_344
  question: Which template type code is used by most number of documents?
  golden_query: SELECT T1.template_type_code FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates
    AS T1 JOIN spider_dev.CRE_DOC_TEMPLATE_MGT.Documents AS T2 ON T1.template_id  =  T2.template_id
    GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
  tables:
  - Templates
  - Documents
  comparison_rules:
  - columns:
    - template_type_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_345:
  query_name: spider_345
  question: Return the code of the template type that is most commonly used in documents.
  golden_query: SELECT T1.template_type_code FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates
    AS T1 JOIN spider_dev.CRE_DOC_TEMPLATE_MGT.Documents AS T2 ON T1.template_id  =  T2.template_id
    GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
  tables:
  - Templates
  - Documents
  comparison_rules:
  - columns:
    - template_type_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_346:
  query_name: spider_346
  question: Show all template type codes that are not used by any document.
  golden_query: SELECT template_type_code FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates
    EXCEPT SELECT template_type_code FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates
    AS T1 JOIN spider_dev.CRE_DOC_TEMPLATE_MGT.Documents AS T2 ON T1.template_id  =  T2.template_id
  tables:
  - Templates
  - Documents
  comparison_rules:
  - columns:
    - template_type_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_347:
  query_name: spider_347
  question: What are the codes of template types that are not used for any document?
  golden_query: SELECT template_type_code FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates
    EXCEPT SELECT template_type_code FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Templates
    AS T1 JOIN spider_dev.CRE_DOC_TEMPLATE_MGT.Documents AS T2 ON T1.template_id  =  T2.template_id
  tables:
  - Templates
  - Documents
  comparison_rules:
  - columns:
    - template_type_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_348:
  query_name: spider_348
  question: Show all template type codes and descriptions.
  golden_query: SELECT template_type_code ,  template_type_description FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Ref_template_types
  tables:
  - Ref_template_types
  comparison_rules:
  - columns:
    - template_type_code
    - template_type_description
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_349:
  query_name: spider_349
  question: What are the type codes and descriptions for all template types?
  golden_query: SELECT template_type_code ,  template_type_description FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Ref_template_types
  tables:
  - Ref_template_types
  comparison_rules:
  - columns:
    - template_type_code
    - template_type_description
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_350:
  query_name: spider_350
  question: What is the template type descriptions for template type code 'AD'.
  golden_query: SELECT template_type_description FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Ref_template_types
    WHERE template_type_code  =  'AD'
  tables:
  - Ref_template_types
  comparison_rules:
  - columns:
    - template_type_description
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_351:
  query_name: spider_351
  question: Return the template type description of the template type with the code
    AD.
  golden_query: SELECT template_type_description FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Ref_template_types
    WHERE template_type_code  =  'AD'
  tables:
  - Ref_template_types
  comparison_rules:
  - columns:
    - template_type_description
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_352:
  query_name: spider_352
  question: What is the template type code for template type description 'Book'.
  golden_query: SELECT template_type_code FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Ref_template_types
    WHERE template_type_description  =  'Book'
  tables:
  - Ref_template_types
  comparison_rules:
  - columns:
    - template_type_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_353:
  query_name: spider_353
  question: Return the type code of the template type with the description 'Book'.
  golden_query: SELECT template_type_code FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Ref_template_types
    WHERE template_type_description  =  'Book'
  tables:
  - Ref_template_types
  comparison_rules:
  - columns:
    - template_type_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_354:
  query_name: spider_354
  question: What are the distinct template type descriptions for the templates ever
    used by any document?
  golden_query: SELECT DISTINCT T1.template_type_description FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Ref_template_types
    AS T1 JOIN spider_dev.CRE_DOC_TEMPLATE_MGT.Templates AS T2 ON T1.template_type_code  =
    T2.template_type_code JOIN spider_dev.CRE_DOC_TEMPLATE_MGT.Documents AS T3 ON
    T2.Template_ID  =  T3.template_ID
  tables:
  - Templates
  - Documents
  - Ref_template_types
  comparison_rules:
  - columns:
    - template_type_description
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_355:
  query_name: spider_355
  question: Return the different descriptions for templates that have been used in
    a document.
  golden_query: SELECT DISTINCT T1.template_type_description FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Ref_template_types
    AS T1 JOIN spider_dev.CRE_DOC_TEMPLATE_MGT.Templates AS T2 ON T1.template_type_code  =
    T2.template_type_code JOIN spider_dev.CRE_DOC_TEMPLATE_MGT.Documents AS T3 ON
    T2.Template_ID  =  T3.template_ID
  tables:
  - Templates
  - Documents
  - Ref_template_types
  comparison_rules:
  - columns:
    - template_type_description
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_356:
  query_name: spider_356
  question: What are the template ids with template type description 'Presentation'.
  golden_query: SELECT T2.template_id FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Ref_template_types
    AS T1 JOIN spider_dev.CRE_DOC_TEMPLATE_MGT.Templates AS T2 ON T1.template_type_code  =
    T2.template_type_code WHERE T1.template_type_description  =  'Presentation'
  tables:
  - Templates
  - Ref_template_types
  comparison_rules:
  - columns:
    - template_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_357:
  query_name: spider_357
  question: Return the ids corresponding to templates with the description 'Presentation'.
  golden_query: SELECT T2.template_id FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Ref_template_types
    AS T1 JOIN spider_dev.CRE_DOC_TEMPLATE_MGT.Templates AS T2 ON T1.template_type_code  =
    T2.template_type_code WHERE T1.template_type_description  =  'Presentation'
  tables:
  - Templates
  - Ref_template_types
  comparison_rules:
  - columns:
    - template_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_358:
  query_name: spider_358
  question: How many paragraphs in total? Display as num_para.
  golden_query: SELECT count(*) as num_para FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Paragraphs
  tables:
  - Paragraphs
  comparison_rules:
  - columns:
    - num_para
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_359:
  query_name: spider_359
  question: Count the number of paragraphs. Display as num_para.
  golden_query: SELECT count(*) as num_para FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Paragraphs
  tables:
  - Paragraphs
  comparison_rules:
  - columns:
    - num_para
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_360:
  query_name: spider_360
  question: How many paragraphs for the document with name 'Summer Show'? Display
    as num_para.
  golden_query: SELECT count(*) as num_para FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Paragraphs
    AS T1 JOIN spider_dev.CRE_DOC_TEMPLATE_MGT.Documents AS T2 ON T1.document_ID  =  T2.document_ID
    WHERE T2.document_name  =  'Summer Show'
  tables:
  - Paragraphs
  - Documents
  comparison_rules:
  - columns:
    - num_para
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_361:
  query_name: spider_361
  question: Count the number of paragraphs in the document named 'Summer Show'.Display
    as num_para.
  golden_query: SELECT count(*) as num_para FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Paragraphs
    AS T1 JOIN spider_dev.CRE_DOC_TEMPLATE_MGT.Documents AS T2 ON T1.document_ID  =  T2.document_ID
    WHERE T2.document_name  =  'Summer Show'
  tables:
  - Paragraphs
  - Documents
  comparison_rules:
  - columns:
    - num_para
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_362:
  query_name: spider_362
  question: Show other details for paragraph containing 'korea'.
  golden_query: select other_details from spider_dev.CRE_DOC_TEMPLATE_MGT.paragraphs
    where paragraph_text ilike 'korea%'
  tables:
  - paragraphs
  comparison_rules:
  - columns:
    - other_details
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_363:
  query_name: spider_363
  question: What are other details for the paragraph that includes the text 'Korea'
  golden_query: select other_details from spider_dev.CRE_DOC_TEMPLATE_MGT.paragraphs
    where paragraph_text ilike 'korea%'
  tables:
  - paragraphs
  comparison_rules:
  - columns:
    - other_details
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_364:
  query_name: spider_364
  question: Show all paragraph ids and texts for the document with name 'Welcome to
    NY'.
  golden_query: SELECT T1.paragraph_id ,   T1.paragraph_text FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Paragraphs
    AS T1 JOIN spider_dev.CRE_DOC_TEMPLATE_MGT.Documents AS T2 ON T1.document_id  =  T2.document_id
    WHERE T2.Document_Name  =  'Welcome to NY'
  tables:
  - Paragraphs
  - Documents
  comparison_rules:
  - columns:
    - paragraph_id
    - paragraph_text
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_365:
  query_name: spider_365
  question: What are the ids and texts of paragraphs in the document titled 'Welcome
    to NY'?
  golden_query: SELECT T1.paragraph_id ,   T1.paragraph_text FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Paragraphs
    AS T1 JOIN spider_dev.CRE_DOC_TEMPLATE_MGT.Documents AS T2 ON T1.document_id  =  T2.document_id
    WHERE T2.Document_Name  =  'Welcome to NY'
  tables:
  - Paragraphs
  - Documents
  comparison_rules:
  - columns:
    - paragraph_id
    - paragraph_text
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_366:
  query_name: spider_366
  question: Show all paragraph texts for the document 'Customer reviews'.
  golden_query: SELECT T1.paragraph_text FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Paragraphs
    AS T1 JOIN spider_dev.CRE_DOC_TEMPLATE_MGT.Documents AS T2 ON T1.document_id  =  T2.document_id
    WHERE T2.document_name  =  'Customer reviews'
  tables:
  - Paragraphs
  - Documents
  comparison_rules:
  - columns:
    - paragraph_text
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_367:
  query_name: spider_367
  question: What are the paragraph texts for the document with the name 'Customer
    reviews'?
  golden_query: SELECT T1.paragraph_text FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Paragraphs
    AS T1 JOIN spider_dev.CRE_DOC_TEMPLATE_MGT.Documents AS T2 ON T1.document_id  =  T2.document_id
    WHERE T2.document_name  =  'Customer reviews'
  tables:
  - Paragraphs
  - Documents
  comparison_rules:
  - columns:
    - paragraph_text
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_368:
  query_name: spider_368
  question: Show all document ids and the number of paragraphs in each document. Show
    me documents even if there are no paragraphs. Order by document id. Display number
    of paragraphs as num_paragraphs
  golden_query: select a.document_id, count(paragraph_id) as num_paragraphs from spider_dev.CRE_DOC_TEMPLATE_MGT.documents
    a left join spider_dev.CRE_DOC_TEMPLATE_MGT.paragraphs b on a.document_id=b.document_id  group
    by a.document_id order by a.document_id
  tables: []
  comparison_rules:
  - columns:
    - document_id
    - num_paragraphs
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_369:
  query_name: spider_369
  question: Return the different document ids along with the number of paragraphs
    corresponding to each, ordered by id. Show me documents even if there are no paragraphs.
    Order by document id. Display number of paragraphs as num_paragraphs
  golden_query: select a.document_id, count(*) as num_paragraphs from spider_dev.CRE_DOC_TEMPLATE_MGT.documents
    a left join spider_dev.CRE_DOC_TEMPLATE_MGT.paragraphs b on a.document_id=b.document_id  group
    by a.document_id order by a.document_id
  tables: []
  comparison_rules:
  - columns:
    - document_id
    - num_paragraphs
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_370:
  query_name: spider_370
  question: Show all document ids, names and the number of paragraphs in each document.
    Display as num_para.
  golden_query: SELECT T1.document_id ,  T2.document_name ,  count(*) as num_para
    FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Paragraphs AS T1 JOIN spider_dev.CRE_DOC_TEMPLATE_MGT.Documents
    AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ,  T2.document_name
  tables:
  - Paragraphs
  - Documents
  comparison_rules:
  - columns:
    - document_id
    - document_name
    - num_para
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_371:
  query_name: spider_371
  question: What are the ids and names of each document, as well as the number of
    paragraphs in each? Display as num_para.
  golden_query: WITH paragraphcount AS ( SELECT document_id, COUNT(paragraph_id) AS num_para FROM spider_dev.CRE_DOC_TEMPLATE_MGT.paragraphs GROUP BY document_id ) SELECT d.document_id, document_name, num_para FROM spider_dev.CRE_DOC_TEMPLATE_MGT.documents AS d LEFT JOIN paragraphcount AS p ON d.document_id = p.document_id
  tables:
  - Paragraphs
  - Documents
  comparison_rules:
  - columns:
    - document_id
    - document_name
    - num_para
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_372:
  query_name: spider_372
  question: List all document ids with at least two paragraphs.
  golden_query: SELECT document_id FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Paragraphs
    GROUP BY document_id HAVING count(*)  >=  2
  tables:
  - Paragraphs
  comparison_rules:
  - columns:
    - document_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_373:
  query_name: spider_373
  question: What are the ids of documents that have 2 or more paragraphs?
  golden_query: SELECT document_id FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Paragraphs
    GROUP BY document_id HAVING count(*)  >=  2
  tables:
  - Paragraphs
  comparison_rules:
  - columns:
    - document_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_374:
  query_name: spider_374
  question: What is the document id and name with greatest number of paragraphs?
  golden_query: SELECT T1.document_id ,  T2.document_name FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Paragraphs
    AS T1 JOIN spider_dev.CRE_DOC_TEMPLATE_MGT.Documents AS T2 ON T1.document_id  =  T2.document_id
    GROUP BY T1.document_id ,  T2.document_name ORDER BY count(*) DESC LIMIT 1
  tables:
  - Paragraphs
  - Documents
  comparison_rules:
  - columns:
    - document_id
    - document_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_375:
  query_name: spider_375
  question: Return the id and name of the document with the most paragraphs.
  golden_query: SELECT T1.document_id ,  T2.document_name FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Paragraphs
    AS T1 JOIN spider_dev.CRE_DOC_TEMPLATE_MGT.Documents AS T2 ON T1.document_id  =  T2.document_id
    GROUP BY T1.document_id ,  T2.document_name ORDER BY count(*) DESC LIMIT 1
  tables:
  - Paragraphs
  - Documents
  comparison_rules:
  - columns:
    - document_id
    - document_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_376:
  query_name: spider_376
  question: What is the document id with least number of paragraphs? Sort by number
    of document_id and show 1 row.
  golden_query: SELECT document_id FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Paragraphs
    GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
  tables:
  - Paragraphs
  comparison_rules:
  - columns:
    - document_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_377:
  query_name: spider_377
  question: Return the id of the document with the fewest paragraphs. Sort by number
    of document_id and show 1 row.
  golden_query: SELECT document_id FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Paragraphs
    GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
  tables:
  - Paragraphs
  comparison_rules:
  - columns:
    - document_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_378:
  query_name: spider_378
  question: What is the document id with 1 to 2 paragraphs?
  golden_query: SELECT document_id FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Paragraphs
    GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
  tables:
  - Paragraphs
  comparison_rules:
  - columns:
    - document_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_379:
  query_name: spider_379
  question: Give the ids of documents that have between one and two paragraphs.
  golden_query: SELECT document_id FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Paragraphs
    GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
  tables:
  - Paragraphs
  comparison_rules:
  - columns:
    - document_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_380:
  query_name: spider_380
  question: show me document ids which has all of paragraph text 'Brazil' and 'Ireland'
  golden_query: SELECT document_id FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Paragraphs
    WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Paragraphs
    WHERE paragraph_text  =  'Ireland'
  tables:
  - Paragraphs
  comparison_rules:
  - columns:
    - document_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_381:
  query_name: spider_381
  question: What are the ids of documents that contain all of the paragraph text 'Brazil'
    and 'Ireland'?
  golden_query: SELECT document_id FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Paragraphs
    WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM spider_dev.CRE_DOC_TEMPLATE_MGT.Paragraphs
    WHERE paragraph_text  =  'Ireland'
  tables:
  - Paragraphs
  comparison_rules:
  - columns:
    - document_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - CRE_DOC_TEMPLATE_MGT
spider_382:
  query_name: spider_382
  question: How many teachers are there? Display as num_teachers.
  golden_query: SELECT count(*) as num_teachers FROM spider_dev.course_teach.teacher
  tables:
  - teacher
  comparison_rules:
  - columns:
    - num_teachers
    match: exact
  auto_select_schema: 'false'
  schemas:
  - course_teach
spider_383:
  query_name: spider_383
  question: What is the total count of teachers? Display as num_teachers.
  golden_query: SELECT count(*) as num_teachers FROM spider_dev.course_teach.teacher
  tables:
  - teacher
  comparison_rules:
  - columns:
    - num_teachers
    match: exact
  auto_select_schema: 'false'
  schemas:
  - course_teach
spider_384:
  query_name: spider_384
  question: List the names of teachers in ascending order of age.
  golden_query: SELECT Name FROM spider_dev.course_teach.teacher ORDER BY Age ASC
  tables:
  - teacher
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - course_teach
spider_385:
  query_name: spider_385
  question: What are the names of the teachers ordered by ascending age?
  golden_query: SELECT Name FROM spider_dev.course_teach.teacher ORDER BY Age ASC
  tables:
  - teacher
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - course_teach
spider_386:
  query_name: spider_386
  question: What are the age and hometown of teachers?
  golden_query: SELECT Age ,  Hometown FROM spider_dev.course_teach.teacher
  tables:
  - teacher
  comparison_rules:
  - columns:
    - Age
    - Hometown
    match: exact
  auto_select_schema: 'false'
  schemas:
  - course_teach
spider_387:
  query_name: spider_387
  question: What is the age and hometown of every teacher?
  golden_query: SELECT Age ,  Hometown FROM spider_dev.course_teach.teacher
  tables:
  - teacher
  comparison_rules:
  - columns:
    - Age
    - Hometown
    match: exact
  auto_select_schema: 'false'
  schemas:
  - course_teach
spider_388:
  query_name: spider_388
  question: List the name of teachers whose hometown is not `` Little Lever Urban
    District '' .
  golden_query: select name from spider_dev.course_teach.teacher where hometown !=
    'Little Lever Urban District'
  tables:
  - teacher
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - course_teach
spider_389:
  query_name: spider_389
  question: What are the names of the teachers whose hometown is not `` Little Lever
    Urban District '' ?
  golden_query: select name from spider_dev.course_teach.teacher where hometown !=
    'Little Lever Urban District'
  tables:
  - teacher
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - course_teach
spider_390:
  query_name: spider_390
  question: Show the name of teachers aged either 32 or 33?
  golden_query: SELECT Name FROM spider_dev.course_teach.teacher WHERE Age  =  32
    OR Age  =  33
  tables:
  - teacher
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - course_teach
spider_391:
  query_name: spider_391
  question: What are the names of the teachers who are aged either 32 or 33?
  golden_query: SELECT Name FROM spider_dev.course_teach.teacher WHERE Age  =  32
    OR Age  =  33
  tables:
  - teacher
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - course_teach
spider_392:
  query_name: spider_392
  question: What is the hometown of the youngest teacher?
  golden_query: SELECT Hometown FROM spider_dev.course_teach.teacher ORDER BY Age
    ASC LIMIT 1
  tables:
  - teacher
  comparison_rules:
  - columns:
    - Hometown
    match: exact
  auto_select_schema: 'false'
  schemas:
  - course_teach
spider_393:
  query_name: spider_393
  question: Where is the youngest teacher from?
  golden_query: SELECT Hometown FROM spider_dev.course_teach.teacher ORDER BY Age
    ASC LIMIT 1
  tables:
  - teacher
  comparison_rules:
  - columns:
    - Hometown
    match: exact
  auto_select_schema: 'false'
  schemas:
  - course_teach
spider_394:
  query_name: spider_394
  question: Show different hometown of teachers and the number of teachers from each
    hometown. Display as num_teachers.
  golden_query: SELECT Hometown ,  COUNT(*) as num_teachers FROM spider_dev.course_teach.teacher
    GROUP BY Hometown
  tables:
  - teacher
  comparison_rules:
  - columns:
    - Hometown
    - num_teachers
    match: exact
  auto_select_schema: 'false'
  schemas:
  - course_teach
spider_395:
  query_name: spider_395
  question: For each hometown, how many teachers are there? Display as num_teachers.
  golden_query: SELECT Hometown ,  COUNT(*) as num_teachers FROM spider_dev.course_teach.teacher
    GROUP BY Hometown
  tables:
  - teacher
  comparison_rules:
  - columns:
    - Hometown
    - num_teachers
    match: exact
  auto_select_schema: 'false'
  schemas:
  - course_teach
spider_396:
  query_name: spider_396
  question: List the most common hometown of teachers. Show me all common hometowns
  golden_query: SELECT Hometown FROM spider_dev.course_teach.teacher GROUP BY Hometown
    ORDER BY COUNT(*) DESC
  tables:
  - teacher
  comparison_rules:
  - columns:
    - Hometown
    match: exact
  auto_select_schema: 'false'
  schemas:
  - course_teach
spider_397:
  query_name: spider_397
  question: What is the most common hometowns for teachers? Show me all common hometowns
  golden_query: SELECT Hometown FROM spider_dev.course_teach.teacher GROUP BY Hometown
    ORDER BY COUNT(*) DESC
  tables:
  - teacher
  comparison_rules:
  - columns:
    - Hometown
    match: exact
  auto_select_schema: 'false'
  schemas:
  - course_teach
spider_398:
  query_name: spider_398
  question: Show the hometowns shared by at least two teachers.
  golden_query: SELECT Hometown FROM spider_dev.course_teach.teacher GROUP BY Hometown
    HAVING COUNT(*)  >=  2
  tables:
  - teacher
  comparison_rules:
  - columns:
    - Hometown
    match: exact
  auto_select_schema: 'false'
  schemas:
  - course_teach
spider_399:
  query_name: spider_399
  question: What are the towns from which at least two teachers come from?
  golden_query: SELECT Hometown FROM spider_dev.course_teach.teacher GROUP BY Hometown
    HAVING COUNT(*)  >=  2
  tables:
  - teacher
  comparison_rules:
  - columns:
    - Hometown
    match: exact
  auto_select_schema: 'false'
  schemas:
  - course_teach
spider_400:
  query_name: spider_400
  question: Show names of teachers and the courses they are arranged to teach.
  golden_query: SELECT T3.Name ,  T2.Course FROM spider_dev.course_teach.course_arrange
    AS T1 JOIN spider_dev.course_teach.course AS T2 ON T1.Course_ID  =  T2.Course_ID
    JOIN spider_dev.course_teach.teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
  tables:
  - course_arrange
  - course
  - teacher
  comparison_rules:
  - columns:
    - Name
    - Course
    match: exact
  auto_select_schema: 'false'
  schemas:
  - course_teach
spider_401:
  query_name: spider_401
  question: What is the name of each teacher and what course they teach?
  golden_query: SELECT T3.Name ,  T2.Course FROM spider_dev.course_teach.course_arrange
    AS T1 JOIN spider_dev.course_teach.course AS T2 ON T1.Course_ID  =  T2.Course_ID
    JOIN spider_dev.course_teach.teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
  tables:
  - course_arrange
  - course
  - teacher
  comparison_rules:
  - columns:
    - Name
    - Course
    match: exact
  auto_select_schema: 'false'
  schemas:
  - course_teach
spider_402:
  query_name: spider_402
  question: Show names of teachers and the courses they are arranged to teach in ascending
    alphabetical order of the teacher's name.
  golden_query: SELECT T3.Name ,  T2.Course FROM spider_dev.course_teach.course_arrange
    AS T1 JOIN spider_dev.course_teach.course AS T2 ON T1.Course_ID  =  T2.Course_ID
    JOIN spider_dev.course_teach.teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
    ORDER BY T3.Name
  tables:
  - course_arrange
  - course
  - teacher
  comparison_rules:
  - columns:
    - Name
    - Course
    match: exact
  auto_select_schema: 'false'
  schemas:
  - course_teach
spider_403:
  query_name: spider_403
  question: What are the names of the teachers and the courses they teach in ascending
    alphabetical order by the name of the teacher?
  golden_query: SELECT T3.Name ,  T2.Course FROM spider_dev.course_teach.course_arrange
    AS T1 JOIN spider_dev.course_teach.course AS T2 ON T1.Course_ID  =  T2.Course_ID
    JOIN spider_dev.course_teach.teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
    ORDER BY T3.Name
  tables:
  - course_arrange
  - course
  - teacher
  comparison_rules:
  - columns:
    - Name
    - Course
    match: exact
  auto_select_schema: 'false'
  schemas:
  - course_teach
spider_404:
  query_name: spider_404
  question: Show the name of the teacher for the math course.
  golden_query: SELECT T3.Name FROM spider_dev.course_teach.course_arrange AS T1 JOIN
    spider_dev.course_teach.course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN spider_dev.course_teach.teacher
    AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  'Math'
  tables:
  - course_arrange
  - course
  - teacher
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - course_teach
spider_405:
  query_name: spider_405
  question: What are the names of the people who teach math courses?
  golden_query: SELECT T3.Name FROM spider_dev.course_teach.course_arrange AS T1 JOIN
    spider_dev.course_teach.course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN spider_dev.course_teach.teacher
    AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  'Math'
  tables:
  - course_arrange
  - course
  - teacher
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - course_teach
spider_406:
  query_name: spider_406
  question: Show names of teachers and the number of courses they teach. Display as
    num_teachers.
  golden_query: SELECT T2.Name ,  COUNT(*) as num_teachers FROM spider_dev.course_teach.course_arrange
    AS T1 JOIN spider_dev.course_teach.teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID
    GROUP BY T2.Name
  tables:
  - course_arrange
  - teacher
  comparison_rules:
  - columns:
    - Name
    - num_teachers
    match: exact
  auto_select_schema: 'false'
  schemas:
  - course_teach
spider_407:
  query_name: spider_407
  question: What are the names of the teachers and how many courses do they teach?  Display
    as num_teachers.
  golden_query: SELECT T2.Name ,  COUNT(*) as num_teachers FROM spider_dev.course_teach.course_arrange
    AS T1 JOIN spider_dev.course_teach.teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID
    GROUP BY T2.Name
  tables:
  - course_arrange
  - teacher
  comparison_rules:
  - columns:
    - Name
    - num_teachers
    match: exact
  auto_select_schema: 'false'
  schemas:
  - course_teach
spider_408:
  query_name: spider_408
  question: Show names of teachers that teach at least two courses.
  golden_query: SELECT T2.Name FROM spider_dev.course_teach.course_arrange AS T1 JOIN
    spider_dev.course_teach.teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP
    BY T2.Name HAVING COUNT(*)  >=  2
  tables:
  - course_arrange
  - teacher
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - course_teach
spider_409:
  query_name: spider_409
  question: What are the names of the teachers who teach at least two courses?
  golden_query: SELECT T2.Name FROM spider_dev.course_teach.course_arrange AS T1 JOIN
    spider_dev.course_teach.teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP
    BY T2.Name HAVING COUNT(*)  >=  2
  tables:
  - course_arrange
  - teacher
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - course_teach
spider_410:
  query_name: spider_410
  question: List the names of teachers who have not been arranged to teach courses.
  golden_query: SELECT Name FROM spider_dev.course_teach.teacher WHERE Teacher_id
    NOT IN (SELECT Teacher_id FROM spider_dev.course_teach.course_arrange)
  tables:
  - course_arrange
  - teacher
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - course_teach
spider_411:
  query_name: spider_411
  question: What are the names of the teachers whose courses have not been arranged?
  golden_query: SELECT Name FROM spider_dev.course_teach.teacher WHERE Teacher_id
    NOT IN (SELECT Teacher_id FROM spider_dev.course_teach.course_arrange)
  tables:
  - course_arrange
  - teacher
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - course_teach
spider_412:
  query_name: spider_412
  question: How many visitors below age 30 are there? Display as num_vis.
  golden_query: SELECT count(*) as num_vis FROM spider_dev.museum_visit.visitor WHERE
    age  <  30
  tables:
  - visitor
  comparison_rules:
  - columns:
    - num_vis
    match: exact
  auto_select_schema: 'false'
  schemas:
  - museum_visit
spider_413:
  query_name: spider_413
  question: 'Find the names of the visitors whose membership level is higher than
    4, and order the results by the level from high to low. '
  golden_query: SELECT name FROM spider_dev.museum_visit.visitor WHERE Level_of_membership  >  4
    ORDER BY Level_of_membership DESC
  tables:
  - visitor
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - museum_visit
spider_414:
  query_name: spider_414
  question: What is the average age of the visitors whose membership level is not
    higher than 4? Display as avg_age
  golden_query: SELECT avg(age) as avg_age FROM spider_dev.museum_visit.visitor WHERE
    Level_of_membership  <=  4
  tables:
  - visitor
  comparison_rules:
  - columns:
    - avg_age
    match: exact
  auto_select_schema: 'false'
  schemas:
  - museum_visit
spider_415:
  query_name: spider_415
  question: Find the name and membership level of the visitors whose membership level
    is higher than 4, and sort by their age from old to young.
  golden_query: SELECT name ,  Level_of_membership FROM spider_dev.museum_visit.visitor
    WHERE Level_of_membership  >  4 ORDER BY age DESC
  tables:
  - visitor
  comparison_rules:
  - columns:
    - name
    - Level_of_membership
    match: exact
  auto_select_schema: 'false'
  schemas:
  - museum_visit
spider_416:
  query_name: spider_416
  question: Find the id and name of the museum that has the most staff members?
  golden_query: SELECT museum_id ,  name FROM spider_dev.museum_visit.museum ORDER
    BY num_of_staff DESC LIMIT 1
  tables:
  - museum
  comparison_rules:
  - columns:
    - museum_id
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - museum_visit
spider_417:
  query_name: spider_417
  question: Find the average number of staff working for the museums that were open
    before 2009. Display as avg_staff
  golden_query: SELECT avg(num_of_staff) as avg_staff FROM spider_dev.museum_visit.museum
    WHERE open_year  <  2009
  tables:
  - museum
  comparison_rules:
  - columns:
    - avg_staff
    match: exact
  auto_select_schema: 'false'
  schemas:
  - museum_visit
spider_418:
  query_name: spider_418
  question: What are the opening year and staff number of the museum named 'Plaza
    Museum'?
  golden_query: SELECT Num_of_Staff ,  Open_Year FROM spider_dev.museum_visit.museum
    WHERE name  =  'Plaza Museum'
  tables:
  - museum
  comparison_rules:
  - columns:
    - Num_of_Staff
    - Open_Year
    match: exact
  auto_select_schema: 'false'
  schemas:
  - museum_visit
spider_419:
  query_name: spider_419
  question: find the names of museums which have more staff than the minimum staff
    number of all museums opened after 2010.
  golden_query: SELECT name FROM spider_dev.museum_visit.museum WHERE num_of_staff  >  (SELECT
    min(num_of_staff) FROM spider_dev.museum_visit.museum WHERE open_year  >  2010)
  tables:
  - museum
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - museum_visit
spider_420:
  query_name: spider_420
  question: find the id, name and age for visitors who visited some museums more than
    once.
  golden_query: SELECT t1.id ,  t1.name ,  t1.age FROM spider_dev.museum_visit.visitor
    AS t1 JOIN spider_dev.museum_visit.visit AS t2 ON t1.id  =  t2.visitor_id GROUP
    BY  t1.id ,  t1.name ,  t1.age HAVING count(*)  >  1
  tables:
  - visitor
  - visit
  comparison_rules:
  - columns:
    - id
    - name
    - age
    match: exact
  auto_select_schema: 'false'
  schemas:
  - museum_visit
spider_421:
  query_name: spider_421
  question: What are the id, name and membership level of visitors who have spent
    the largest amount of money in total in all museum tickets?
  golden_query: SELECT t1.id as id,  t1.name as name,  t1.Level_of_membership as level_of_membership
    FROM spider_dev.museum_visit.visitor AS t1 JOIN spider_dev.museum_visit.visit
    AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id ,  t1.name ,  t1.Level_of_membership
    ORDER BY sum(t2.Total_spent) DESC LIMIT 1
  tables:
  - visitor
  - visit
  comparison_rules:
  - columns:
    - id
    match: oneof
  auto_select_schema: 'false'
  schemas:
  - museum_visit
spider_422:
  query_name: spider_422
  question: What are the id and name of the museum visited most times?
  golden_query: "WITH visit_counts AS (\n    SELECT\n        museum_id,\n        COUNT(*)
    AS num_visits\n    FROM spider_dev.museum_visit.visit\n    GROUP BY\n        museum_id\n
    ),\n\nmax_visits AS (\n    SELECT MAX(num_visits) AS max_num_visits\n    FROM
    visit_counts\n)\n\nSELECT\n    m.museum_id AS id,\n    m.name\nFROM spider_dev.museum_visit.museum
    AS m\nINNER JOIN visit_counts AS vc\n    ON m.museum_id = vc.museum_id\nINNER
    JOIN max_visits AS mv\n    ON vc.num_visits = mv.max_num_visits"
  tables:
  - museum
  - visit
  comparison_rules:
  - columns:
    - id
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - museum_visit
spider_423:
  query_name: spider_423
  question: What is the name of the museum that had no visitor yet?
  golden_query: SELECT name FROM spider_dev.museum_visit.museum WHERE Museum_ID NOT
    IN (SELECT museum_id FROM spider_dev.museum_visit.visit)
  tables:
  - museum
  - visit
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - museum_visit
spider_424:
  query_name: spider_424
  question: Find the name and age of the visitor who bought the most tickets at once.
  golden_query: SELECT t1.name ,  t1.age FROM spider_dev.museum_visit.visitor AS t1
    JOIN spider_dev.museum_visit.visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket
    DESC LIMIT 1
  tables:
  - visitor
  - visit
  comparison_rules:
  - columns:
    - name
    - age
    match: exact
  auto_select_schema: 'false'
  schemas:
  - museum_visit
spider_425:
  query_name: spider_425
  question: What are the average and maximum number of tickets bought in all visits?
    Display as avg_ticket, max_ticket.
  golden_query: SELECT avg(num_of_ticket) as avg_ticket,  max(num_of_ticket) as max_ticket
    FROM spider_dev.museum_visit.visit
  tables:
  - visit
  comparison_rules:
  - columns:
    - avg_ticket
    - max_ticket
    match: exact
  auto_select_schema: 'false'
  schemas:
  - museum_visit
spider_426:
  query_name: spider_426
  question: What is the total ticket expense of the visitors whose membership level
    is 1? total_spent has details about the cost of all tickets. Display as total_ticket_expense
  golden_query: SELECT sum(t2.Total_spent) as total_ticket_expense FROM spider_dev.museum_visit.visitor
    AS t1 JOIN spider_dev.museum_visit.visit AS t2 ON t1.id  =  t2.visitor_id WHERE
    t1.Level_of_membership  =  1
  tables:
  - visitor
  - visit
  comparison_rules:
  - columns:
    - total_ticket_expense
    match: exact
  auto_select_schema: 'false'
  schemas:
  - museum_visit
spider_427:
  query_name: spider_427
  question: What is the name of the visitor who visited both a museum opened before
    2009 and a museum opened after 2011?
  golden_query: SELECT t1.name FROM spider_dev.museum_visit.visitor AS t1 JOIN spider_dev.museum_visit.visit
    AS t2 ON t1.id  =  t2.visitor_id JOIN spider_dev.museum_visit.museum AS t3 ON
    t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name
    FROM spider_dev.museum_visit.visitor AS t1 JOIN spider_dev.museum_visit.visit
    AS t2 ON t1.id  =  t2.visitor_id JOIN spider_dev.museum_visit.museum AS t3 ON
    t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011
  tables:
  - museum
  - visitor
  - visit
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - museum_visit
spider_428:
  query_name: spider_428
  question: Find the number of visitors who did not visit any museum opened after
    2010. Display as num_vis.
  golden_query: SELECT count(*) as num_vis FROM spider_dev.museum_visit.visitor WHERE
    id NOT IN (SELECT t2.visitor_id FROM spider_dev.museum_visit.museum AS t1 JOIN
    spider_dev.museum_visit.visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)
  tables:
  - museum
  - visitor
  - visit
  comparison_rules:
  - columns:
    - num_vis
    match: exact
  auto_select_schema: 'false'
  schemas:
  - museum_visit
spider_429:
  query_name: spider_429
  question: How many museums were opened after 2013 or before 2008? Display as num_mus.
  golden_query: SELECT count(*) as num_mus FROM spider_dev.museum_visit.museum WHERE
    open_year  >  2013 OR open_year  <  2008
  tables:
  - museum
  comparison_rules:
  - columns:
    - num_mus
    match: exact
  auto_select_schema: 'false'
  schemas:
  - museum_visit
spider_430:
  query_name: spider_430
  question: Find the total number of players. Display as tot_pla.
  golden_query: SELECT count(*) as tot_pla FROM spider_dev.wta_1.players
  tables:
  - players
  comparison_rules:
  - columns:
    - tot_pla
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_431:
  query_name: spider_431
  question: How many players are there? Display as tot_pla.
  golden_query: SELECT count(*) as tot_pla FROM spider_dev.wta_1.players
  tables:
  - players
  comparison_rules:
  - columns:
    - tot_pla
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_432:
  query_name: spider_432
  question: Find the total number of matches. Display as tot_mat.
  golden_query: SELECT count(*) as tot_mat FROM spider_dev.wta_1.matches
  tables:
  - matches
  comparison_rules:
  - columns:
    - tot_mat
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_433:
  query_name: spider_433
  question: Count the number of matches. Display as tot_mat.
  golden_query: SELECT count(*) as tot_mat FROM spider_dev.wta_1.matches
  tables:
  - matches
  comparison_rules:
  - columns:
    - tot_mat
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_434:
  query_name: spider_434
  question: List the first name and birth date of all players from the country with
    code USA.
  golden_query: SELECT first_name ,  birth_date FROM spider_dev.wta_1.players WHERE
    country_code  =  'USA'
  tables:
  - players
  comparison_rules:
  - columns:
    - first_name
    - birth_date
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_435:
  query_name: spider_435
  question: What are the first names and birth dates of players from the USA?
  golden_query: SELECT first_name ,  birth_date FROM spider_dev.wta_1.players WHERE
    country_code  =  'USA'
  tables:
  - players
  comparison_rules:
  - columns:
    - first_name
    - birth_date
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_436:
  query_name: spider_436
  question: Find the average age of losers and winners of all matches.
  golden_query: SELECT avg(loser_age) as avg_loser,  avg(winner_age) as avg_win FROM
    spider_dev.wta_1.matches
  tables:
  - matches
  comparison_rules:
  - columns:
    - "*"
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_437:
  query_name: spider_437
  question: "What are the average ages of losers and winners across matches?\tLooser
    age is available in looser_age column. Winner age is available in winner_age column."
  golden_query: SELECT avg(loser_age) as avg_loser_age,  avg(winner_age) avg_winner_age
    FROM spider_dev.wta_1.matches
  tables:
  - matches
  comparison_rules:
  - columns:
      - "*"
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_438:
  query_name: spider_438
  question: Find the average rank of winners in all matches. Display as avg_winner_rank
  golden_query: SELECT avg(winner_rank) as avg_winner_rank FROM spider_dev.wta_1.matches
  tables:
  - matches
  comparison_rules:
  - columns:
    - avg_winner_rank
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_439:
  query_name: spider_439
  question: What is the average rank for winners in all matches? Display as avg_winner_rank
  golden_query: SELECT avg(winner_rank) as avg_winner_rank FROM spider_dev.wta_1.matches
  tables:
  - matches
  comparison_rules:
  - columns:
    - avg_winner_rank
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_440:
  query_name: spider_440
  question: Find the highest rank among losers in all matches. loser_rank column contains
    loser_rank details. Display as max_rank.
  golden_query: "SELECT MAX(loser_rank) AS max_rank\nFROM spider_dev.wta_1.matches"
  tables:
  - matches
  comparison_rules:
  - columns:
    - max_rank
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_441:
  query_name: spider_441
  question: What is the minimum rank of losers across all matches? Display as min_rank
  golden_query: SELECT min(loser_rank) as min_rank FROM spider_dev.wta_1.matches
  tables:
  - matches
  comparison_rules:
  - columns:
    - min_rank
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_442:
  query_name: spider_442
  question: find the number of distinct country codes of all players. Display as num_country.
  golden_query: SELECT count(DISTINCT country_code) as num_country FROM spider_dev.wta_1.players
  tables:
  - players
  comparison_rules:
  - columns:
    - num_country
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_443:
  query_name: spider_443
  question: How many distinct countries do players come from? Display as num_country.
  golden_query: SELECT count(DISTINCT country_code) as num_country FROM spider_dev.wta_1.players
  tables:
  - players
  comparison_rules:
  - columns:
    - num_country
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_444:
  query_name: spider_444
  question: Find the number of distinct name of losers. Display as num_losers.
  golden_query: SELECT count(DISTINCT loser_name) as num_losers FROM spider_dev.wta_1.matches
  tables:
  - matches
  comparison_rules:
  - columns:
    - num_losers
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_445:
  query_name: spider_445
  question: How many different loser names are there?  Display as num_losers.
  golden_query: SELECT count(DISTINCT loser_name) as num_losers FROM spider_dev.wta_1.matches
  tables:
  - matches
  comparison_rules:
  - columns:
    - num_losers
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_446:
  query_name: spider_446
  question: Find the name of tourney that has more than 10 matches.
  golden_query: SELECT tourney_name FROM spider_dev.wta_1.matches GROUP BY tourney_name
    HAVING count(*)  >  10
  tables:
  - matches
  comparison_rules:
  - columns:
    - tourney_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_447:
  query_name: spider_447
  question: What are the names of tournaments that have more than 10 matches?
  golden_query: SELECT tourney_name FROM spider_dev.wta_1.matches GROUP BY tourney_name
    HAVING count(*)  >  10
  tables:
  - matches
  comparison_rules:
  - columns:
    - tourney_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_448:
  query_name: spider_448
  question: List the winner name of all winners who played in both 2013 and 2016.
    Ensure that the query considers only those winners who have won in both years
    at least once. Display winner_name.
  golden_query: SELECT winner_name FROM spider_dev.wta_1.matches WHERE YEAR  =  2013
    INTERSECT SELECT winner_name FROM spider_dev.wta_1.matches WHERE YEAR  =  2016
  tables:
  - matches
  comparison_rules:
  - columns:
    - winner_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_449:
  query_name: spider_449
  question: What are the winner name of players who won in both 2013 and 2016? Ensure
    that the query considers only those winners who have won in both years at least
    once. Display winner_name.
  golden_query: SELECT winner_name FROM spider_dev.wta_1.matches WHERE YEAR  =  2013
    INTERSECT SELECT winner_name FROM spider_dev.wta_1.matches WHERE YEAR  =  2016
  tables:
  - matches
  comparison_rules:
  - columns:
    - winner_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_450:
  query_name: spider_450
  question: List the number of all matches who played in years of 2013 or 2016. Display
    num_mat.
  golden_query: SELECT count(*) as num_mat FROM spider_dev.wta_1.matches WHERE YEAR  =  2013
    OR YEAR  =  2016
  tables:
  - matches
  comparison_rules:
  - columns:
    - num_mat
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_451:
  query_name: spider_451
  question: How many matches were played in 2013 or 2016? Display num_mat.
  golden_query: SELECT count(*) as num_mat FROM spider_dev.wta_1.matches WHERE YEAR  =  2013
    OR YEAR  =  2016
  tables:
  - matches
  comparison_rules:
  - columns:
    - num_mat
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_452:
  query_name: spider_452
  question: What are the country code and first name of the players who won in both
    tourney WTA Championships and Australian Open?. Ensure that the query considers
    only those players who have won in both individual tournaments at least once.
  golden_query: SELECT T1.country_code ,  T1.first_name FROM spider_dev.wta_1.players
    AS T1 JOIN spider_dev.wta_1.matches AS T2 ON T1.player_id  =  T2.winner_id WHERE
    T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name
    FROM spider_dev.wta_1.players AS T1 JOIN spider_dev.wta_1.matches AS T2 ON T1.player_id  =  T2.winner_id
    WHERE T2.tourney_name  =  'Australian Open'
  tables:
  - matches
  - players
  comparison_rules:
  - columns:
    - country_code
    - first_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_453:
  query_name: spider_453
  question: What are the first names and country codes for players who won both the
    WTA Championships and the Australian Open? Ensure that the query considers only
    those players who have won in both individual tournaments at least once.
  golden_query: SELECT T1.country_code ,  T1.first_name FROM spider_dev.wta_1.players
    AS T1 JOIN spider_dev.wta_1.matches AS T2 ON T1.player_id  =  T2.winner_id WHERE
    T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name
    FROM spider_dev.wta_1.players AS T1 JOIN spider_dev.wta_1.matches AS T2 ON T1.player_id  =  T2.winner_id
    WHERE T2.tourney_name  =  'Australian Open'
  tables:
  - matches
  - players
  comparison_rules:
  - columns:
    - country_code
    - first_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_454:
  query_name: spider_454
  question: Find the first name and country code of the oldest player.
  golden_query: SELECT first_name ,  country_code FROM spider_dev.wta_1.players ORDER
    BY birth_date LIMIT 1
  tables:
  - players
  comparison_rules:
  - columns:
    - first_name
    - country_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_455:
  query_name: spider_455
  question: What is the first name and country code of the oldest player?
  golden_query: SELECT first_name ,  country_code FROM spider_dev.wta_1.players ORDER
    BY birth_date LIMIT 1
  tables:
  - players
  comparison_rules:
  - columns:
    - first_name
    - country_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_456:
  query_name: spider_456
  question: List the first and last name of all players in the order of birth date.
  golden_query: SELECT first_name ,  last_name FROM spider_dev.wta_1.players ORDER
    BY birth_date
  tables:
  - players
  comparison_rules:
  - columns:
    - first_name
    - last_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_457:
  query_name: spider_457
  question: What are the first name and last name of all players, sorted by birth
    date?
  golden_query: SELECT first_name ,  last_name FROM spider_dev.wta_1.players ORDER
    BY birth_date
  tables:
  - players
  comparison_rules:
  - columns:
    - first_name
    - last_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_458:
  query_name: spider_458
  question: List the first and last name of all players who are left / L hand in the
    order of birth date.
  golden_query: SELECT first_name ,  last_name FROM spider_dev.wta_1.players WHERE
    hand  =  'L' ORDER BY birth_date
  tables:
  - players
  comparison_rules:
  - columns:
    - first_name
    - last_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_459:
  query_name: spider_459
  question: What are the first name and last name of all left handed players, in order
    of birth date?
  golden_query: SELECT first_name ,  last_name FROM spider_dev.wta_1.players WHERE
    hand  =  'L' ORDER BY birth_date
  tables:
  - players
  comparison_rules:
  - columns:
    - first_name
    - last_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_460:
  query_name: spider_460
  question: Find the first name and country code of the player who did the most total
    number of tours.
  golden_query: "WITH total_tours AS (\nSELECT\nplayer_id,\nSUM(tours) AS total_tours\n
    FROM spider_dev.wta_1.rankings\nGROUP BY\nplayer_id\n),\n\nmax_tours_player AS
    (\nSELECT player_id\nFROM total_tours\nWHERE\ntotal_tours = (\nSELECT MAX(total_tours)\n
    FROM total_tours\n)\n)\n\nSELECT\np.first_name,\np.country_code\nFROM spider_dev.wta_1.players
    AS p\nINNER JOIN max_tours_player AS m\nON p.player_id = m.player_id"
  tables:
  - players
  - rankings
  comparison_rules:
  - columns:
    - country_code
    - first_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_461:
  query_name: spider_461
  question: What is the first name and country code of the player with the most total
    number of tours?
  golden_query: "WITH total_tours AS (\nSELECT\nplayer_id,\nSUM(tours) AS total_tours\n
    FROM spider_dev.wta_1.rankings\nGROUP BY\nplayer_id\n),\n\nmax_tours_player AS
    (\nSELECT player_id\nFROM total_tours\nWHERE\ntotal_tours = (\nSELECT MAX(total_tours)\n
    FROM total_tours\n)\n)\n\nSELECT\np.first_name,\np.country_code\nFROM spider_dev.wta_1.players
    AS p\nINNER JOIN max_tours_player AS m\nON p.player_id = m.player_id"
  tables:
  - players
  - rankings
  comparison_rules:
  - columns:
    - country_code
    - first_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_462:
  query_name: spider_462
  question: Find the year that has the most number of matches.
  golden_query: SELECT YEAR FROM spider_dev.wta_1.matches GROUP BY YEAR ORDER BY count(*)
    DESC LIMIT 1
  tables:
  - matches
  comparison_rules:
  - columns:
    - YEAR
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_463:
  query_name: spider_463
  question: Which year had the most matches?
  golden_query: SELECT YEAR FROM spider_dev.wta_1.matches GROUP BY YEAR ORDER BY count(*)
    DESC LIMIT 1
  tables:
  - matches
  comparison_rules:
  - columns:
    - YEAR
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_464:
  query_name: spider_464
  question: Find winner name and winner rank points of the winner who won the most
    times. Sort by the winner rank points. Display top 1 maximum winner rank points.
  golden_query: select winner_name, winner_rank_points from (select winner_id, max(wins)
    from (SELECT winner_id, count(*) as wins FROM spider_dev.wta_1.matches GROUP BY
    winner_id  ORDER BY count(*)) a group by winner_id order by max(wins) desc limit
    1) aa inner join spider_dev.wta_1.matches bb on aa.winner_id = bb.winner_id order
    by winner_rank_points desc limit 1
  tables:
  - matches
  comparison_rules:
  - columns:
    - winner_name
    - winner_rank_points
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_465:
  query_name: spider_465
  question: What is the name of the winner who has won the most matches, and how many
    rank points does this player have? Sort by the winner rank points. Display top
    1 maximum winner rank points.
  golden_query: select winner_name, winner_rank_points from (select winner_id, max(wins)
    from (SELECT winner_id, count(*) as wins FROM spider_dev.wta_1.matches GROUP BY
    winner_id  ORDER BY count(*)) a group by winner_id order by max(wins) desc limit
    1) aa inner join spider_dev.wta_1.matches bb on aa.winner_id = bb.winner_id order
    by winner_rank_points desc limit 1
  tables:
  - matches
  comparison_rules:
  - columns:
    - winner_name
    - winner_rank_points
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_466:
  query_name: spider_466
  question: Find the winner name of the winner who has the highest rank points and
    participated in the Australian Open tourney. Display first_name, last_name, winner_name
  golden_query: SELECT winner_name FROM spider_dev.wta_1.matches WHERE tourney_name  =  'Australian
    Open' ORDER BY winner_rank_points DESC LIMIT 1
  tables:
  - matches
  comparison_rules:
  - columns:
    - winner_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_467:
  query_name: spider_467
  question: What is the winner name of the winner with the most rank points who participated
    in the Australian Open tournament? Display first_name, last_name, winner_name
  golden_query: WITH australian_open_winners AS ( SELECT winner_id, winner_rank_points FROM spider_dev.wta_1.matches WHERE tourney_name ILIKE '%Australian Open%' ), max_rank_points_winner AS ( SELECT winner_id FROM australian_open_winners WHERE winner_rank_points = ( SELECT MAX(winner_rank_points) FROM australian_open_winners ) ) SELECT first_name, last_name, winner_name FROM spider_dev.wta_1.players AS p INNER JOIN spider_dev.wta_1.matches AS m ON player_id = m.winner_id INNER JOIN max_rank_points_winner AS mr ON m.winner_id = mr.winner_id
  tables:
  - matches
  comparison_rules:
  - columns:
    - first_name
    - last_name
    - winner_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_468:
  query_name: spider_468
  question: find the winner name and looser name of players who played in the match
    with greatest number of minutes.
  golden_query: SELECT winner_name ,  loser_name FROM spider_dev.wta_1.matches ORDER
    BY minutes DESC LIMIT 1
  tables:
  - matches
  comparison_rules:
  - columns:
    - winner_name
    - loser_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_469:
  query_name: spider_469
  question: What are the winner name and looser name of the winner and loser who played
    in the longest match?
  golden_query: SELECT winner_name ,  loser_name FROM spider_dev.wta_1.matches ORDER
    BY minutes DESC LIMIT 1
  tables:
  - matches
  comparison_rules:
  - columns:
    - winner_name
    - loser_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_470:
  query_name: spider_470
  question: Find the average ranking for each player and their first name.
  golden_query: "select b.first_name, a.average_ranking from \n(SELECT avg(ranking)
    as average_ranking , T1.player_id FROM spider_dev.wta_1.players AS T1 JOIN spider_dev.wta_1.rankings
    AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id) a\ninner join spider_dev.wta_1.players
    b on a.player_id = b.player_id"
  tables:
  - players
  - rankings
  comparison_rules:
  - columns:
    - first_name
    - average_ranking
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_471:
  query_name: spider_471
  question: What are the first names of all players, and their average rankings? Display
    as first_name, avg_ranking. Group by player_id and first_name. Sort by player_id
  golden_query: "select b.first_name, a.average_ranking as avg_ranking from \n(SELECT
    avg(ranking) as average_ranking , T1.player_id FROM spider_dev.wta_1.players AS
    T1 JOIN spider_dev.wta_1.rankings AS T2 ON T1.player_id = T2.player_id GROUP BY
    T1.player_id) a\ninner join spider_dev.wta_1.players b on a.player_id = b.player_id
    order by a.player_id"
  tables:
  - players
  - rankings
  comparison_rules:
  - columns:
    - first_name
    - avg_ranking
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_472:
  query_name: spider_472
  question: Find the total ranking points for each player and their first name. Display
    id, first_name, total_ranking_points. Group by player_id and first_name. Sort
    by player_id
  golden_query: SELECT  T1.player_id, T1.first_name,sum(ranking_points) as total_ranking_points  FROM
    spider_dev.wta_1.players AS T1 JOIN spider_dev.wta_1.rankings AS T2 ON T1.player_id  =  T2.player_id
    GROUP BY T1.player_id, T1.first_name order by T1.player_id
  tables:
  - players
  - rankings
  comparison_rules:
  - columns:
    - first_name
    - total_ranking_points
    match: oneof
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_473:
  query_name: spider_473
  question: What are first names of all players, and their total ranking points? Display
    id, first name and total ranking points. Group by player_id and first_name. Sort
    by player_id
  golden_query: SELECT p.player_id, first_name, SUM(ranking_points) AS total_ranking_points FROM spider_dev.wta_1.players AS p LEFT JOIN spider_dev.wta_1.rankings AS r ON p.player_id = r.player_id GROUP BY p.player_id, first_name ORDER BY p.player_id
  tables:
  - players
  - rankings
  comparison_rules:
  - columns:
    - first_name
    - total_ranking_points
    match: oneof
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_474:
  query_name: spider_474
  question: find the number of players for each country. Display as num_pla.
  golden_query: SELECT count(*) as num_pla,  country_code FROM spider_dev.wta_1.players
    GROUP BY country_code
  tables:
  - players
  comparison_rules:
  - columns:
    - num_pla
    - country_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_475:
  query_name: spider_475
  question: How many players are from each country? Display as num_pla.
  golden_query: SELECT count(*) as num_pla,  country_code FROM spider_dev.wta_1.players
    GROUP BY country_code
  tables:
  - players
  comparison_rules:
  - columns:
    - num_pla
    - country_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_476:
  query_name: spider_476
  question: find the code of the country where has the greatest number of players.
  golden_query: SELECT country_code FROM spider_dev.wta_1.players GROUP BY country_code
    ORDER BY count(*) DESC LIMIT 1
  tables:
  - players
  comparison_rules:
  - columns:
    - country_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_477:
  query_name: spider_477
  question: What is the code of the country with the most players?
  golden_query: SELECT country_code FROM spider_dev.wta_1.players GROUP BY country_code
    ORDER BY count(*) DESC LIMIT 1
  tables:
  - players
  comparison_rules:
  - columns:
    - country_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_478:
  query_name: spider_478
  question: Find the codes of countries that have more than 50 players.
  golden_query: SELECT country_code FROM spider_dev.wta_1.players GROUP BY country_code
    HAVING count(*)  >  50
  tables:
  - players
  comparison_rules:
  - columns:
    - country_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_479:
  query_name: spider_479
  question: What are the codes of countries with more than 50 players?
  golden_query: SELECT country_code FROM spider_dev.wta_1.players GROUP BY country_code
    HAVING count(*)  >  50
  tables:
  - players
  comparison_rules:
  - columns:
    - country_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_480:
  query_name: spider_480
  question: Find the total number of tours for each ranking date. Display as tot_tour
  golden_query: SELECT sum(tours) as tot_tour,  ranking_date FROM spider_dev.wta_1.rankings
    GROUP BY ranking_date
  tables:
  - rankings
  comparison_rules:
  - columns:
    - tot_tour
    - ranking_date
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_481:
  query_name: spider_481
  question: How many total tours were there for each ranking date?Display as tot_tour
  golden_query: SELECT sum(tours) as tot_tour,  ranking_date FROM spider_dev.wta_1.rankings
    GROUP BY ranking_date
  tables:
  - rankings
  comparison_rules:
  - columns:
    - tot_tour
    - ranking_date
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_482:
  query_name: spider_482
  question: Find the number of matches happened in each year. Display as num_mat.
  golden_query: SELECT count(*) as num_mat,  YEAR FROM spider_dev.wta_1.matches GROUP
    BY YEAR
  tables:
  - matches
  comparison_rules:
  - columns:
    - num_mat
    - YEAR
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_483:
  query_name: spider_483
  question: How many matches were played in each year?
  golden_query: SELECT count(*) as num_mat,  YEAR FROM spider_dev.wta_1.matches GROUP
    BY YEAR
  tables:
  - matches
  comparison_rules:
  - columns:
    - num_mat
    - YEAR
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_484:
  query_name: spider_484
  question: Find the unique winner name and winner rank of the three youngest winners
    across all matches. winner_age should have details on age. Sort by winner rank
    and show only 3 records.
  golden_query: "WITH youngest_winners AS (\nSELECT\nwinner_id,\nwinner_age\nFROM
    spider_dev.wta_1.matches\nORDER BY\nwinner_age\nLIMIT 3\n)\n\nSELECT DISTINCT\n
    m.winner_name,\nm.winner_rank\nFROM youngest_winners AS yw\nINNER JOIN spider_dev.wta_1.matches
    AS m\nON yw.winner_id = m.winner_id\nORDER BY\nm.winner_rank\nLIMIT 3"
  tables:
  - matches
  comparison_rules:
  - columns:
    - winner_name
    - winner_rank
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_485:
  query_name: spider_485
  question: What are the unique winner name and winner rank of the three youngest
    winners across all matches? winner_age should have details on age. Sort by winner
    rank and show only 3 records.
  golden_query: SELECT DISTINCT winner_name ,  winner_rank FROM spider_dev.wta_1.matches
    ORDER BY winner_rank LIMIT 3
  tables:
  - matches
  comparison_rules:
  - columns:
    - winner_name
    - winner_rank
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_486:
  query_name: spider_486
  question: How many different winners both participated in the WTA Championships
    and were left handed? Display as num_win.
  golden_query: SELECT count(DISTINCT winner_name) as num_win FROM spider_dev.wta_1.matches
    WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
  tables:
  - matches
  comparison_rules:
  - columns:
    - num_win
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_487:
  query_name: spider_487
  question: Find the unique number of left handed winners who participated in the
    WTA Championships. Display as num_win.
  golden_query: SELECT count(DISTINCT winner_name) as num_win FROM spider_dev.wta_1.matches
    WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
  tables:
  - matches
  comparison_rules:
  - columns:
    - num_win
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_488:
  query_name: spider_488
  question: Find the first name, country code and birth date of the winner who has
    the highest rank points in all matches.
  golden_query: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM spider_dev.wta_1.players
    AS T1 JOIN spider_dev.wta_1.matches AS T2 ON T1.player_id  =  T2.winner_id ORDER
    BY T2.winner_rank_points DESC LIMIT 1
  tables:
  - matches
  - players
  comparison_rules:
  - columns:
    - first_name
    - country_code
    - birth_date
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_489:
  query_name: spider_489
  question: What is the unique first name, country code, and birth date of the player
    with the most winner rank points across all matches?
  golden_query: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM spider_dev.wta_1.players
    AS T1 JOIN spider_dev.wta_1.matches AS T2 ON T1.player_id  =  T2.winner_id ORDER
    BY T2.winner_rank_points DESC LIMIT 1
  tables:
  - matches
  - players
  comparison_rules:
  - columns:
    - first_name
    - country_code
    - birth_date
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_490:
  query_name: spider_490
  question: Find the number of players for each hand type. Display as num_pla.
  golden_query: SELECT count(*) as num_pla,  hand FROM spider_dev.wta_1.players GROUP
    BY hand
  tables:
  - players
  comparison_rules:
  - columns:
    - num_pla
    - hand
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_491:
  query_name: spider_491
  question: How many players are there for each hand type? Display as num_pla.
  golden_query: SELECT count(*) as num_pla,  hand FROM spider_dev.wta_1.players GROUP
    BY hand
  tables:
  - players
  comparison_rules:
  - columns:
    - num_pla
    - hand
    match: exact
  auto_select_schema: 'false'
  schemas:
  - wta_1
spider_492:
  query_name: spider_492
  question: How many ships ended up being 'Captured'? Display as num_ships.
  golden_query: SELECT count(*) as num_ships FROM spider_dev.battle_death.ship WHERE
    disposition_of_ship  =  'Captured'
  tables:
  - ship
  comparison_rules:
  - columns:
    - num_ships
    match: exact
  auto_select_schema: 'false'
  schemas:
  - battle_death
spider_493:
  query_name: spider_493
  question: List the name and tonnage ordered by in descending alphaetical order for
    the names.
  golden_query: SELECT name ,  tonnage FROM spider_dev.battle_death.ship ORDER BY
    name DESC
  tables:
  - ship
  comparison_rules:
  - columns:
    - name
    - tonnage
    match: exact
  auto_select_schema: 'false'
  schemas:
  - battle_death
spider_494:
  query_name: spider_494
  question: List the name, date and result of each battle.
  golden_query: SELECT name ,  date FROM spider_dev.battle_death.battle
  tables:
  - battle
  comparison_rules:
  - columns:
    - name
    - date
    match: exact
  auto_select_schema: 'false'
  schemas:
  - battle_death
spider_495:
  query_name: spider_495
  question: What is maximum and minimum death toll caused each time? Display as max_killed,
    min_killed
  golden_query: SELECT max(killed) as max_killed,  min(killed) as min_killed FROM
    spider_dev.battle_death.death
  tables:
  - death
  comparison_rules:
  - columns:
    - max_killed
    - min_killed
    match: exact
  auto_select_schema: 'false'
  schemas:
  - battle_death
spider_496:
  query_name: spider_496
  question: What is the average number of injuries caused each time? Display it as
    avg_injured
  golden_query: SELECT avg(injured) as avg_injured FROM spider_dev.battle_death.death
  tables:
  - death
  comparison_rules:
  - columns:
    - avg_injured
    match: exact
  auto_select_schema: 'false'
  schemas:
  - battle_death
spider_497:
  query_name: spider_497
  question: What are the death and injury situations caused by the ship with tonnage
    't'?
  golden_query: SELECT T1.killed ,  T1.injured FROM spider_dev.battle_death.death
    AS T1 JOIN spider_dev.battle_death.ship AS t2 ON T1.caused_by_ship_id  =  T2.id
    WHERE T2.tonnage  =  't'
  tables:
  - death
  - ship
  comparison_rules:
  - columns:
    - killed
    - injured
    match: exact
  auto_select_schema: 'false'
  schemas:
  - battle_death
spider_498:
  query_name: spider_498
  question: What are the name and results of the battles when the bulgarian commander
    is not 'Boril'
  golden_query: SELECT name ,  RESULT FROM spider_dev.battle_death.battle WHERE bulgarian_commander
    != 'Boril'
  tables:
  - battle
  comparison_rules:
  - columns:
    - name
    - RESULT
    match: exact
  auto_select_schema: 'false'
  schemas:
  - battle_death
spider_499:
  query_name: spider_499
  question: What are the different ids and names of the battles that lost any 'Brig'
    type ships?
  golden_query: SELECT DISTINCT T1.id ,  T1.name FROM spider_dev.battle_death.battle
    AS T1 JOIN spider_dev.battle_death.ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE
    T2.ship_type  =  'Brig'
  tables:
  - battle
  - ship
  comparison_rules:
  - columns:
    - id
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - battle_death
spider_500:
  query_name: spider_500
  question: What are the ids and names of the battles that led to more than 10 people
    killed in total.
  golden_query: SELECT T1.id ,  T1.name FROM spider_dev.battle_death.battle AS T1
    JOIN spider_dev.battle_death.ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN spider_dev.battle_death.death
    AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id ,  T1.name HAVING sum(T3.killed)  >  10
  tables:
  - battle
  - death
  - ship
  comparison_rules:
  - columns:
    - id
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - battle_death
spider_501:
  query_name: spider_501
  question: What is the ship id and name that caused most total injuries?
  golden_query: "with total_injuries as (\n    SELECT\n        caused_by_ship_id,\n\
    \        SUM(injured) AS total_injuries\n    FROM spider_dev.battle_death.death\n\
    \    GROUP BY\n        caused_by_ship_id\n)\nSELECT\n    s.id,\n    s.name\nFROM
    spider_dev.battle_death.ship AS s\nINNER JOIN (SELECT * from total_injuries) AS
    d\n    ON s.id = d.caused_by_ship_id\nWHERE\n    d.total_injuries = (\n      \
    \  SELECT MAX(total_injuries)\n        FROM (SELECT * from total_injuries)\n \
    \   )"
  tables:
  - death
  - ship
  comparison_rules:
  - columns:
    - id
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - battle_death
spider_502:
  query_name: spider_502
  question: What are the distinct battle names which are between bulgarian commander
    'Kaloyan' and latin commander 'Baldwin I'?
  golden_query: SELECT name FROM spider_dev.battle_death.battle WHERE bulgarian_commander  =  'Kaloyan'
    AND latin_commander  =  'Baldwin I'
  tables:
  - battle
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - battle_death
spider_503:
  query_name: spider_503
  question: How many different results are there for the battles? Display as num_res.
  golden_query: SELECT count(DISTINCT RESULT) as num_res FROM spider_dev.battle_death.battle
  tables:
  - battle
  comparison_rules:
  - columns:
    - num_res
    match: exact
  auto_select_schema: 'false'
  schemas:
  - battle_death
spider_504:
  query_name: spider_504
  question: How many battles are there which did not loose '225' tonnage ships?. Display
    as num_res.
  golden_query: "WITH filtered_ships AS (\n    SELECT *\n    FROM spider_dev.battle_death.ship\n\
    \    WHERE\n        tonnage != '225'\n)\n\nSELECT COUNT(DISTINCT b.id) as num_res
    \nFROM spider_dev.battle_death.battle AS b\nINNER JOIN filtered_ships AS fs\n\
    \    ON b.id = fs.lost_in_battle"
  tables:
  - battle
  - ship
  comparison_rules:
  - columns:
    - num_res
    match: exact
  auto_select_schema: 'false'
  schemas:
  - battle_death
spider_505:
  query_name: spider_505
  question: List unique name and date the battle that has lost the ship named 'Lettice'
    and the ship named 'HMS Atalanta'
  golden_query: SELECT distinct T1.name ,  T1.date FROM spider_dev.battle_death.battle
    AS T1 JOIN spider_dev.battle_death.ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE
    T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM spider_dev.battle_death.battle
    AS T1 JOIN spider_dev.battle_death.ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE
    T2.name  =  'HMS Atalanta'
  tables:
  - battle
  - ship
  comparison_rules:
  - columns:
    - name
    - date
    match: exact
  auto_select_schema: 'false'
  schemas:
  - battle_death
spider_506:
  query_name: spider_506
  question: Show names, results and bulgarian commanders of the battles with no ships
    lost in the 'English Channel'.
  golden_query: SELECT name ,  RESULT ,  bulgarian_commander FROM spider_dev.battle_death.battle
    EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM spider_dev.battle_death.battle
    AS T1 JOIN spider_dev.battle_death.ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE
    T2.location  =  'English Channel'
  tables:
  - battle
  - ship
  comparison_rules:
  - columns:
    - name
    - RESULT
    - bulgarian_commander
    match: exact
  auto_select_schema: 'false'
  schemas:
  - battle_death
spider_507:
  query_name: spider_507
  question: What are the notes of the death events which has substring 'East'?
  golden_query: SELECT note FROM spider_dev.battle_death.death WHERE note LIKE '%East%'
  tables:
  - death
  comparison_rules:
  - columns:
    - note
    match: exact
  auto_select_schema: 'false'
  schemas:
  - battle_death
spider_508:
  query_name: spider_508
  question: what are all the addresses including line 1 and line 2?
  golden_query: SELECT line_1 ,  line_2 FROM spider_dev.student_transcripts_tracking.addresses
  tables:
  - addresses
  comparison_rules:
  - columns:
    - line_1
    - line_2
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_509:
  query_name: spider_509
  question: What is the first and second line for all addresses?
  golden_query: SELECT line_1 ,  line_2 FROM spider_dev.student_transcripts_tracking.addresses
  tables:
  - addresses
  comparison_rules:
  - columns:
    - line_1
    - line_2
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_510:
  query_name: spider_510
  question: How many courses in total are listed? Display as num_cou
  golden_query: SELECT count(*) as num_cou FROM spider_dev.student_transcripts_tracking.Courses
  tables:
  - Courses
  comparison_rules:
  - columns:
    - num_cou
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_511:
  query_name: spider_511
  question: How many courses are there? Display as num_cou
  golden_query: SELECT count(*) as num_cou FROM spider_dev.student_transcripts_tracking.Courses
  tables:
  - Courses
  comparison_rules:
  - columns:
    - num_cou
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_512:
  query_name: spider_512
  question: How is the math course described?
  golden_query: SELECT course_description FROM spider_dev.student_transcripts_tracking.Courses
    WHERE course_name  =  'math'
  tables:
  - Courses
  comparison_rules:
  - columns:
    - course_description
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_513:
  query_name: spider_513
  question: What are the descriptions for all the math courses?
  golden_query: SELECT course_description FROM spider_dev.student_transcripts_tracking.Courses
    WHERE course_name  =  'math'
  tables:
  - Courses
  comparison_rules:
  - columns:
    - course_description
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_514:
  query_name: spider_514
  question: What is the zip code of the address in the city Port Chelsea?
  golden_query: SELECT zip_postcode FROM spider_dev.student_transcripts_tracking.Addresses
    WHERE city  =  'Port Chelsea'
  tables:
  - Addresses
  comparison_rules:
  - columns:
    - zip_postcode
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_515:
  query_name: spider_515
  question: What is the zip code for Port Chelsea?
  golden_query: SELECT zip_postcode FROM spider_dev.student_transcripts_tracking.Addresses
    WHERE city  =  'Port Chelsea'
  tables:
  - Addresses
  comparison_rules:
  - columns:
    - zip_postcode
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_516:
  query_name: spider_516
  question: Which department offers the most number of degrees? List department name
    and id.
  golden_query: SELECT T2.department_name ,  T1.department_id FROM spider_dev.student_transcripts_tracking.Degree_Programs
    AS T1 JOIN spider_dev.student_transcripts_tracking.Departments AS T2 ON T1.department_id  =  T2.department_id
    GROUP BY T2.department_name ,  T1.department_id ORDER BY count(*) DESC LIMIT 1
  tables:
  - Departments
  - Degree_Programs
  comparison_rules:
  - columns:
    - department_name
    - department_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_517:
  query_name: spider_517
  question: What is the name and id of the department with the most number of degrees
    ?
  golden_query: select t2.department_name ,  t1.department_id from spider_dev.student_transcripts_tracking.degree_programs
    as t1 join spider_dev.student_transcripts_tracking.departments as t2 on t1.department_id  =  t2.department_id
    group by t2.department_name ,  t1.department_id order by count(*) desc limit 1
  tables:
  - degree_programs
  - departments
  comparison_rules:
  - columns:
    - department_name
    - department_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_518:
  query_name: spider_518
  question: How many departments offer any degree? Display as num_dep.
  golden_query: SELECT count(DISTINCT department_id) as num_dep FROM spider_dev.student_transcripts_tracking.Degree_Programs
  tables:
  - Degree_Programs
  comparison_rules:
  - columns:
    - num_dep
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_519:
  query_name: spider_519
  question: How many different departments offer degrees?  Display as num_dep.
  golden_query: SELECT count(DISTINCT department_id) as num_dep FROM spider_dev.student_transcripts_tracking.Degree_Programs
  tables:
  - Degree_Programs
  comparison_rules:
  - columns:
    - num_dep
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_520:
  query_name: spider_520
  question: How many different degree names are offered? Display as num_deg.
  golden_query: SELECT count(DISTINCT degree_summary_name) as num_deg FROM spider_dev.student_transcripts_tracking.Degree_Programs
  tables:
  - Degree_Programs
  comparison_rules:
  - columns:
    - num_deg
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_521:
  query_name: spider_521
  question: How many different degree names are offered?Display as num_deg.
  golden_query: SELECT count(DISTINCT degree_summary_name) as num_deg FROM spider_dev.student_transcripts_tracking.Degree_Programs
  tables:
  - Degree_Programs
  comparison_rules:
  - columns:
    - num_deg
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_522:
  query_name: spider_522
  question: How many degrees does the engineering department offer? Display as num_deg.
  golden_query: SELECT count(*) as num_deg FROM spider_dev.student_transcripts_tracking.Departments
    AS T1 JOIN spider_dev.student_transcripts_tracking.Degree_Programs AS T2 ON T1.department_id  =  T2.department_id
    WHERE T1.department_name  =  'engineer'
  tables:
  - Departments
  - Degree_Programs
  comparison_rules:
  - columns:
    - num_deg
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_523:
  query_name: spider_523
  question: How many degrees does the engineering department have? Display as num_deg
  golden_query: SELECT count(*) as num_deg FROM spider_dev.student_transcripts_tracking.Departments
    AS T1 JOIN spider_dev.student_transcripts_tracking.Degree_Programs AS T2 ON T1.department_id  =  T2.department_id
    WHERE T1.department_name  =  'engineer'
  tables:
  - Departments
  - Degree_Programs
  comparison_rules:
  - columns:
    - num_deg
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_524:
  query_name: spider_524
  question: What are the names and descriptions of all the sections?
  golden_query: SELECT section_name ,  section_description FROM spider_dev.student_transcripts_tracking.Sections
  tables:
  - Sections
  comparison_rules:
  - columns:
    - section_name
    - section_description
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_525:
  query_name: spider_525
  question: What are the names and descriptions for all the sections?
  golden_query: SELECT section_name ,  section_description FROM spider_dev.student_transcripts_tracking.Sections
  tables:
  - Sections
  comparison_rules:
  - columns:
    - section_name
    - section_description
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_526:
  query_name: spider_526
  question: What are the names and id of courses having at most 2 sections?
  golden_query: SELECT T1.course_name ,  T1.course_id FROM spider_dev.student_transcripts_tracking.Courses
    AS T1 JOIN spider_dev.student_transcripts_tracking.Sections AS T2 ON T1.course_id  =  T2.course_id
    GROUP BY T1.course_name ,  T1.course_id HAVING count(*)  <=  2
  tables:
  - Sections
  - Courses
  comparison_rules:
  - columns:
    - course_name
    - course_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_527:
  query_name: spider_527
  question: What are the names and ids of every course with less than 2 sections?
  golden_query: SELECT T1.course_name ,  T1.course_id FROM spider_dev.student_transcripts_tracking.Courses
    AS T1 JOIN spider_dev.student_transcripts_tracking.Sections AS T2 ON T1.course_id  =  T2.course_id
    GROUP BY T1.course_name ,  T1.course_id HAVING count(*)  <  2
  tables:
  - Sections
  - Courses
  comparison_rules:
  - columns:
    - course_name
    - course_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_528:
  query_name: spider_528
  question: List the section_name in reversed lexicographical order.
  golden_query: SELECT section_name FROM spider_dev.student_transcripts_tracking.Sections
    ORDER BY section_name DESC
  tables:
  - Sections
  comparison_rules:
  - columns:
    - section_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_529:
  query_name: spider_529
  question: What are the names of the sections in reverse alphabetical order?
  golden_query: SELECT section_name FROM spider_dev.student_transcripts_tracking.Sections
    ORDER BY section_name DESC
  tables:
  - Sections
  comparison_rules:
  - columns:
    - section_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_530:
  query_name: spider_530
  question: What is the semester which most student registered in? Show both the name
    and the id.
  golden_query: SELECT T1.semester_name ,  T1.semester_id FROM spider_dev.student_transcripts_tracking.Semesters
    AS T1 JOIN spider_dev.student_transcripts_tracking.Student_Enrolment AS T2 ON
    T1.semester_id  =  T2.semester_id GROUP BY T1.semester_name ,  T1.semester_id
    ORDER BY count(*) DESC LIMIT 1
  tables:
  - Semesters
  - Student_Enrolment
  comparison_rules:
  - columns:
    - semester_name
    - semester_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_531:
  query_name: spider_531
  question: For each semester, what is the name and id of the one with the most students
    registered?
  golden_query: SELECT T1.semester_name ,  T1.semester_id FROM spider_dev.student_transcripts_tracking.Semesters
    AS T1 JOIN spider_dev.student_transcripts_tracking.Student_Enrolment AS T2 ON
    T1.semester_id  =  T2.semester_id GROUP BY T1.semester_name ,  T1.semester_id
    ORDER BY count(*) DESC LIMIT 1
  tables:
  - Semesters
  - Student_Enrolment
  comparison_rules:
  - columns:
    - semester_name
    - semester_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_532:
  query_name: spider_532
  question: What is the description of the department whose name has the substring
    'the computer'?
  golden_query: SELECT department_description FROM spider_dev.student_transcripts_tracking.Departments
    WHERE department_name ILIKE '%the computer%'
  tables:
  - Departments
  comparison_rules:
  - columns:
    - department_description
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_533:
  query_name: spider_533
  question: What is the department description for the one whose name has the word
    computer?
  golden_query: SELECT department_description FROM spider_dev.student_transcripts_tracking.Departments
    WHERE department_name LIKE '%computer%'
  tables:
  - Departments
  comparison_rules:
  - columns:
    - department_description
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_534:
  query_name: spider_534
  question: Who are enrolled in 2 degree programs in one semester? List the first
    name, middle name and last name and the id.
  golden_query: "SELECT first_name ,  middle_name ,  last_name ,  student_id FROM
    spider_dev.student_transcripts_tracking.Students where student_id in (\nSELECT\
    \   T1.student_id FROM spider_dev.student_transcripts_tracking.Students AS T1
    JOIN spider_dev.student_transcripts_tracking.Student_Enrolment AS T2 ON T1.student_id\
    \  =  T2.student_id GROUP BY T1.student_id, T2.semester_id HAVING count(*)  =\
    \  2)"
  tables:
  - Students
  - Student_Enrolment
  comparison_rules:
  - columns:
    - first_name
    - middle_name
    - last_name
    - student_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_535:
  query_name: spider_535
  question: What are the first, middle, and last names, along with the ids, of all
    students who enrolled in 2 degree programs in one semester?
  golden_query: "SELECT first_name ,  middle_name ,  last_name ,  student_id FROM
    spider_dev.student_transcripts_tracking.Students where student_id in (\nSELECT\
    \   T1.student_id FROM spider_dev.student_transcripts_tracking.Students AS T1
    JOIN spider_dev.student_transcripts_tracking.Student_Enrolment AS T2 ON T1.student_id\
    \  =  T2.student_id GROUP BY T1.student_id, T2.semester_id HAVING count(*)  =\
    \  2)"
  tables:
  - Students
  - Student_Enrolment
  comparison_rules:
  - columns:
    - first_name
    - middle_name
    - last_name
    - student_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_536:
  query_name: spider_536
  question: Who is enrolled in a Bachelor degree program? List the distinct first
    name, middle name, last name.
  golden_query: SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM
    spider_dev.student_transcripts_tracking.Students AS T1 JOIN spider_dev.student_transcripts_tracking.Student_Enrolment
    AS T2 ON T1.student_id  =  T2.student_id JOIN spider_dev.student_transcripts_tracking.Degree_Programs
    AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'
  tables:
  - Degree_Programs
  - Students
  - Student_Enrolment
  comparison_rules:
  - columns:
    - first_name
    - middle_name
    - last_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_537:
  query_name: spider_537
  question: What are the unique first, middle, and last names for everybody enrolled
    in a Bachelors program?
  golden_query: SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM
    spider_dev.student_transcripts_tracking.Students AS T1 JOIN spider_dev.student_transcripts_tracking.Student_Enrolment
    AS T2 ON T1.student_id  =  T2.student_id JOIN spider_dev.student_transcripts_tracking.Degree_Programs
    AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'
  tables:
  - Degree_Programs
  - Students
  - Student_Enrolment
  comparison_rules:
  - columns:
    - first_name
    - middle_name
    - last_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_538:
  query_name: spider_538
  question: Find the kind of program which most number of students are enrolled in?
  golden_query: SELECT T1.degree_summary_name FROM spider_dev.student_transcripts_tracking.Degree_Programs
    AS T1 JOIN spider_dev.student_transcripts_tracking.Student_Enrolment AS T2 ON
    T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name
    ORDER BY count(*) DESC LIMIT 1
  tables:
  - Degree_Programs
  - Student_Enrolment
  comparison_rules:
  - columns:
    - degree_summary_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_539:
  query_name: spider_539
  question: What is the degree summary name that has the most number of students enrolled?
  golden_query: SELECT T1.degree_summary_name FROM spider_dev.student_transcripts_tracking.Degree_Programs
    AS T1 JOIN spider_dev.student_transcripts_tracking.Student_Enrolment AS T2 ON
    T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name
    ORDER BY count(*) DESC LIMIT 1
  tables:
  - Degree_Programs
  - Student_Enrolment
  comparison_rules:
  - columns:
    - degree_summary_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_540:
  query_name: spider_540
  question: Find the program which most number of students are enrolled in. List both
    the id and the degree summary name. Show 1 row.
  golden_query: SELECT T1.degree_program_id ,  T1.degree_summary_name FROM spider_dev.student_transcripts_tracking.Degree_Programs
    AS T1 JOIN spider_dev.student_transcripts_tracking.Student_Enrolment AS T2 ON
    T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ,  T1.degree_summary_name
    ORDER BY count(*) DESC LIMIT 1
  tables:
  - Degree_Programs
  - Student_Enrolment
  comparison_rules:
  - columns:
    - degree_program_id
    - degree_summary_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_541:
  query_name: spider_541
  question: What is the program id and the summary of the degree that has the most
    students enrolled? Display as degree_program_id and degree_summary_description
  golden_query: "WITH student_count AS (\nSELECT\ndegree_program_id,\nCOUNT(student_id)
    AS student_num\nFROM spider_dev.student_transcripts_tracking.student_enrolment\n
    GROUP BY\ndegree_program_id\n)\n\nSELECT\ndp.degree_program_id,\ndp.degree_summary_description\n
    FROM student_count AS sc\nINNER JOIN spider_dev.student_transcripts_tracking.degree_programs
    AS dp\nON sc.degree_program_id = dp.degree_program_id\nORDER BY\nsc.student_num
    DESC\nLIMIT 1"
  tables:
  - student_enrolment
  - degree_programs
  comparison_rules:
  - columns:
    - degree_program_id
    - degree_summary_description
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_542:
  query_name: spider_542
  question: Which student has enrolled for the most times in any program? List the
    id, first name, middle name, last name, the number of enrollments and student
    id.
  golden_query: "WITH ENROLLMENTCOUNTS AS (SELECT STUDENT_ID, COUNT(*) AS NUM_ENROLLMENTS FROM SPIDER_DEV.STUDENT_TRANSCRIPTS_TRACKING.STUDENT_ENROLMENT GROUP BY STUDENT_ID), MAXENROLLMENT AS (SELECT STUDENT_ID, NUM_ENROLLMENTS FROM ENROLLMENTCOUNTS ORDER BY NUM_ENROLLMENTS DESC LIMIT 1) SELECT S.STUDENT_ID, FIRST_NAME, MIDDLE_NAME, LAST_NAME, NUM_ENROLLMENTS FROM MAXENROLLMENT AS ME INNER JOIN SPIDER_DEV.STUDENT_TRANSCRIPTS_TRACKING.STUDENTS AS S ON ME.STUDENT_ID = S.STUDENT_ID"
  tables:
  - student_enrolment
  - degree_programs
  comparison_rules:
  - columns:
    - student_id
    - first_name
    - middle_name
    - last_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_543:
  query_name: spider_543
  question: What is the first, middle, and last name, along with the id and number
    of enrollments, for the student who enrolled the most in any program? show 1 row.
  golden_query: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name
    ,  count(*) ,  T1.student_id FROM spider_dev.student_transcripts_tracking.Students
    AS T1 JOIN spider_dev.student_transcripts_tracking.Student_Enrolment AS T2 ON
    T1.student_id  =  T2.student_id GROUP BY T1.student_id ,  T1.first_name ,  T1.middle_name
    ,  T1.last_name ORDER BY count(*) DESC LIMIT 1
  tables:
  - Students
  - Student_Enrolment
  comparison_rules:
  - columns:
    - student_id
    - first_name
    - middle_name
    - last_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_544:
  query_name: spider_544
  question: Which semesters do not have any student enrolled? List the semester name.
  golden_query: SELECT semester_name FROM spider_dev.student_transcripts_tracking.Semesters
    WHERE semester_id NOT IN( SELECT semester_id FROM spider_dev.student_transcripts_tracking.Student_Enrolment
    )
  tables:
  - Semesters
  - Student_Enrolment
  comparison_rules:
  - columns:
    - semester_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_545:
  query_name: spider_545
  question: What is the name of the semester with no students enrolled?
  golden_query: SELECT semester_name FROM spider_dev.student_transcripts_tracking.Semesters
    WHERE semester_id NOT IN( SELECT semester_id FROM spider_dev.student_transcripts_tracking.Student_Enrolment
    )
  tables:
  - Semesters
  - Student_Enrolment
  comparison_rules:
  - columns:
    - semester_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_546:
  query_name: spider_546
  question: What are all the course names of the courses which ever have students
    enrolled in?
  golden_query: SELECT DISTINCT T1.course_name FROM spider_dev.student_transcripts_tracking.Courses
    AS T1 JOIN spider_dev.student_transcripts_tracking.Student_Enrolment_Courses AS
    T2 ON T1.course_id  =  T2.course_id
  tables:
  - Student_Enrolment_Courses
  - Courses
  comparison_rules:
  - columns:
    - course_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_547:
  query_name: spider_547
  question: What are the names of all courses that have some students enrolled?
  golden_query: SELECT DISTINCT T1.course_name FROM spider_dev.student_transcripts_tracking.Courses
    AS T1 JOIN spider_dev.student_transcripts_tracking.Student_Enrolment_Courses AS
    T2 ON T1.course_id  =  T2.course_id
  tables:
  - Student_Enrolment_Courses
  - Courses
  comparison_rules:
  - columns:
    - course_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_548:
  query_name: spider_548
  question: What's the name of the course with most number of enrollments? Sort by
    student_count and course name. Show me one row.
  golden_query: SELECT  T1.course_name FROM spider_dev.student_transcripts_tracking.Courses
    AS T1 JOIN spider_dev.student_transcripts_tracking.Student_Enrolment_Courses AS
    T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*)
    DESC, T1.course_name  LIMIT 1
  tables:
  - Student_Enrolment_Courses
  - Courses
  comparison_rules:
  - columns:
    - course_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_549:
  query_name: spider_549
  question: What is the name of the course with the most students enrolled? Sort by
    student_count and course name. Show me one row.
  golden_query: SELECT  T1.course_name FROM spider_dev.student_transcripts_tracking.Courses
    AS T1 JOIN spider_dev.student_transcripts_tracking.Student_Enrolment_Courses AS
    T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*)
    DESC, T1.course_name  LIMIT 1
  tables:
  - Student_Enrolment_Courses
  - Courses
  comparison_rules:
  - columns:
    - course_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_550:
  query_name: spider_550
  question: Find the last name of the students who currently live in the state of
    'NorthCarolina' but have not registered in any degree program.
  golden_query: SELECT T1.last_name FROM spider_dev.student_transcripts_tracking.Students
    AS T1 JOIN spider_dev.student_transcripts_tracking.Addresses AS T2 ON T1.current_address_id  =  T2.address_id
    WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name
    FROM spider_dev.student_transcripts_tracking.Students AS T3 JOIN spider_dev.student_transcripts_tracking.Student_Enrolment
    AS T4 ON T3.student_id  =  T4.student_id
  tables:
  - Addresses
  - Students
  - Student_Enrolment
  comparison_rules:
  - columns:
    - last_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_551:
  query_name: spider_551
  question: What are the last name of the students who live in 'NorthCarolina' but
    have not registered in any degree programs?
  golden_query: SELECT T1.last_name FROM spider_dev.student_transcripts_tracking.Students
    AS T1 JOIN spider_dev.student_transcripts_tracking.Addresses AS T2 ON T1.current_address_id  =  T2.address_id
    WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name
    FROM spider_dev.student_transcripts_tracking.Students AS T3 JOIN spider_dev.student_transcripts_tracking.Student_Enrolment
    AS T4 ON T3.student_id  =  T4.student_id
  tables:
  - Addresses
  - Students
  - Student_Enrolment
  comparison_rules:
  - columns:
    - last_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_552:
  query_name: spider_552
  question: Show the date and id of the transcript with at least 2 course results.
  golden_query: SELECT T2.transcript_date ,  T1.transcript_id FROM spider_dev.student_transcripts_tracking.Transcript_Contents
    AS T1 JOIN spider_dev.student_transcripts_tracking.Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id
    GROUP BY T2.transcript_date ,  T1.transcript_id HAVING count(*)  >=  2
  tables:
  - Transcripts
  - Transcript_Contents
  comparison_rules:
  - columns:
    - transcript_date
    - transcript_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_553:
  query_name: spider_553
  question: What is the date and id of the transcript with at least 2 courses listed?
  golden_query: SELECT T2.transcript_date ,  T1.transcript_id FROM spider_dev.student_transcripts_tracking.Transcript_Contents
    AS T1 JOIN spider_dev.student_transcripts_tracking.Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id
    GROUP BY T2.transcript_date ,  T1.transcript_id HAVING count(*)  >=  2
  tables:
  - Transcripts
  - Transcript_Contents
  comparison_rules:
  - columns:
    - transcript_date
    - transcript_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_554:
  query_name: spider_554
  question: What is the phone number of the man with the first name Timmothy and the
    last name Ward?
  golden_query: SELECT cell_mobile_number FROM spider_dev.student_transcripts_tracking.Students
    WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'
  tables:
  - Students
  comparison_rules:
  - columns:
    - cell_mobile_number
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_555:
  query_name: spider_555
  question: What is the mobile phone number of the student named Timmothy Ward ?
  golden_query: select cell_mobile_number from spider_dev.student_transcripts_tracking.students
    where first_name  ILIKE  'timmothy' and last_name ILIKE 'ward'
  tables:
  - students
  comparison_rules:
  - columns:
    - cell_mobile_number
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_556:
  query_name: spider_556
  question: Who is the first student to register? List the first name, middle name
    and last name.
  golden_query: SELECT first_name ,  middle_name ,  last_name FROM spider_dev.student_transcripts_tracking.Students
    ORDER BY date_first_registered ASC LIMIT 1
  tables:
  - Students
  comparison_rules:
  - columns:
    - first_name
    - middle_name
    - last_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_557:
  query_name: spider_557
  question: What is the first, middle, and last name of the first student to register?
  golden_query: SELECT first_name ,  middle_name ,  last_name FROM spider_dev.student_transcripts_tracking.Students
    ORDER BY date_first_registered ASC LIMIT 1
  tables:
  - Students
  comparison_rules:
  - columns:
    - first_name
    - middle_name
    - last_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_558:
  query_name: spider_558
  question: Who is the earliest graduate of the school? List the first name, middle
    name and last name.
  golden_query: SELECT first_name ,  middle_name ,  last_name FROM spider_dev.student_transcripts_tracking.Students
    ORDER BY date_left ASC LIMIT 1
  tables:
  - Students
  comparison_rules:
  - columns:
    - first_name
    - middle_name
    - last_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_559:
  query_name: spider_559
  question: What is the first, middle, and last name of the earliest school graduate?
  golden_query: SELECT first_name ,  middle_name ,  last_name FROM spider_dev.student_transcripts_tracking.Students
    ORDER BY date_left ASC LIMIT 1
  tables:
  - Students
  comparison_rules:
  - columns:
    - first_name
    - middle_name
    - last_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_560:
  query_name: spider_560
  question: Whose permanent address is different from his or her current address?
    List his or her first name.
  golden_query: SELECT first_name FROM spider_dev.student_transcripts_tracking.Students
    WHERE current_address_id != permanent_address_id
  tables:
  - Students
  comparison_rules:
  - columns:
    - first_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_561:
  query_name: spider_561
  question: What is the first name of the student whose permanent address is different
    from his or her current one?
  golden_query: SELECT first_name FROM spider_dev.student_transcripts_tracking.Students
    WHERE current_address_id != permanent_address_id
  tables:
  - Students
  comparison_rules:
  - columns:
    - first_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_562:
  query_name: spider_562
  question: Which address holds the most number of students currently? List the address
    id and all lines.
  golden_query: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM spider_dev.student_transcripts_tracking.Addresses
    AS T1 JOIN spider_dev.student_transcripts_tracking.Students AS T2 ON T1.address_id  =  T2.current_address_id
    GROUP BY T1.address_id ,  T1.line_1 ,  T1.line_2 ORDER BY count(*) DESC LIMIT
    1
  tables:
  - Addresses
  - Students
  comparison_rules:
  - columns:
    - address_id
    - line_1
    - line_2
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_563:
  query_name: spider_563
  question: What is the id, line 1, and line 2 of the address with the most students?
  golden_query: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM spider_dev.student_transcripts_tracking.Addresses
    AS T1 JOIN spider_dev.student_transcripts_tracking.Students AS T2 ON T1.address_id  =  T2.current_address_id
    GROUP BY T1.address_id ,  T1.line_1 ,  T1.line_2 ORDER BY count(*) DESC LIMIT
    1
  tables:
  - Addresses
  - Students
  comparison_rules:
  - columns:
    - address_id
    - line_1
    - line_2
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_564:
  query_name: spider_564
  question: On average, when were the transcripts printed? Display as avg_trans
  golden_query: SELECT avg(transcript_date) as avg_trans FROM spider_dev.student_transcripts_tracking.Transcripts
  tables:
  - Transcripts
  comparison_rules:
  - columns:
    - avg_trans
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_565:
  query_name: spider_565
  question: What is the average transcript date?Display as avg_trans
  golden_query: SELECT avg(transcript_date) as avg_trans FROM spider_dev.student_transcripts_tracking.Transcripts
  tables:
  - Transcripts
  comparison_rules:
  - columns:
    - avg_trans
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_566:
  query_name: spider_566
  question: When is the first transcript released? List the date and details.
  golden_query: SELECT transcript_date ,  other_details FROM spider_dev.student_transcripts_tracking.Transcripts
    ORDER BY transcript_date ASC LIMIT 1
  tables:
  - Transcripts
  comparison_rules:
  - columns:
    - transcript_date
    - other_details
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_567:
  query_name: spider_567
  question: What is the earliest date of a transcript release, and what details can
    you tell me?
  golden_query: SELECT transcript_date ,  other_details FROM spider_dev.student_transcripts_tracking.Transcripts
    ORDER BY transcript_date ASC LIMIT 1
  tables:
  - Transcripts
  comparison_rules:
  - columns:
    - transcript_date
    - other_details
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_568:
  query_name: spider_568
  question: How many transcripts are released? Display as num_tra
  golden_query: SELECT count(*) as num_tra FROM spider_dev.student_transcripts_tracking.Transcripts
  tables:
  - Transcripts
  comparison_rules:
  - columns:
    - num_tra
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_569:
  query_name: spider_569
  question: How many transcripts are listed?Display as num_tra
  golden_query: SELECT count(*) as num_tra FROM spider_dev.student_transcripts_tracking.Transcripts
  tables:
  - Transcripts
  comparison_rules:
  - columns:
    - num_tra
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_570:
  query_name: spider_570
  question: What is the last transcript release date? Display as transcript_date, transcript_date_converted.
  golden_query: SELECT transcript_date, TRY_TO_TIMESTAMP(transcript_date) AS transcript_date_converted FROM spider_dev.student_transcripts_tracking.Transcripts  
    ORDER BY transcript_date DESC LIMIT 1
  tables:
  - Transcripts
  comparison_rules:
  - columns:
    - transcript_date
    - transcript_date_converted
    match: oneof
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_571:
  query_name: spider_571
  question: When was the last transcript released? Display as transcript_date, last_transcript_date.
  golden_query: SELECT transcript_date, TRY_TO_TIMESTAMP(transcript_date) AS last_transcript_date FROM spider_dev.student_transcripts_tracking.Transcripts 
    ORDER BY transcript_date DESC LIMIT 1
  tables:
  - Transcripts
  comparison_rules:
  - columns:
    - transcript_date
    - last_transcript_date
    match: oneof
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_572:
  query_name: spider_572
  question: How many times at most can a course enrollment result show in different
    transcripts? Also show the course enrollment id. Display as student_enrolment_id,
    max_course_count
  golden_query: SELECT student_course_id, count(*) as max_course_count FROM spider_dev.student_transcripts_tracking.Transcript_Contents
    GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
  tables:
  - Transcript_Contents
  comparison_rules:
  - columns:
    - student_course_id
    - max_course_count
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_573:
  query_name: spider_573
  question: What is the maximum number of times that a course shows up in different
    transcripts and what is that course's enrollment id? Display as student_enrolment_id,
    max_course_count
  golden_query: SELECT student_course_id, count(*) as max_course_count FROM spider_dev.student_transcripts_tracking.Transcript_Contents
    GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
  tables:
  - Transcript_Contents
  comparison_rules:
  - columns:
    - student_course_id
    - max_course_count
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_574:
  query_name: spider_574
  question: Show the date of the transcript which shows the least number of results,
    also list the id. Sort by number of results. Show 1 row.
  golden_query: SELECT T2.transcript_date ,  T1.transcript_id FROM spider_dev.student_transcripts_tracking.Transcript_Contents
    AS T1 JOIN spider_dev.student_transcripts_tracking.Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id
    GROUP BY T2.transcript_date ,  T1.transcript_id  ORDER BY count(*) ASC LIMIT 1
  tables:
  - Transcripts
  - Transcript_Contents
  comparison_rules:
  - columns:
    - transcript_date
    - transcript_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_575:
  query_name: spider_575
  question: What is the date and id of the transcript with the least number of results?
    Order by number of results. Show 1 row.
  golden_query: SELECT T2.transcript_date ,  T1.transcript_id FROM spider_dev.student_transcripts_tracking.Transcript_Contents
    AS T1 JOIN spider_dev.student_transcripts_tracking.Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id
    GROUP BY T2.transcript_date ,  T1.transcript_id ORDER BY count(*) ASC LIMIT 1
  tables:
  - Transcripts
  - Transcript_Contents
  comparison_rules:
  - columns:
    - transcript_date
    - transcript_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_576:
  query_name: spider_576
  question: Find the semester id when both Master students and Bachelor students got
    enrolled in.
  golden_query: SELECT DISTINCT T2.semester_id FROM spider_dev.student_transcripts_tracking.Degree_Programs
    AS T1 JOIN spider_dev.student_transcripts_tracking.Student_Enrolment AS T2 ON
    T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master'
    INTERSECT SELECT DISTINCT T2.semester_id FROM spider_dev.student_transcripts_tracking.Degree_Programs
    AS T1 JOIN spider_dev.student_transcripts_tracking.Student_Enrolment AS T2 ON
    T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
  tables:
  - Degree_Programs
  - Student_Enrolment
  comparison_rules:
  - columns:
    - semester_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_577:
  query_name: spider_577
  question: What is the id of the semester that had both Masters and Bachelors students
    enrolled?
  golden_query: SELECT DISTINCT T2.semester_id FROM spider_dev.student_transcripts_tracking.Degree_Programs
    AS T1 JOIN spider_dev.student_transcripts_tracking.Student_Enrolment AS T2 ON
    T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master'
    INTERSECT SELECT DISTINCT T2.semester_id FROM spider_dev.student_transcripts_tracking.Degree_Programs
    AS T1 JOIN spider_dev.student_transcripts_tracking.Student_Enrolment AS T2 ON
    T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
  tables:
  - Degree_Programs
  - Student_Enrolment
  comparison_rules:
  - columns:
    - semester_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_578:
  query_name: spider_578
  question: How many different addresses do the students currently live? Display as
    num_add
  golden_query: SELECT count(DISTINCT current_address_id) as num_add FROM spider_dev.student_transcripts_tracking.Students
  tables:
  - Students
  comparison_rules:
  - columns:
    - num_add
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_579:
  query_name: spider_579
  question: Count unique current addresses of students? Display as num_add
  golden_query: SELECT count(DISTINCT current_address_id) as num_add FROM spider_dev.student_transcripts_tracking.Students
  tables:
  - Students
  comparison_rules:
  - columns:
    - num_add
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_580:
  query_name: spider_580
  question: List all the student details in reversed lexicographical order.
  golden_query: SELECT other_student_details FROM spider_dev.student_transcripts_tracking.Students
    ORDER BY other_student_details DESC
  tables:
  - Students
  comparison_rules:
  - columns:
    - other_student_details
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_581:
  query_name: spider_581
  question: What other details can you tell me about students in reverse alphabetical
    order?
  golden_query: SELECT other_student_details FROM spider_dev.student_transcripts_tracking.Students
    ORDER BY other_student_details DESC
  tables:
  - Students
  comparison_rules:
  - columns:
    - other_student_details
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_582:
  query_name: spider_582
  question: Describe the section with name 'h'.
  golden_query: SELECT section_description FROM spider_dev.student_transcripts_tracking.Sections
    WHERE section_name  =  'h'
  tables:
  - Sections
  comparison_rules:
  - columns:
    - section_description
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_583:
  query_name: spider_583
  question: What is the description for the section named h?
  golden_query: SELECT section_description FROM spider_dev.student_transcripts_tracking.Sections
    WHERE section_name  =  'h'
  tables:
  - Sections
  comparison_rules:
  - columns:
    - section_description
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_584:
  query_name: spider_584
  question: Find the first name of the students who permanently live in the country
    Haiti or have the cell phone number 09700166582 .
  golden_query: select t1.first_name from spider_dev.student_transcripts_tracking.students
    as t1 join spider_dev.student_transcripts_tracking.addresses as t2 on t1.permanent_address_id  =  t2.address_id
    where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'
  tables:
  - students
  - addresses
  comparison_rules:
  - columns:
    - first_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_585:
  query_name: spider_585
  question: What are the first names of the students who live in 'Haiti' permanently
    'OR' have the cell phone number '09700166582'?
  golden_query: select t1.first_name from spider_dev.student_transcripts_tracking.students
    as t1 join spider_dev.student_transcripts_tracking.addresses as t2 on t1.permanent_address_id  =  t2.address_id
    where t2.country  =  'Haiti' or t1.cell_mobile_number  =  '09700166582'
  tables:
  - students
  - addresses
  comparison_rules:
  - columns:
    - first_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - student_transcripts_tracking
spider_586:
  query_name: spider_586
  question: List the title of all cartoons in alphabetical order.
  golden_query: SELECT Title FROM spider_dev.tvshow.Cartoon ORDER BY title
  tables:
  - Cartoon
  comparison_rules:
  - columns:
    - Title
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_587:
  query_name: spider_587
  question: What are the titles of the cartoons sorted alphabetically?
  golden_query: SELECT Title FROM spider_dev.tvshow.Cartoon ORDER BY title
  tables:
  - Cartoon
  comparison_rules:
  - columns:
    - Title
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_588:
  query_name: spider_588
  question: List all cartoon directed by 'Ben Jones'.
  golden_query: SELECT Title FROM spider_dev.tvshow.Cartoon WHERE Directed_by = 'Ben
    Jones';
  tables:
  - Cartoon
  comparison_rules:
  - columns:
    - Title
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_589:
  query_name: spider_589
  question: What are the names of all cartoons directed by Ben Jones?
  golden_query: SELECT Title FROM spider_dev.tvshow.Cartoon WHERE Directed_by = 'Ben
    Jones';
  tables:
  - Cartoon
  comparison_rules:
  - columns:
    - Title
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_590:
  query_name: spider_590
  question: How many cartoons were written by 'Joseph Kuhr'? Display as num_car.
  golden_query: SELECT count(*) as num_car FROM spider_dev.tvshow.Cartoon WHERE Written_by
    = 'Joseph Kuhr';
  tables:
  - Cartoon
  comparison_rules:
  - columns:
    - num_car
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_591:
  query_name: spider_591
  question: What is the number of cartoones written by Joseph Kuhr? Display as num_car.
  golden_query: SELECT count(*) as num_car FROM spider_dev.tvshow.Cartoon WHERE Written_by
    = 'Joseph Kuhr';
  tables:
  - Cartoon
  comparison_rules:
  - columns:
    - num_car
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_592:
  query_name: spider_592
  question: list all cartoon titles and their directors ordered by their air date
  golden_query: SELECT title ,  Directed_by FROM spider_dev.tvshow.Cartoon ORDER BY
    Original_air_date
  tables:
  - Cartoon
  comparison_rules:
  - columns:
    - title
    - Directed_by
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_593:
  query_name: spider_593
  question: What is the name and directors of all the cartoons that are ordered by
    air date?
  golden_query: SELECT title ,  Directed_by FROM spider_dev.tvshow.Cartoon ORDER BY
    Original_air_date
  tables:
  - Cartoon
  comparison_rules:
  - columns:
    - title
    - Directed_by
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_594:
  query_name: spider_594
  question: List the title of all cartoon directed by 'Ben Jones' or 'Brandon Vietti'.
  golden_query: SELECT Title FROM spider_dev.tvshow.Cartoon WHERE Directed_by = 'Ben
    Jones' OR Directed_by = 'Brandon Vietti';
  tables:
  - Cartoon
  comparison_rules:
  - columns:
    - Title
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_595:
  query_name: spider_595
  question: What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?
  golden_query: SELECT Title FROM spider_dev.tvshow.Cartoon WHERE Directed_by = 'Ben
    Jones' OR Directed_by = 'Brandon Vietti';
  tables:
  - Cartoon
  comparison_rules:
  - columns:
    - Title
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_596:
  query_name: spider_596
  question: Which country has the most of TV Channels? List the country and number
    of TV Channels it has. Display as num_cha
  golden_query: SELECT Country ,  count(*) as num_cha FROM spider_dev.tvshow.TV_Channel
    GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
  tables:
  - TV_Channel
  comparison_rules:
  - columns:
    - Country
    - num_cha
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_597:
  query_name: spider_597
  question: What is the country with the most number of TV Channels and how many does
    it have? Display as num_cha
  golden_query: SELECT Country ,  count(*) as num_cha FROM spider_dev.tvshow.TV_Channel
    GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
  tables:
  - TV_Channel
  comparison_rules:
  - columns:
    - Country
    - num_cha
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_598:
  query_name: spider_598
  question: List the number of different series names, number of different contents
    in the TV Channel table. Display as num_series_names, num_contents.
  golden_query: SELECT count(DISTINCT series_name) as num_series_names,  count(DISTINCT
    content) as num_contents FROM spider_dev.tvshow.TV_Channel;
  tables:
  - TV_Channel
  comparison_rules:
  - columns:
    - num_series_names
    - num_contents
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_599:
  query_name: spider_599
  question: How many number of different series and contents are listed in the TV
    Channel table?  Display as num_ser, num_con.
  golden_query: SELECT count(DISTINCT series_name) as num_ser,  count(DISTINCT content)
    as num_con FROM spider_dev.tvshow.TV_Channel;
  tables:
  - TV_Channel
  comparison_rules:
  - columns:
    - num_ser
    - num_con
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_600:
  query_name: spider_600
  question: What is the content of TV Channel with serial name 'Sky Radio'?
  golden_query: SELECT Content FROM spider_dev.tvshow.TV_Channel WHERE series_name
    = 'Sky Radio';
  tables:
  - TV_Channel
  comparison_rules:
  - columns:
    - Content
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_601:
  query_name: spider_601
  question: What is the content of the series Sky Radio?
  golden_query: SELECT Content FROM spider_dev.tvshow.TV_Channel WHERE series_name
    = 'Sky Radio';
  tables:
  - TV_Channel
  comparison_rules:
  - columns:
    - Content
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_602:
  query_name: spider_602
  question: What is the Package Option of TV Channel with serial name 'Sky Radio'?
  golden_query: SELECT Package_Option FROM spider_dev.tvshow.TV_Channel WHERE series_name
    = 'Sky Radio';
  tables:
  - TV_Channel
  comparison_rules:
  - columns:
    - Package_Option
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_603:
  query_name: spider_603
  question: What are the Package Options of the TV Channels whose series names are
    Sky Radio?
  golden_query: SELECT Package_Option FROM spider_dev.tvshow.TV_Channel WHERE series_name
    = 'Sky Radio';
  tables:
  - TV_Channel
  comparison_rules:
  - columns:
    - Package_Option
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_604:
  query_name: spider_604
  question: How many TV Channel using language English? display as num_cha.
  golden_query: SELECT count(*) as num_cha FROM spider_dev.tvshow.TV_Channel WHERE
    LANGUAGE = 'English';
  tables:
  - TV_Channel
  comparison_rules:
  - columns:
    - num_cha
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_605:
  query_name: spider_605
  question: How many TV Channels use the English language? Display as num_cha.
  golden_query: SELECT count(*) as num_cha FROM spider_dev.tvshow.TV_Channel WHERE
    LANGUAGE = 'English';
  tables:
  - TV_Channel
  comparison_rules:
  - columns:
    - num_cha
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_606:
  query_name: spider_606
  question: List the language used least number of TV Channel. List language and number
    of TV Channel. Display as num_cha.
  golden_query: SELECT LANGUAGE ,  count(*) as num_cha FROM spider_dev.tvshow.TV_Channel
    GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
  tables:
  - TV_Channel
  comparison_rules:
  - columns:
    - LANGUAGE
    - num_cha
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_607:
  query_name: spider_607
  question: What are the languages used by the least number of TV Channels and how
    many channels use it? Display as num_cha.
  golden_query: SELECT LANGUAGE ,  count(*) as num_cha FROM spider_dev.tvshow.TV_Channel
    GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
  tables:
  - TV_Channel
  comparison_rules:
  - columns:
    - LANGUAGE
    - num_cha
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_608:
  query_name: spider_608
  question: List each language and the number of TV Channels using it. Display as
    num_cha.
  golden_query: SELECT LANGUAGE ,  count(*) as num_cha FROM spider_dev.tvshow.TV_Channel
    GROUP BY LANGUAGE
  tables:
  - TV_Channel
  comparison_rules:
  - columns:
    - LANGUAGE
    - num_cha
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_609:
  query_name: spider_609
  question: For each language, list the number of TV Channels that use it.Display
    as num_cha.
  golden_query: SELECT LANGUAGE ,  count(*) as num_cha FROM spider_dev.tvshow.TV_Channel
    GROUP BY LANGUAGE
  tables:
  - TV_Channel
  comparison_rules:
  - columns:
    - LANGUAGE
    - num_cha
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_610:
  query_name: spider_610
  question: What is the TV Channel that shows the cartoon 'The Rise of the Blue Beetle!'?
    List the TV Channel's series name.
  golden_query: SELECT T1.series_name FROM spider_dev.tvshow.TV_Channel AS T1 JOIN
    spider_dev.tvshow.Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise
    of the Blue Beetle!';
  tables:
  - TV_Channel
  - Cartoon
  comparison_rules:
  - columns:
    - series_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_611:
  query_name: spider_611
  question: What is the series name of the TV Channel that shows the cartoon 'The
    Rise of the Blue Beetle!'?
  golden_query: SELECT T1.series_name FROM spider_dev.tvshow.TV_Channel AS T1 JOIN
    spider_dev.tvshow.Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise
    of the Blue Beetle!';
  tables:
  - TV_Channel
  - Cartoon
  comparison_rules:
  - columns:
    - series_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_612:
  query_name: spider_612
  question: List the title of all  Cartoons showed on TV Channel with series name
    'Sky Radio'.
  golden_query: SELECT T2.Title FROM spider_dev.tvshow.TV_Channel AS T1 JOIN spider_dev.tvshow.Cartoon
    AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';
  tables:
  - TV_Channel
  - Cartoon
  comparison_rules:
  - columns:
    - Title
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_613:
  query_name: spider_613
  question: What is the title of all the cartools that are on the TV Channel with
    the series name 'Sky Radio'?
  golden_query: SELECT T2.Title FROM spider_dev.tvshow.TV_Channel AS T1 JOIN spider_dev.tvshow.Cartoon
    AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';
  tables:
  - TV_Channel
  - Cartoon
  comparison_rules:
  - columns:
    - Title
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_614:
  query_name: spider_614
  question: List the Episode of all TV series sorted by rating.
  golden_query: SELECT Episode FROM spider_dev.tvshow.TV_series ORDER BY rating
  tables:
  - TV_series
  comparison_rules:
  - columns:
    - Episode
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_615:
  query_name: spider_615
  question: What are all of the episodes ordered by ratings?
  golden_query: SELECT Episode FROM spider_dev.tvshow.TV_series ORDER BY rating
  tables:
  - TV_series
  comparison_rules:
  - columns:
    - Episode
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_616:
  query_name: spider_616
  question: List top 3 highest Rating  TV series. List the TV series's Episode and
    Rating.
  golden_query: SELECT Episode ,  Rating FROM spider_dev.tvshow.TV_series ORDER BY
    Rating DESC LIMIT 3;
  tables:
  - TV_series
  comparison_rules:
  - columns:
    - Episode
    - Rating
    match: oneof
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_617:
  query_name: spider_617
  question: What are 3 most highly rated episodes in the TV series table and what
    were those ratings?
  golden_query: SELECT Episode ,  Rating FROM spider_dev.tvshow.TV_series ORDER BY
    Rating DESC LIMIT 3;
  tables:
  - TV_series
  comparison_rules:
  - columns:
    - Episode
    - Rating
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_618:
  query_name: spider_618
  question: What is minimum and maximum share of TV series? Display as min_share,
    max_share.
  golden_query: SELECT min(SHARE) as min_share , max(SHARE) as max_share FROM spider_dev.tvshow.TV_series;
  tables:
  - TV_series
  comparison_rules:
  - columns:
    - max_share
    - min_share
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_619:
  query_name: spider_619
  question: What is the maximum and minimum share for the TV series? Display as min_share,
    max_share.
  golden_query: SELECT min(SHARE) as min_share, max(SHARE) as max_share FROM spider_dev.tvshow.TV_series;
  tables:
  - TV_series
  comparison_rules:
  - columns:
    - min_share
    - max_share
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_620:
  query_name: spider_620
  question: What is the air date of TV series with Episode 'A Love of a Lifetime'?
  golden_query: SELECT Air_Date FROM spider_dev.tvshow.TV_series WHERE Episode = 'A
    Love of a Lifetime';
  tables:
  - TV_series
  comparison_rules:
  - columns:
    - Air_Date
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_621:
  query_name: spider_621
  question: When did the tv series episode 'A Love of a Lifetime' air?
  golden_query: SELECT Air_Date FROM spider_dev.tvshow.TV_series WHERE Episode = 'A
    Love of a Lifetime';
  tables:
  - TV_series
  comparison_rules:
  - columns:
    - Air_Date
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_622:
  query_name: spider_622
  question: What is Weekly Rank of TV series with Episode 'A Love of a Lifetime'?
  golden_query: SELECT Weekly_Rank FROM spider_dev.tvshow.TV_series WHERE Episode
    = 'A Love of a Lifetime';
  tables:
  - TV_series
  comparison_rules:
  - columns:
    - Weekly_Rank
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_623:
  query_name: spider_623
  question: What is the weekly rank for the episode 'A Love of a Lifetime'?
  golden_query: SELECT Weekly_Rank FROM spider_dev.tvshow.TV_series WHERE Episode
    = 'A Love of a Lifetime';
  tables:
  - TV_series
  comparison_rules:
  - columns:
    - Weekly_Rank
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_624:
  query_name: spider_624
  question: What is the TV Channel of TV series with Episode 'A Love of a Lifetime'?
    List the TV Channel's series name.
  golden_query: SELECT T1.series_name FROM spider_dev.tvshow.TV_Channel AS T1 JOIN
    spider_dev.tvshow.TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A
    Love of a Lifetime';
  tables:
  - TV_series
  - TV_Channel
  comparison_rules:
  - columns:
    - series_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_625:
  query_name: spider_625
  question: What is the name of the series that has the episode 'A Love of a Lifetime'?
  golden_query: SELECT T1.series_name FROM spider_dev.tvshow.TV_Channel AS T1 JOIN
    spider_dev.tvshow.TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A
    Love of a Lifetime';
  tables:
  - TV_series
  - TV_Channel
  comparison_rules:
  - columns:
    - series_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_626:
  query_name: spider_626
  question: List the Episode of all  TV series showed on TV Channel with series name
    'Sky Radio'.
  golden_query: SELECT T2.Episode FROM spider_dev.tvshow.TV_Channel AS T1 JOIN spider_dev.tvshow.TV_series
    AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';
  tables:
  - TV_series
  - TV_Channel
  comparison_rules:
  - columns:
    - Episode
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_627:
  query_name: spider_627
  question: What is the episode for the TV series named 'Sky Radio'?
  golden_query: SELECT T2.Episode FROM spider_dev.tvshow.TV_Channel AS T1 JOIN spider_dev.tvshow.TV_series
    AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';
  tables:
  - TV_series
  - TV_Channel
  comparison_rules:
  - columns:
    - Episode
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_628:
  query_name: spider_628
  question: Find the number of cartoons directed by each of the listed directors.
    Display as num_car.
  golden_query: SELECT count(*) as num_car,  Directed_by FROM spider_dev.tvshow.cartoon
    GROUP BY Directed_by
  tables:
  - cartoon
  comparison_rules:
  - columns:
    - num_car
    - Directed_by
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_629:
  query_name: spider_629
  question: How many cartoons did each director create?Display as num_car.
  golden_query: SELECT count(*) as num_car ,  Directed_by FROM spider_dev.tvshow.cartoon
    GROUP BY Directed_by
  tables:
  - cartoon
  comparison_rules:
  - columns:
    - num_car
    - Directed_by
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_630:
  query_name: spider_630
  question: Find the production code and channel of the most recently aired cartoon
    .
  golden_query: select production_code ,  channel from spider_dev.tvshow.cartoon order
    by original_air_date desc limit 1
  tables:
  - cartoon
  comparison_rules:
  - columns:
    - production_code
    - channel
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_631:
  query_name: spider_631
  question: What is the produdction code and channel of the most recent cartoon ?
  golden_query: select production_code ,  channel from spider_dev.tvshow.cartoon order
    by original_air_date desc limit 1
  tables:
  - cartoon
  comparison_rules:
  - columns:
    - production_code
    - channel
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_632:
  query_name: spider_632
  question: Find the package choice and series name of the TV channel that has high
    definition TV.
  golden_query: SELECT package_option ,  series_name FROM spider_dev.tvshow.TV_Channel
    WHERE hight_definition_TV  =  'yes'
  tables:
  - TV_Channel
  comparison_rules:
  - columns:
    - package_option
    - series_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_633:
  query_name: spider_633
  question: What are the package options and the name of the series for the TV Channel
    that supports high definition TV?
  golden_query: SELECT package_option ,  series_name FROM spider_dev.tvshow.TV_Channel
    WHERE hight_definition_TV  =  'yes'
  tables:
  - TV_Channel
  comparison_rules:
  - columns:
    - package_option
    - series_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_634:
  query_name: spider_634
  question: which countries' tv channels are playing some cartoon written by Todd
    Casey?
  golden_query: SELECT T1.country FROM spider_dev.tvshow.TV_Channel AS T1 JOIN spider_dev.tvshow.cartoon
    AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
  tables:
  - TV_Channel
  - cartoon
  comparison_rules:
  - columns:
    - country
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_635:
  query_name: spider_635
  question: What are the countries that have cartoons on TV that were written by Todd
    Casey?
  golden_query: SELECT T1.country FROM spider_dev.tvshow.TV_Channel AS T1 JOIN spider_dev.tvshow.cartoon
    AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
  tables:
  - TV_Channel
  - cartoon
  comparison_rules:
  - columns:
    - country
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_636:
  query_name: spider_636
  question: which country's tv channels are not playing any cartoon written by 'Todd
    Casey'?
  golden_query: SELECT country FROM spider_dev.tvshow.TV_Channel EXCEPT SELECT T1.country
    FROM spider_dev.tvshow.TV_Channel AS T1 JOIN spider_dev.tvshow.cartoon AS T2 ON
    T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
  tables:
  - TV_Channel
  - cartoon
  comparison_rules:
  - columns:
    - country
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_637:
  query_name: spider_637
  question: What are the countries that are not playing cartoons written by Todd Casey?
  golden_query: SELECT country FROM spider_dev.tvshow.TV_Channel EXCEPT SELECT T1.country
    FROM spider_dev.tvshow.TV_Channel AS T1 JOIN spider_dev.tvshow.cartoon AS T2 ON
    T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
  tables:
  - TV_Channel
  - cartoon
  comparison_rules:
  - columns:
    - country
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_638:
  query_name: spider_638
  question: Find the series name and country of the tv channel that is playing some
    cartoons directed by 'Ben Jones' 'AND' 'Michael Chang'?
  golden_query: SELECT T1.series_name ,  T1.country FROM spider_dev.tvshow.TV_Channel
    AS T1 JOIN spider_dev.tvshow.cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael
    Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM spider_dev.tvshow.TV_Channel
    AS T1 JOIN spider_dev.tvshow.cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben
    Jones'
  tables:
  - TV_Channel
  - cartoon
  comparison_rules:
  - columns:
    - series_name
    - country
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_639:
  query_name: spider_639
  question: What is the unique series name and country of all TV channels that are
    playing cartoons directed by 'Ben Jones' and cartoons directed by 'Michael Chang'?
  golden_query: SELECT distinct T1.series_name ,  T1.country FROM spider_dev.tvshow.TV_Channel
    AS T1 JOIN spider_dev.tvshow.cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael
    Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM spider_dev.tvshow.TV_Channel
    AS T1 JOIN spider_dev.tvshow.cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben
    Jones'
  tables:
  - TV_Channel
  - cartoon
  comparison_rules:
  - columns:
    - series_name
    - country
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_640:
  query_name: spider_640
  question: find the pixel aspect ratio and nation of the tv channels that do not
    use English.
  golden_query: SELECT Pixel_aspect_ratio_PAR ,  country FROM spider_dev.tvshow.tv_channel
    WHERE LANGUAGE != 'English'
  tables:
  - tv_channel
  comparison_rules:
  - columns:
    - Pixel_aspect_ratio_PAR
    - country
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_641:
  query_name: spider_641
  question: What is the pixel aspect ratio and country of origin for all TV channels
    that do not use English?
  golden_query: SELECT Pixel_aspect_ratio_PAR ,  country FROM spider_dev.tvshow.tv_channel
    WHERE LANGUAGE != 'English'
  tables:
  - tv_channel
  comparison_rules:
  - columns:
    - Pixel_aspect_ratio_PAR
    - country
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_642:
  query_name: spider_642
  question: find id of the tv channels that from the countries where have more than
    two tv channels.
  golden_query: select id from spider_dev.tvshow.tv_channel where country in (SELECT
    country FROM spider_dev.tvshow.tv_channel GROUP BY country HAVING count(*)  >  2)
  tables:
  - tv_channel
  comparison_rules:
  - columns:
    - id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_643:
  query_name: spider_643
  question: What are the ids of all tv channels that have more than 2 TV channels?
  golden_query: SELECT id FROM spider_dev.tvshow.tv_channel GROUP BY id HAVING count(*)  >  2
  tables:
  - tv_channel
  comparison_rules:
  - columns:
    - id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_644:
  query_name: spider_644
  question: find the id of tv channels that do not play any cartoon directed by Ben
    Jones.
  golden_query: SELECT id FROM spider_dev.tvshow.TV_Channel EXCEPT SELECT channel
    FROM spider_dev.tvshow.cartoon WHERE directed_by  =  'Ben Jones'
  tables:
  - TV_Channel
  - cartoon
  comparison_rules:
  - columns:
    - id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_645:
  query_name: spider_645
  question: What are the ids of the TV channels that do not have any cartoons directed
    by Ben Jones?
  golden_query: SELECT id FROM spider_dev.tvshow.TV_Channel EXCEPT SELECT channel
    FROM spider_dev.tvshow.cartoon WHERE directed_by  =  'Ben Jones'
  tables:
  - TV_Channel
  - cartoon
  comparison_rules:
  - columns:
    - id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_646:
  query_name: spider_646
  question: find the unique package option of the tv channel that do not have any
    cartoon directed by Ben Jones.
  golden_query: SELECT distinct package_option FROM spider_dev.tvshow.TV_Channel WHERE
    id NOT IN (SELECT channel FROM spider_dev.tvshow.cartoon WHERE directed_by  =  'Ben
    Jones')
  tables:
  - TV_Channel
  - cartoon
  comparison_rules:
  - columns:
    - package_option
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_647:
  query_name: spider_647
  question: What are the unique package options of all tv channels that are not playing
    any cartoons directed by Ben Jones?
  golden_query: "WITH ben_jones_cartoons AS (\nSELECT *\nFROM spider_dev.tvshow.cartoon\n
    WHERE\ndirected_by = 'Ben Jones'\n)\n\nSELECT DISTINCT package_option\nFROM spider_dev.tvshow.tv_channel
    AS tc\nLEFT JOIN ben_jones_cartoons AS bjc\nON tc.id = bjc.channel\nWHERE\nbjc.channel
    IS NULL"
  tables:
  - cartoon
  - tv_channel
  comparison_rules:
  - columns:
    - package_option
    match: exact
  auto_select_schema: 'false'
  schemas:
  - tvshow
spider_648:
  query_name: spider_648
  question: How many poker players are there? Display as num_players.
  golden_query: SELECT count(*) as num_players FROM spider_dev.poker_player.poker_player
  tables:
  - poker_player
  comparison_rules:
  - columns:
    - num_players
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_649:
  query_name: spider_649
  question: Count the number of poker players.Display as num_players.
  golden_query: SELECT count(*) as num_players FROM spider_dev.poker_player.poker_player
  tables:
  - poker_player
  comparison_rules:
  - columns:
    - num_players
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_650:
  query_name: spider_650
  question: List the earnings of poker players in descending order.
  golden_query: SELECT Earnings FROM spider_dev.poker_player.poker_player ORDER BY
    Earnings DESC
  tables:
  - poker_player
  comparison_rules:
  - columns:
    - Earnings
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_651:
  query_name: spider_651
  question: What are the earnings of poker players, ordered descending by value?
  golden_query: SELECT Earnings FROM spider_dev.poker_player.poker_player ORDER BY
    Earnings DESC
  tables:
  - poker_player
  comparison_rules:
  - columns:
    - Earnings
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_652:
  query_name: spider_652
  question: List the final tables made and the best finishes of poker players.
  golden_query: SELECT Final_Table_Made ,  Best_Finish FROM spider_dev.poker_player.poker_player
  tables:
  - poker_player
  comparison_rules:
  - columns:
    - Final_Table_Made
    - Best_Finish
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_653:
  query_name: spider_653
  question: What are the final tables made and best finishes for all poker players?
  golden_query: SELECT Final_Table_Made ,  Best_Finish FROM spider_dev.poker_player.poker_player
  tables:
  - poker_player
  comparison_rules:
  - columns:
    - Final_Table_Made
    - Best_Finish
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_654:
  query_name: spider_654
  question: What is the average earnings of poker players? Display as avg_ear
  golden_query: SELECT avg(Earnings) as avg_ear FROM spider_dev.poker_player.poker_player
  tables:
  - poker_player
  comparison_rules:
  - columns:
    - avg_ear
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_655:
  query_name: spider_655
  question: Return the average earnings across all poker players. Display as avg_ear
  golden_query: SELECT avg(Earnings) as avg_ear FROM spider_dev.poker_player.poker_player
  tables:
  - poker_player
  comparison_rules:
  - columns:
    - avg_ear
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_656:
  query_name: spider_656
  question: What is the money rank of the poker player with the highest earnings?
  golden_query: SELECT Money_Rank FROM spider_dev.poker_player.poker_player ORDER
    BY Earnings DESC LIMIT 1
  tables:
  - poker_player
  comparison_rules:
  - columns:
    - Money_Rank
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_657:
  query_name: spider_657
  question: Return the money rank of the player with the greatest earnings.
  golden_query: SELECT Money_Rank FROM spider_dev.poker_player.poker_player ORDER
    BY Earnings DESC LIMIT 1
  tables:
  - poker_player
  comparison_rules:
  - columns:
    - Money_Rank
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_658:
  query_name: spider_658
  question: What is the maximum number of final tables made among poker players with
    earnings less than 200000? Display as max_final_tables.
  golden_query: SELECT max(Final_Table_Made) as max_final_tables FROM spider_dev.poker_player.poker_player
    WHERE Earnings  <  200000
  tables:
  - poker_player
  comparison_rules:
  - columns:
    - max_final_tables
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_659:
  query_name: spider_659
  question: Return the maximum final tables made across all poker players who have
    earnings below 200000. Display as max_final_tables.
  golden_query: SELECT max(Final_Table_Made) as max_final_tables FROM spider_dev.poker_player.poker_player
    WHERE Earnings  <  200000
  tables:
  - poker_player
  comparison_rules:
  - columns:
    - max_final_tables
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_660:
  query_name: spider_660
  question: What are the names of poker players?
  golden_query: SELECT T1.Name FROM spider_dev.poker_player.people AS T1 JOIN spider_dev.poker_player.poker_player
    AS T2 ON T1.People_ID  =  T2.People_ID
  tables:
  - people
  - poker_player
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_661:
  query_name: spider_661
  question: Return the names of all the poker players.
  golden_query: SELECT T1.Name FROM spider_dev.poker_player.people AS T1 JOIN spider_dev.poker_player.poker_player
    AS T2 ON T1.People_ID  =  T2.People_ID
  tables:
  - people
  - poker_player
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_662:
  query_name: spider_662
  question: What are the names of poker players whose earnings is higher than 300000?
  golden_query: SELECT T1.Name FROM spider_dev.poker_player.people AS T1 JOIN spider_dev.poker_player.poker_player
    AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000
  tables:
  - people
  - poker_player
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_663:
  query_name: spider_663
  question: Give the names of poker players who have earnings above 300000.
  golden_query: SELECT T1.Name FROM spider_dev.poker_player.people AS T1 JOIN spider_dev.poker_player.poker_player
    AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000
  tables:
  - people
  - poker_player
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_664:
  query_name: spider_664
  question: List the names of poker players ordered by the final tables made in ascending
    order.
  golden_query: SELECT T1.Name FROM spider_dev.poker_player.people AS T1 JOIN spider_dev.poker_player.poker_player
    AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
  tables:
  - people
  - poker_player
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_665:
  query_name: spider_665
  question: What are the names of poker players, ordered ascending by the number of
    final tables they have made?
  golden_query: SELECT T1.Name FROM spider_dev.poker_player.people AS T1 JOIN spider_dev.poker_player.poker_player
    AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
  tables:
  - people
  - poker_player
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_666:
  query_name: spider_666
  question: What is the birth date of the poker player with the lowest earnings?
  golden_query: SELECT T1.Birth_Date FROM spider_dev.poker_player.people AS T1 JOIN
    spider_dev.poker_player.poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER
    BY T2.Earnings ASC LIMIT 1
  tables:
  - people
  - poker_player
  comparison_rules:
  - columns:
    - Birth_Date
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_667:
  query_name: spider_667
  question: Return the birth date of the poker player with the lowest earnings.
  golden_query: SELECT T1.Birth_Date FROM spider_dev.poker_player.people AS T1 JOIN
    spider_dev.poker_player.poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER
    BY T2.Earnings ASC LIMIT 1
  tables:
  - people
  - poker_player
  comparison_rules:
  - columns:
    - Birth_Date
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_668:
  query_name: spider_668
  question: What is the money rank of the tallest poker player?
  golden_query: SELECT T2.Money_Rank FROM spider_dev.poker_player.people AS T1 JOIN
    spider_dev.poker_player.poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER
    BY T1.Height DESC LIMIT 1
  tables:
  - people
  - poker_player
  comparison_rules:
  - columns:
    - Money_Rank
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_669:
  query_name: spider_669
  question: Return the money rank of the poker player with the greatest height.
  golden_query: SELECT T2.Money_Rank FROM spider_dev.poker_player.people AS T1 JOIN
    spider_dev.poker_player.poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER
    BY T1.Height DESC LIMIT 1
  tables:
  - people
  - poker_player
  comparison_rules:
  - columns:
    - Money_Rank
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_670:
  query_name: spider_670
  question: What is the average earnings of poker players with height higher than
    200? Display as avg_ear.
  golden_query: SELECT avg(T2.Earnings) as avg_ear FROM spider_dev.poker_player.people
    AS T1 JOIN spider_dev.poker_player.poker_player AS T2 ON T1.People_ID  =  T2.People_ID
    WHERE T1.Height  >  200
  tables:
  - people
  - poker_player
  comparison_rules:
  - columns:
    - avg_ear
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_671:
  query_name: spider_671
  question: Give average earnings of poker players who are taller than 200. Display
    as avg_ear.
  golden_query: SELECT avg(T2.Earnings) as avg_ear FROM spider_dev.poker_player.people
    AS T1 JOIN spider_dev.poker_player.poker_player AS T2 ON T1.People_ID  =  T2.People_ID
    WHERE T1.Height  >  200
  tables:
  - people
  - poker_player
  comparison_rules:
  - columns:
    - avg_ear
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_672:
  query_name: spider_672
  question: What are the names of poker players in descending order of earnings?
  golden_query: SELECT T1.Name FROM spider_dev.poker_player.people AS T1 JOIN spider_dev.poker_player.poker_player
    AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC
  tables:
  - people
  - poker_player
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_673:
  query_name: spider_673
  question: Return the names of poker players sorted by their earnings descending.
  golden_query: SELECT T1.Name FROM spider_dev.poker_player.people AS T1 JOIN spider_dev.poker_player.poker_player
    AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC
  tables:
  - people
  - poker_player
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_674:
  query_name: spider_674
  question: What are different nationalities of people and the corresponding number
    of people from each nation? Display as num_nat.
  golden_query: SELECT Nationality ,  COUNT(*) as num_nat FROM spider_dev.poker_player.people
    GROUP BY Nationality
  tables:
  - people
  comparison_rules:
  - columns:
    - Nationality
    - num_nat
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_675:
  query_name: spider_675
  question: How many people are there of each nationality?Display as num_peo.
  golden_query: SELECT Nationality ,  COUNT(*) as num_peo FROM spider_dev.poker_player.people
    GROUP BY Nationality
  tables:
  - people
  comparison_rules:
  - columns:
    - Nationality
    - num_peo
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_676:
  query_name: spider_676
  question: What is the most common nationality of people?
  golden_query: SELECT Nationality FROM spider_dev.poker_player.people GROUP BY Nationality
    ORDER BY COUNT(*) DESC LIMIT 1
  tables:
  - people
  comparison_rules:
  - columns:
    - Nationality
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_677:
  query_name: spider_677
  question: Give the nationality that is most common across all people.
  golden_query: SELECT Nationality FROM spider_dev.poker_player.people GROUP BY Nationality
    ORDER BY COUNT(*) DESC LIMIT 1
  tables:
  - people
  comparison_rules:
  - columns:
    - Nationality
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_678:
  query_name: spider_678
  question: What are the nationalities that are shared by at least two people?
  golden_query: SELECT Nationality FROM spider_dev.poker_player.people GROUP BY Nationality
    HAVING COUNT(*)  >=  2
  tables:
  - people
  comparison_rules:
  - columns:
    - Nationality
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_679:
  query_name: spider_679
  question: Return the nationalities for which there are two or more people.
  golden_query: SELECT Nationality FROM spider_dev.poker_player.people GROUP BY Nationality
    HAVING COUNT(*)  >=  2
  tables:
  - people
  comparison_rules:
  - columns:
    - Nationality
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_680:
  query_name: spider_680
  question: List the names and birth dates of people in ascending alphabetical order
    of name.
  golden_query: SELECT Name ,  Birth_Date FROM spider_dev.poker_player.people ORDER
    BY Name ASC
  tables:
  - people
  comparison_rules:
  - columns:
    - Name
    - Birth_Date
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_681:
  query_name: spider_681
  question: What are the names and birth dates of people, ordered by their names in
    alphabetical order?
  golden_query: SELECT Name ,  Birth_Date FROM spider_dev.poker_player.people ORDER
    BY Name ASC
  tables:
  - people
  comparison_rules:
  - columns:
    - Name
    - Birth_Date
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_682:
  query_name: spider_682
  question: Show names of people whose nationality is not 'Russia'.
  golden_query: SELECT Name FROM spider_dev.poker_player.people WHERE Nationality
    != 'Russia'
  tables:
  - people
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_683:
  query_name: spider_683
  question: What are the names of people who are not from Russia?
  golden_query: SELECT Name FROM spider_dev.poker_player.people WHERE Nationality
    != 'Russia'
  tables:
  - people
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_684:
  query_name: spider_684
  question: List the names of people that are not poker players.
  golden_query: SELECT Name FROM spider_dev.poker_player.people WHERE People_ID NOT
    IN (SELECT People_ID FROM spider_dev.poker_player.poker_player)
  tables:
  - people
  - poker_player
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_685:
  query_name: spider_685
  question: What are the names of people who do not play poker?
  golden_query: SELECT Name FROM spider_dev.poker_player.people WHERE People_ID NOT
    IN (SELECT People_ID FROM spider_dev.poker_player.poker_player)
  tables:
  - people
  - poker_player
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_686:
  query_name: spider_686
  question: How many distinct nationalities are there? Display as num_nat.
  golden_query: SELECT count(DISTINCT Nationality) as num_nat FROM spider_dev.poker_player.people
  tables:
  - people
  comparison_rules:
  - columns:
    - num_nat
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_687:
  query_name: spider_687
  question: Count the number of different nationalities.Display as num_nat.
  golden_query: SELECT count(DISTINCT Nationality) as num_nat FROM spider_dev.poker_player.people
  tables:
  - people
  comparison_rules:
  - columns:
    - num_nat
    match: exact
  auto_select_schema: 'false'
  schemas:
  - poker_player
spider_688:
  query_name: spider_688
  question: How many states are there? Display count as num_states
  golden_query: SELECT count(distinct state) as num_states FROM spider_dev.voter_1.area_code_state
  tables:
  - area_code_state
  comparison_rules:
  - columns:
    - num_states
    match: exact
  auto_select_schema: 'false'
  schemas:
  - voter_1
spider_689:
  query_name: spider_689
  question: List the contestant numbers and names, ordered by contestant name descending.
  golden_query: SELECT contestant_number ,  contestant_name FROM spider_dev.voter_1.contestants
    ORDER BY contestant_name DESC
  tables:
  - contestants
  comparison_rules:
  - columns:
    - contestant_number
    - contestant_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - voter_1
spider_690:
  query_name: spider_690
  question: List the vote ids, phone numbers and states of all votes.
  golden_query: SELECT vote_id ,  phone_number ,  state FROM spider_dev.voter_1.votes
  tables:
  - votes
  comparison_rules:
  - columns:
    - vote_id
    - phone_number
    - state
    match: exact
  auto_select_schema: 'false'
  schemas:
  - voter_1
spider_691:
  query_name: spider_691
  question: What are the maximum and minimum values of area codes? Display as max_area_code,
    min_area_code.
  golden_query: SELECT max(area_code) as max_area_code,  min(area_code) as min_area_code
    FROM spider_dev.voter_1.area_code_state
  tables:
  - area_code_state
  comparison_rules:
  - columns:
    - max_area_code
    - min_area_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - voter_1
spider_692:
  query_name: spider_692
  question: What is last date created of votes from the state 'CA'? Display as last_date_created, last_date_created_timestamp.
  golden_query: SELECT max(created) as last_date_created, MAX(TRY_TO_TIMESTAMP(created)) AS last_date_created_timestamp FROM spider_dev.voter_1.votes WHERE state  =  'CA'
  tables:
  - votes
  comparison_rules:
  - columns:
    - last_date_created
    - last_date_created_timestamp
    match: oneof
  auto_select_schema: 'false'
  schemas:
  - voter_1
spider_693:
  query_name: spider_693
  question: What are the names of the contestants whose names are not 'Jessie Alloway'
  golden_query: SELECT contestant_name FROM spider_dev.voter_1.contestants WHERE contestant_name
    != 'Jessie Alloway'
  tables:
  - contestants
  comparison_rules:
  - columns:
    - contestant_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - voter_1
spider_694:
  query_name: spider_694
  question: What are the distinct states and create time of all votes?
  golden_query: SELECT DISTINCT state ,  created FROM spider_dev.voter_1.votes
  tables:
  - votes
  comparison_rules:
  - columns:
    - state
    - created
    match: exact
  auto_select_schema: 'false'
  schemas:
  - voter_1
spider_695:
  query_name: spider_695
  question: What are the contestant numbers and names of the contestants who had at
    least two votes?
  golden_query: SELECT T1.contestant_number , T1.contestant_name FROM spider_dev.voter_1.contestants
    AS T1 JOIN spider_dev.voter_1.votes AS T2 ON T1.contestant_number  =  T2.contestant_number
    GROUP BY T1.contestant_number , T1.contestant_name HAVING count(*)  >=  2
  tables:
  - contestants
  - votes
  comparison_rules:
  - columns:
    - contestant_number
    - contestant_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - voter_1
spider_696:
  query_name: spider_696
  question: Of all the contestants who got voted, what is the contestant number and
    name of the contestant who got least votes? Order by number of votes. Show 1 row
  golden_query: SELECT T1.contestant_number , T1.contestant_name FROM spider_dev.voter_1.contestants
    AS T1 JOIN spider_dev.voter_1.votes AS T2 ON T1.contestant_number  =  T2.contestant_number
    GROUP BY T1.contestant_number , T1.contestant_name ORDER BY count(*) ASC LIMIT
    1
  tables:
  - contestants
  - votes
  comparison_rules:
  - columns:
    - contestant_number
    - contestant_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - voter_1
spider_697:
  query_name: spider_697
  question: What are the number of votes from state 'NY' or 'CA'? Display as num_votes.
  golden_query: SELECT count(*) as num_votes FROM spider_dev.voter_1.votes WHERE state  =  'NY'
    OR state  =  'CA'
  tables:
  - votes
  comparison_rules:
  - columns:
    - num_votes
    match: exact
  auto_select_schema: 'false'
  schemas:
  - voter_1
spider_698:
  query_name: spider_698
  question: How many contestants did not get voted?Display as num_cont.
  golden_query: SELECT count(*) as num_cont FROM spider_dev.voter_1.contestants WHERE
    contestant_number NOT IN ( SELECT contestant_number FROM spider_dev.voter_1.votes
    )
  tables:
  - contestants
  - votes
  comparison_rules:
  - columns:
    - num_cont
    match: exact
  auto_select_schema: 'false'
  schemas:
  - voter_1
spider_699:
  query_name: spider_699
  question: What is the area code in which the most voters voted?
  golden_query: SELECT T1.area_code FROM spider_dev.voter_1.area_code_state AS T1
    JOIN spider_dev.voter_1.votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code
    ORDER BY count(*) DESC LIMIT 1
  tables:
  - area_code_state
  - votes
  comparison_rules:
  - columns:
    - area_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - voter_1
spider_700:
  query_name: spider_700
  question: What are the create dates, states, and phone numbers of the votes that
    were for the contestant named 'Tabatha Gehling'?
  golden_query: SELECT T2.created ,  T2.state ,  T2.phone_number FROM spider_dev.voter_1.contestants
    AS T1 JOIN spider_dev.voter_1.votes AS T2 ON T1.contestant_number  =  T2.contestant_number
    WHERE T1.contestant_name  =  'Tabatha Gehling'
  tables:
  - contestants
  - votes
  comparison_rules:
  - columns:
    - created
    - state
    - phone_number
    match: exact
  auto_select_schema: 'false'
  schemas:
  - voter_1
spider_701:
  query_name: spider_701
  question: List the area codes in which voters voted both for the contestant 'Tabatha
    Gehling' and the contestant 'Kelly Clauss'.
  golden_query: SELECT T3.area_code FROM spider_dev.voter_1.contestants AS T1 JOIN
    spider_dev.voter_1.votes AS T2 ON T1.contestant_number  =  T2.contestant_number
    JOIN spider_dev.voter_1.area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha
    Gehling' INTERSECT SELECT T3.area_code FROM spider_dev.voter_1.contestants AS
    T1 JOIN spider_dev.voter_1.votes AS T2 ON T1.contestant_number  =  T2.contestant_number
    JOIN spider_dev.voter_1.area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly
    Clauss'
  tables:
  - contestants
  - area_code_state
  - votes
  comparison_rules:
  - columns:
    - area_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - voter_1
spider_702:
  query_name: spider_702
  question: Return the names of the contestants whose names contain the substring
    'Al'. Use case sensitive matching
  golden_query: select contestant_name from spider_dev.voter_1.contestants where contestant_name
    like '%Al%'
  tables:
  - contestants
  comparison_rules:
  - columns:
    - contestant_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - voter_1
spider_703:
  query_name: spider_703
  question: What are the names of all the countries that became independent after
    1950?
  golden_query: SELECT Name FROM spider_dev.world_1.country WHERE IndepYear  >  1950
  tables:
  - country
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_704:
  query_name: spider_704
  question: Give the names of the nations that were founded after 1950.
  golden_query: SELECT Name FROM spider_dev.world_1.country WHERE IndepYear  >  1950
  tables:
  - country
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_705:
  query_name: spider_705
  question: How many countries have 'Republic' as their form of government? Use exact
    search. Display as num_cont.
  golden_query: SELECT count(*) as num_cont FROM spider_dev.world_1.country WHERE
    GovernmentForm  =  'Republic'
  tables:
  - country
  comparison_rules:
  - columns:
    - num_cont
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_706:
  query_name: spider_706
  question: How many countries have governments with GovernmentForm = 'Republic'?
    Display as num_cont.
  golden_query: SELECT count(*) as num_cont FROM spider_dev.world_1.country WHERE
    GovernmentForm  =  'Republic'
  tables:
  - country
  comparison_rules:
  - columns:
    - num_cont
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_707:
  query_name: spider_707
  question: What is the total surface area of the countries in the Caribbean region?
    Display as tot_surface
  golden_query: SELECT sum(SurfaceArea) as tot_surface FROM spider_dev.world_1.country
    WHERE Region  =  'Caribbean'
  tables:
  - country
  comparison_rules:
  - columns:
    - tot_surface
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_708:
  query_name: spider_708
  question: How much surface area do the countires in the Carribean cover together?
    Display as tot_surface
  golden_query: SELECT sum(SurfaceArea) as tot_surface FROM spider_dev.world_1.country
    WHERE Region  =  'Caribbean'
  tables:
  - country
  comparison_rules:
  - columns:
    - tot_surface
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_709:
  query_name: spider_709
  question: Which continent is Anguilla in?
  golden_query: SELECT Continent FROM spider_dev.world_1.country WHERE Name  =  'Anguilla'
  tables:
  - country
  comparison_rules:
  - columns:
    - Continent
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_710:
  query_name: spider_710
  question: What is the continent name which Anguilla belongs to?
  golden_query: SELECT Continent FROM spider_dev.world_1.country WHERE Name  =  'Anguilla'
  tables:
  - country
  comparison_rules:
  - columns:
    - Continent
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_711:
  query_name: spider_711
  question: Which region is the city Kabul located in?
  golden_query: SELECT Region FROM spider_dev.world_1.country AS T1 JOIN spider_dev.world_1.city
    AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  'Kabul'
  tables:
  - country
  - city
  comparison_rules:
  - columns:
    - Region
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_712:
  query_name: spider_712
  question: What region is Kabul in?
  golden_query: SELECT Region FROM spider_dev.world_1.country AS T1 JOIN spider_dev.world_1.city
    AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  'Kabul'
  tables:
  - country
  - city
  comparison_rules:
  - columns:
    - Region
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_713:
  query_name: spider_713
  question: Which language is the most popular in Aruba?
  golden_query: SELECT T2.Language FROM spider_dev.world_1.country AS T1 JOIN spider_dev.world_1.countrylanguage
    AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  'Aruba' ORDER BY Percentage
    DESC LIMIT 1
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - Language
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_714:
  query_name: spider_714
  question: What language is predominantly spoken in Aruba?
  golden_query: SELECT T2.Language FROM spider_dev.world_1.country AS T1 JOIN spider_dev.world_1.countrylanguage
    AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  'Aruba' ORDER BY Percentage
    DESC LIMIT 1
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - Language
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_715:
  query_name: spider_715
  question: What are the population and life expectancies in Brazil?
  golden_query: SELECT Population ,  LifeExpectancy FROM spider_dev.world_1.country
    WHERE Name  =  'Brazil'
  tables:
  - country
  comparison_rules:
  - columns:
    - Population
    - LifeExpectancy
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_716:
  query_name: spider_716
  question: Give me Brazil’s population and life expectancies.
  golden_query: SELECT Population ,  LifeExpectancy FROM spider_dev.world_1.country
    WHERE Name  =  'Brazil'
  tables:
  - country
  comparison_rules:
  - columns:
    - Population
    - LifeExpectancy
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_717:
  query_name: spider_717
  question: What are the region and population of Angola?
  golden_query: SELECT Population ,  Region FROM spider_dev.world_1.country WHERE
    Name  =  'Angola'
  tables:
  - country
  comparison_rules:
  - columns:
    - Population
    - Region
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_718:
  query_name: spider_718
  question: What region does Angola belong to and what is its population?
  golden_query: SELECT Population ,  Region FROM spider_dev.world_1.country WHERE
    Name  =  'Angola'
  tables:
  - country
  comparison_rules:
  - columns:
    - Population
    - Region
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_719:
  query_name: spider_719
  question: What is the average expected life expectancy for countries in the region
    of 'Central Africa'? Display as avg_life
  golden_query: SELECT avg(LifeExpectancy) as avg_life FROM spider_dev.world_1.country
    WHERE Region  =  'Central Africa'
  tables:
  - country
  comparison_rules:
  - columns:
    - avg_life
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_720:
  query_name: spider_720
  question: How long is the people’s average life expectancy in region 'Central Africa'?
    Display as avg_life.
  golden_query: SELECT avg(LifeExpectancy) as avg_life FROM spider_dev.world_1.country
    WHERE Region  =  'Central Africa'
  tables:
  - country
  comparison_rules:
  - columns:
    - avg_life
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_721:
  query_name: spider_721
  question: What is the name of country that has the shortest life expectancy in Asia?
  golden_query: SELECT Name FROM spider_dev.world_1.country WHERE Continent  =  'Asia'
    ORDER BY LifeExpectancy LIMIT 1
  tables:
  - country
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_722:
  query_name: spider_722
  question: Give the name of the country in Asia with the lowest life expectancy.
  golden_query: SELECT Name FROM spider_dev.world_1.country WHERE Continent  =  'Asia'
    ORDER BY LifeExpectancy LIMIT 1
  tables:
  - country
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_723:
  query_name: spider_723
  question: What is the total population and maximum GNP in Asia? Display as total_pop,
    max_gnp.
  golden_query: SELECT sum(Population) as total_pop,  max(GNP) as max_gnp FROM spider_dev.world_1.country
    WHERE Continent  =  'Asia'
  tables:
  - country
  comparison_rules:
  - columns:
    - total_pop
    - max_gnp
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_724:
  query_name: spider_724
  question: How many people live in Asia, and what is the largest GNP among them?
    Display as total_pop, max_gnp.
  golden_query: SELECT sum(Population) as total_pop,  max(GNP) as max_gnp FROM spider_dev.world_1.country
    WHERE Continent  =  'Asia'
  tables:
  - country
  comparison_rules:
  - columns:
    - total_pop
    - max_gnp
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_725:
  query_name: spider_725
  question: What is the average life expectancy in countries of 'Africa' continent
    that have government for 'Republic'? Display as avg_life_expectancy
  golden_query: SELECT avg(LifeExpectancy) as avg_life_expectancy FROM spider_dev.world_1.country
    WHERE Continent  =  'Africa' AND GovernmentForm  =  'Republic'
  tables:
  - country
  comparison_rules:
  - columns:
    - avg_life_expectancy
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_726:
  query_name: spider_726
  question: Give the average life expectancy for in countries of 'Africa' continent
    that have government for 'Republic'? Display as avg_life_expectancy
  golden_query: SELECT avg(LifeExpectancy) as avg_life_expectancy FROM spider_dev.world_1.country
    WHERE Continent  =  'Africa' AND GovernmentForm  =  'Republic'
  tables:
  - country
  comparison_rules:
  - columns:
    - avg_life_expectancy
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_727:
  query_name: spider_727
  question: What is the total surface area of the continents Asia and Europe? Display
    as tot_surface
  golden_query: SELECT sum(SurfaceArea) as tot_surface FROM spider_dev.world_1.country
    WHERE Continent  =  'Asia' OR Continent  =  'Europe'
  tables:
  - country
  comparison_rules:
  - columns:
    - tot_surface
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_728:
  query_name: spider_728
  question: Give the total surface area covered by countries in Asia or Europe.Display
    as tot_surface
  golden_query: SELECT sum(SurfaceArea) as tot_surface FROM spider_dev.world_1.country
    WHERE Continent  =  'Asia' OR Continent  =  'Europe'
  tables:
  - country
  comparison_rules:
  - columns:
    - tot_surface
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_729:
  query_name: spider_729
  question: How many people live in Gelderland district? Display as tot_pop
  golden_query: SELECT sum(Population) as tot_pop FROM spider_dev.world_1.city WHERE
    District  =  'Gelderland'
  tables:
  - city
  comparison_rules:
  - columns:
    - tot_pop
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_730:
  query_name: spider_730
  question: What is the total population of Gelderland district? Display as tot_pop
  golden_query: SELECT sum(Population) as tot_pop FROM spider_dev.world_1.city WHERE
    District  =  'Gelderland'
  tables:
  - city
  comparison_rules:
  - columns:
    - tot_pop
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_731:
  query_name: spider_731
  question: What is the average GNP and total population in all nations whose government
    is 'US Territory'? Display as avg_gnp, total_pop
  golden_query: SELECT avg(GNP) as avg_gnp ,  sum(population) as total_pop FROM spider_dev.world_1.country
    WHERE GovernmentForm  =  'US Territory'
  tables:
  - country
  comparison_rules:
  - columns:
    - avg_gnp
    - total_pop
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_732:
  query_name: spider_732
  question: Give the mean GNP and total population of nations with GovernmentForm
    = 'US Territory'.
  golden_query: SELECT avg(GNP) as mean_gnp,  sum(population) as total_population
    FROM spider_dev.world_1.country WHERE GovernmentForm  =  'US Territory'
  tables:
  - country
  comparison_rules:
  - columns:
    - mean_gnp
    - total_population
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_733:
  query_name: spider_733
  question: How many unique languages are spoken in the world? Display as tot_lan.
  golden_query: SELECT count(DISTINCT LANGUAGE) as tot_lan FROM spider_dev.world_1.countrylanguage
  tables:
  - countrylanguage
  comparison_rules:
  - columns:
    - tot_lan
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_734:
  query_name: spider_734
  question: What is the number of distinct languages used around the world? Display
    as tot_lan.
  golden_query: SELECT count(DISTINCT LANGUAGE) as tot_lan FROM spider_dev.world_1.countrylanguage
  tables:
  - countrylanguage
  comparison_rules:
  - columns:
    - tot_lan
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_735:
  query_name: spider_735
  question: show me the different types of governments in continent 'Africa'?
  golden_query: "SELECT DISTINCT governmentform\nFROM spider_dev.world_1.country\n\
    WHERE\n    continent = 'Africa'\n"
  tables:
  - country
  comparison_rules:
  - columns:
    - governmentform
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_736:
  query_name: spider_736
  question: 'Provide the count of different forms of governments are there in Africa?
    Display as tot_count '
  golden_query: SELECT count(DISTINCT GovernmentForm) as tot_count FROM spider_dev.world_1.country
    WHERE Continent  =  'Africa'
  tables:
  - country
  comparison_rules:
  - columns:
    - tot_count
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_737:
  query_name: spider_737
  question: 'What is the total number of languages used in Aruba?  Display as tot_count '
  golden_query: SELECT COUNT(T2.Language) as tot_count FROM spider_dev.world_1.country
    AS T1 JOIN spider_dev.world_1.countrylanguage AS T2 ON T1.Code  =  T2.CountryCode
    WHERE T1.Name  =  'Aruba'
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - tot_count
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_738:
  query_name: spider_738
  question: How many languages are spoken in Aruba? Display as tot_lang.
  golden_query: SELECT COUNT(T2.Language) as tot_lang FROM spider_dev.world_1.country
    AS T1 JOIN spider_dev.world_1.countrylanguage AS T2 ON T1.Code  =  T2.CountryCode
    WHERE T1.Name  =  'Aruba'
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - tot_lang
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_739:
  query_name: spider_739
  question: How many official languages does Afghanistan have? Display as tot_lang.
  golden_query: SELECT COUNT(*) as tot_lang FROM spider_dev.world_1.country AS T1
    JOIN spider_dev.world_1.countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE
    T1.Name  =  'Afghanistan' AND IsOfficial  =  'T'
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - tot_lang
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_740:
  query_name: spider_740
  question: How many official languages are spoken in Afghanistan? Display as tot_lang.
  golden_query: SELECT COUNT(*) as tot_lang FROM spider_dev.world_1.country AS T1
    JOIN spider_dev.world_1.countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE
    T1.Name  =  'Afghanistan' AND IsOfficial  =  'T'
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - tot_lang
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_741:
  query_name: spider_741
  question: What is name of the country that speaks the largest number of languages?
    Sort by country name. Show me 1 row.
  golden_query: SELECT T1.Name FROM spider_dev.world_1.country AS T1 JOIN spider_dev.world_1.countrylanguage
    AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC, T1.Name
    ASC limit 1
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_742:
  query_name: spider_742
  question: Give the name of the nation that uses the greatest amount of languages.
    Sort by country name. Show me 1 row.
  golden_query: SELECT T1.Name FROM spider_dev.world_1.country AS T1 JOIN spider_dev.world_1.countrylanguage
    AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC, T1.Name
    ASC limit 1
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_743:
  query_name: spider_743
  question: Which continent has the most diverse languages?
  golden_query: SELECT T1.Continent FROM spider_dev.world_1.country AS T1 JOIN spider_dev.world_1.countrylanguage
    AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC
    LIMIT 1
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - Continent
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_744:
  query_name: spider_744
  question: Which continent speaks the most languages?
  golden_query: SELECT T1.Continent FROM spider_dev.world_1.country AS T1 JOIN spider_dev.world_1.countrylanguage
    AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC
    LIMIT 1
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - Continent
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_745:
  query_name: spider_745
  question: How many countries speak both English and Dutch? Display as tot_count.
  golden_query: SELECT COUNT(*) as tot_count FROM (SELECT T1.Name FROM spider_dev.world_1.country
    AS T1 JOIN spider_dev.world_1.countrylanguage AS T2 ON T1.Code  =  T2.CountryCode
    WHERE T2.Language  =  'English' INTERSECT SELECT T1.Name FROM spider_dev.world_1.country
    AS T1 JOIN spider_dev.world_1.countrylanguage AS T2 ON T1.Code  =  T2.CountryCode
    WHERE T2.Language  =  'Dutch')
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - tot_count
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_746:
  query_name: spider_746
  question: What is the number of nations that use both English and Dutch?Display
    as tot_count.
  golden_query: SELECT COUNT(*) as tot_count FROM (SELECT T1.Name FROM spider_dev.world_1.country
    AS T1 JOIN spider_dev.world_1.countrylanguage AS T2 ON T1.Code  =  T2.CountryCode
    WHERE T2.Language  =  'English' INTERSECT SELECT T1.Name FROM spider_dev.world_1.country
    AS T1 JOIN spider_dev.world_1.countrylanguage AS T2 ON T1.Code  =  T2.CountryCode
    WHERE T2.Language  =  'Dutch')
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - tot_count
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_747:
  query_name: spider_747
  question: What are the names of nations speak both English and French? This need
    not be official language
  golden_query: SELECT T1.Name FROM spider_dev.world_1.country AS T1 JOIN spider_dev.world_1.countrylanguage
    AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' INTERSECT
    SELECT T1.Name FROM spider_dev.world_1.country AS T1 JOIN spider_dev.world_1.countrylanguage
    AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French'
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_748:
  query_name: spider_748
  question: Give the names of nations that speak both English and French.
  golden_query: SELECT T1.Name FROM spider_dev.world_1.country AS T1 JOIN spider_dev.world_1.countrylanguage
    AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' INTERSECT
    SELECT T1.Name FROM spider_dev.world_1.country AS T1 JOIN spider_dev.world_1.countrylanguage
    AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French'
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_749:
  query_name: spider_749
  question: What are the names of nations where both English and French are official
    languages?
  golden_query: SELECT T1.Name FROM spider_dev.world_1.country AS T1 JOIN spider_dev.world_1.countrylanguage
    AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.IsOfficial  =  'T'
    INTERSECT SELECT T1.Name FROM spider_dev.world_1.country AS T1 JOIN spider_dev.world_1.countrylanguage
    AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French' AND T2.IsOfficial  =  'T'
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_750:
  query_name: spider_750
  question: Give the names of countries with English and French as official languages.
  golden_query: SELECT T1.Name FROM spider_dev.world_1.country AS T1 JOIN spider_dev.world_1.countrylanguage
    AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.IsOfficial  =  'T'
    INTERSECT SELECT T1.Name FROM spider_dev.world_1.country AS T1 JOIN spider_dev.world_1.countrylanguage
    AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French' AND T2.IsOfficial  =  'T'
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_751:
  query_name: spider_751
  question: What is the number of distinct continents where Chinese is spoken? Display
    it as num_cont
  golden_query: SELECT COUNT( DISTINCT Continent) as num_cont FROM spider_dev.world_1.country
    AS T1 JOIN spider_dev.world_1.countrylanguage AS T2 ON T1.Code  =  T2.CountryCode
    WHERE T2.Language  =  'Chinese'
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - num_cont
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_752:
  query_name: spider_752
  question: How many continents speak Chinese? Display it as num_cont
  golden_query: SELECT COUNT( DISTINCT Continent) as num_cont FROM spider_dev.world_1.country
    AS T1 JOIN spider_dev.world_1.countrylanguage AS T2 ON T1.Code  =  T2.CountryCode
    WHERE T2.Language  =  'Chinese'
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - num_cont
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_753:
  query_name: spider_753
  question: What are the regions that use English or Dutch?
  golden_query: SELECT DISTINCT T1.Region FROM spider_dev.world_1.country AS T1 JOIN
    spider_dev.world_1.countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English'
    OR T2.Language  =  'Dutch'
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - Region
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_754:
  query_name: spider_754
  question: Which regions speak Dutch or English?
  golden_query: SELECT DISTINCT T1.Region FROM spider_dev.world_1.country AS T1 JOIN
    spider_dev.world_1.countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English'
    OR T2.Language  =  'Dutch'
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - Region
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_755:
  query_name: spider_755
  question: What are the countries where either English or Dutch is the official language
    ?
  golden_query: select t1.name from spider_dev.world_1.country as t1 join spider_dev.world_1.countrylanguage
    as t2 on t1.code  =  t2.countrycode where t2.language  =  'English' and isofficial  =  'T'
    union select t1.name from spider_dev.world_1.country as t1 join spider_dev.world_1.countrylanguage
    as t2 on t1.code  =  t2.countrycode where t2.language  =  'Dutch' and isofficial  =  'T'
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_756:
  query_name: spider_756
  question: Which countries have either English or Dutch as an official language?
  golden_query: SELECT * FROM spider_dev.world_1.country AS T1 JOIN spider_dev.world_1.countrylanguage
    AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND IsOfficial  =  'T'
    UNION SELECT * FROM spider_dev.world_1.country AS T1 JOIN spider_dev.world_1.countrylanguage
    AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Dutch' AND IsOfficial  =  'T'
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - code
    - name
    - continent
    - region
    - surfacearea
    - indepyear
    - population
    - lifeexpectancy
    - gnp
    - gnpold
    - localname
    match: oneof
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_757:
  query_name: spider_757
  question: Which language is the most popular on the Asian continent?
  golden_query: SELECT T2.Language, SUM(T2.percentage * T1.population) FROM spider_dev.world_1.country
    AS T1 JOIN spider_dev.world_1.countrylanguage AS T2 ON T1.Code  =  T2.CountryCode
    WHERE T1.Continent  =  'Asia' GROUP BY T2.Language ORDER BY SUM(T2.percentage
    * T1.population) DESC limit 1
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - Language
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_758:
  query_name: spider_758
  question: What is the language that is used by the largest number of Asian nations?
  golden_query: SELECT T2.Language FROM spider_dev.world_1.country AS T1 JOIN spider_dev.world_1.countrylanguage
    AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  'Asia' GROUP BY T2.Language
    ORDER BY COUNT (*) DESC LIMIT 1
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - Language
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_759:
  query_name: spider_759
  question: Which languages are spoken by only one country in republic governments?
    GovernmentForm='Republic' is called republic government
  golden_query: SELECT T2.Language FROM spider_dev.world_1.country AS T1 JOIN spider_dev.world_1.countrylanguage
    AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  'Republic' GROUP
    BY T2.Language HAVING COUNT(*)  =  1
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - Language
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_760:
  query_name: spider_760
  question: What languages are only used by a single country with a republic government?
    GovernmentForm='Republic' is called republic government
  golden_query: SELECT T2.Language FROM spider_dev.world_1.country AS T1 JOIN spider_dev.world_1.countrylanguage
    AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  'Republic' GROUP
    BY T2.Language HAVING COUNT(*)  =  1
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - Language
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_761:
  query_name: spider_761
  question: Find the city with the largest population that uses English.
  golden_query: SELECT T1.Name ,  T1.Population FROM spider_dev.world_1.city AS T1
    JOIN spider_dev.world_1.countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode
    WHERE T2.Language  =  'English' ORDER BY T1.Population DESC LIMIT 1
  tables:
  - city
  - countrylanguage
  comparison_rules:
  - columns:
    - Name
    - Population
    match: oneof
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_762:
  query_name: spider_762
  question: What is the most populace city that speaks English?
  golden_query: SELECT T1.Name ,  T1.Population FROM spider_dev.world_1.city AS T1
    JOIN spider_dev.world_1.countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode
    WHERE T2.Language  =  'English' ORDER BY T1.Population DESC LIMIT 1
  tables:
  - city
  - countrylanguage
  comparison_rules:
  - columns:
    - Name
    - Population
    match: oneof
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_763:
  query_name: spider_763
  question: Find the name, population and expected life length of asian country with
    the largest area?
  golden_query: SELECT Name ,  Population ,  LifeExpectancy FROM spider_dev.world_1.country
    WHERE Continent  =  'Asia' ORDER BY SurfaceArea DESC LIMIT 1
  tables:
  - country
  comparison_rules:
  - columns:
    - Name
    - Population
    - LifeExpectancy
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_764:
  query_name: spider_764
  question: What are the name, population, and life expectancy of the largest Asian
    country by land?
  golden_query: SELECT Name ,  Population ,  LifeExpectancy FROM spider_dev.world_1.country
    WHERE Continent  =  'Asia' ORDER BY SurfaceArea DESC LIMIT 1
  tables:
  - country
  comparison_rules:
  - columns:
    - Name
    - Population
    - LifeExpectancy
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_765:
  query_name: spider_765
  question: What is average life expectancy in the countries where English is not
    the official language? Display average as avg_life_expectancy
  golden_query: SELECT avg(LifeExpectancy) as avg_life_expectancy FROM spider_dev.world_1.country
    WHERE code IN (SELECT T2.countrycode FROM spider_dev.world_1.country AS T1 JOIN
    spider_dev.world_1.countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English'
    AND T2.IsOfficial  =  'F')
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - avg_life_expectancy
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_766:
  query_name: spider_766
  question: Give the mean life expectancy of countries in which English is not the
    official language. Display as avg_life
  golden_query: SELECT avg(LifeExpectancy) as avg_life FROM spider_dev.world_1.country
    WHERE Name NOT IN (SELECT T1.Name FROM spider_dev.world_1.country AS T1 JOIN spider_dev.world_1.countrylanguage
    AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.IsOfficial  =  'T')
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - avg_life
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_767:
  query_name: spider_767
  question: Compute the total population of people who do not speak 'English' across
    all countries, considering the percentage of 'English' speakers in multilingual
    countries. Display the result as total_non_english_speaking_population.
  golden_query: "SELECT\n    SUM(c.population - (\n        c.population * l.percentage
    / 100\n    )) AS total_non_english_speaking_population\nFROM spider_dev.world_1.country
    AS c\nINNER JOIN spider_dev.world_1.countrylanguage AS l\n    ON c.code = l.countrycode\n\
    WHERE\n    l.language = 'English'\n"
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - total_non_english_speaking_population
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_768:
  query_name: spider_768
  question: "How many people are there across countries that do not speak 'English',
    considering the percentage of 'English' speakers in multilingual countries? Compute
    the results for unique countries. Display as total_population\n"
  golden_query: "WITH english_speaking_countries AS (\n    SELECT\n        countrycode,\n\
    \        percentage\n    FROM spider_dev.world_1.countrylanguage\n    WHERE\n\
    \        language = 'English'\n),\n\ncountry_population AS (\n    SELECT\n   \
    \     code,\n        population\n    FROM spider_dev.world_1.country\n)\n\nSELECT\n\
    \    SUM(\n        country_population.population * (\n            1 - COALESCE(english_speaking_countries.percentage,
    0) / 100\n        )\n    ) AS total_population\nFROM country_population\nLEFT
    JOIN english_speaking_countries\n    ON country_population.code = english_speaking_countries.countrycode\n"
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - total_population
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_769:
  query_name: spider_769
  question: What is the official language spoken in the country whose head of state
    is Beatrix?
  golden_query: SELECT T2.Language FROM spider_dev.world_1.country AS T1 JOIN spider_dev.world_1.countrylanguage
    AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  'Beatrix' AND T2.IsOfficial  =  'T'
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - Language
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_770:
  query_name: spider_770
  question: What is the official language used in the country the name of whose head
    of state is Beatrix.
  golden_query: SELECT T2.Language FROM spider_dev.world_1.country AS T1 JOIN spider_dev.world_1.countrylanguage
    AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  'Beatrix' AND T2.IsOfficial  =  'T'
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - Language
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_771:
  query_name: spider_771
  question: What is the total number of unique official languages spoken in the countries
    that are founded before 1930? Display as tot_lan.
  golden_query: SELECT count(DISTINCT T2.Language) as tot_lan FROM spider_dev.world_1.country
    AS T1 JOIN spider_dev.world_1.countrylanguage AS T2 ON T1.Code  =  T2.CountryCode
    WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  'T'
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - tot_lan
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_772:
  query_name: spider_772
  question: For the countries founded before 1930, what is the total number of distinct
    official languages? Display as tot_lan.
  golden_query: SELECT count(DISTINCT T2.Language) as tot_lan FROM spider_dev.world_1.country
    AS T1 JOIN spider_dev.world_1.countrylanguage AS T2 ON T1.Code  =  T2.CountryCode
    WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  'T'
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - tot_lan
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_773:
  query_name: spider_773
  question: What are the countries that have greater surface area than any country
    in Europe?
  golden_query: SELECT Name FROM spider_dev.world_1.country WHERE SurfaceArea  >  (SELECT
    min(SurfaceArea) FROM spider_dev.world_1.country WHERE Continent  =  'Europe')
  tables:
  - country
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_774:
  query_name: spider_774
  question: Which countries have greater area than that of any country in Europe?
  golden_query: SELECT Name FROM spider_dev.world_1.country WHERE SurfaceArea  >  (SELECT
    min(SurfaceArea) FROM spider_dev.world_1.country WHERE Continent  =  'Europe')
  tables:
  - country
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_775:
  query_name: spider_775
  question: What are the African countries that have a  population less than any country
    in Asia?
  golden_query: SELECT Name FROM spider_dev.world_1.country WHERE Continent  =  'Africa'  AND
    population  <  (SELECT max(population) FROM spider_dev.world_1.country WHERE Continent  =  'Asia')
  tables:
  - country
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_776:
  query_name: spider_776
  question: Which African countries have a smaller population than that of any country
    in Asia?
  golden_query: SELECT Name FROM spider_dev.world_1.country WHERE Continent  =  'Africa'  AND
    population  <  (SELECT min(population) FROM spider_dev.world_1.country WHERE Continent  =  'Asia')
  tables:
  - country
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_777:
  query_name: spider_777
  question: Which Asian countries have a population that is larger than any country
    in Africa?
  golden_query: SELECT Name FROM spider_dev.world_1.country WHERE Continent  =  'Asia'  AND
    population  >  (SELECT max(population) FROM spider_dev.world_1.country WHERE Continent  =  'Africa')
  tables:
  - country
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_778:
  query_name: spider_778
  question: What are the Asian countries which have a population larger than that
    of any country in Africa?
  golden_query: SELECT Name FROM spider_dev.world_1.country WHERE Continent  =  'Asia'  AND
    population  >  (SELECT min(population) FROM spider_dev.world_1.country WHERE Continent  =  'Africa')
  tables:
  - country
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_779:
  query_name: spider_779
  question: What are the unique country codes for countries that do not speak 'English'?
  golden_query: SELECT distinct CountryCode FROM spider_dev.world_1.countrylanguage
    where language != 'English'
  tables:
  - countrylanguage
  comparison_rules:
  - columns:
    - CountryCode
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_780:
  query_name: spider_780
  question: Return distinct country codes for countries that do not speak 'English'.
  golden_query: SELECT distinct CountryCode FROM spider_dev.world_1.countrylanguage
    where language != 'English'
  tables:
  - countrylanguage
  comparison_rules:
  - columns:
    - CountryCode
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_781:
  query_name: spider_781
  question: What are the unique country codes of countries where people use languages
    other than English?
  golden_query: SELECT DISTINCT CountryCode FROM spider_dev.world_1.countrylanguage
    WHERE LANGUAGE != 'English'
  tables:
  - countrylanguage
  comparison_rules:
  - columns:
    - CountryCode
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_782:
  query_name: spider_782
  question: Give the unique country codes for countries in which people speak langauges
    that are not English.
  golden_query: SELECT DISTINCT CountryCode FROM spider_dev.world_1.countrylanguage
    WHERE LANGUAGE != 'English'
  tables:
  - countrylanguage
  comparison_rules:
  - columns:
    - CountryCode
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_783:
  query_name: spider_783
  question: What are the codes of the countries that do not speak English and whose
    government forms are not Republic?
  golden_query: SELECT Code FROM spider_dev.world_1.country WHERE GovernmentForm !=
    'Republic' EXCEPT SELECT CountryCode FROM spider_dev.world_1.countrylanguage WHERE
    LANGUAGE  =  'English'
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - Code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_784:
  query_name: spider_784
  question: Return the unique codes of countries that do not (speak 'English' and
    have government form 'Republic').
  golden_query: "SELECT distinct Code FROM spider_dev.world_1.country t1 inner join
    spider_dev.world_1.countrylanguage t2 WHERE GovernmentForm != 'Republic' and LANGUAGE\
    \  !=  'English'\t\nand t1.code = t2.countrycode"
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - Code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_785:
  query_name: spider_785
  question: Which cities are in European countries where English is not the official
    language?
  golden_query: SELECT DISTINCT T2.Name FROM spider_dev.world_1.country AS T1 JOIN
    spider_dev.world_1.city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe'
    AND T1.Name  IN (SELECT T3.Name FROM spider_dev.world_1.country AS T3 JOIN spider_dev.world_1.countrylanguage
    AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'F' AND T4.Language  =  'English')
  tables:
  - country
  - city
  - countrylanguage
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_786:
  query_name: spider_786
  question: What are the names of cities in continent 'Europe' for which 'English'
    is not the official language?
  golden_query: SELECT DISTINCT T2.Name FROM spider_dev.world_1.country AS T1 JOIN
    spider_dev.world_1.city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe'
    AND T1.Name  IN (SELECT T3.Name FROM spider_dev.world_1.country AS T3 JOIN spider_dev.world_1.countrylanguage
    AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'F' AND T4.Language  =  'English')
  tables:
  - country
  - city
  - countrylanguage
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_787:
  query_name: spider_787
  question: Which unique cities are in Asian countries where Chinese is the official
    language ?
  golden_query: select distinct t3.name from spider_dev.world_1.country as t1 join
    spider_dev.world_1.countrylanguage as t2 on t1.code  =  t2.countrycode join spider_dev.world_1.city
    as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  'T' and t2.language  =  'Chinese'
    and t1.continent  =  'Asia'
  tables:
  - country
  - city
  - countrylanguage
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_788:
  query_name: spider_788
  question: Return the different names of cities that are in Asia and for which Chinese
    is the official language. Show unique names.
  golden_query: SELECT DISTINCT T3.Name FROM spider_dev.world_1.country AS T1 JOIN
    spider_dev.world_1.countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN spider_dev.world_1.city
    AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese'
    AND T1.Continent  =  'Asia'
  tables:
  - country
  - city
  - countrylanguage
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_789:
  query_name: spider_789
  question: What are the name, independence year, and surface area of the country
    with the smallest population?. Sort by name. Show me 1 row.
  golden_query: SELECT Name ,  SurfaceArea ,  IndepYear, population FROM spider_dev.world_1.country
    ORDER BY Population, Name LIMIT 1
  tables:
  - country
  comparison_rules:
  - columns:
    - Name
    - SurfaceArea
    - IndepYear
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_790:
  query_name: spider_790
  question: Give the name, year of independence, and surface area of the country that
    has the lowest population. Sort by name. Show me 1 row.
  golden_query: SELECT Name ,  SurfaceArea ,  IndepYear, population FROM spider_dev.world_1.country
    ORDER BY Population, Name LIMIT 1
  tables:
  - country
  comparison_rules:
  - columns:
    - Name
    - SurfaceArea
    - IndepYear
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_791:
  query_name: spider_791
  question: What are the population, name and leader of the country with the largest
    area?
  golden_query: SELECT Name ,  population ,  HeadOfState FROM spider_dev.world_1.country
    ORDER BY SurfaceArea DESC LIMIT 1
  tables:
  - country
  comparison_rules:
  - columns:
    - Name
    - population
    - HeadOfState
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_792:
  query_name: spider_792
  question: Give the name, population, and head of state for the country that has
    the largest area.
  golden_query: SELECT Name ,  population ,  HeadOfState FROM spider_dev.world_1.country
    ORDER BY SurfaceArea DESC LIMIT 1
  tables:
  - country
  comparison_rules:
  - columns:
    - Name
    - population
    - HeadOfState
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_793:
  query_name: spider_793
  question: Return the country name and the numbers of languages spoken for each country
    that speaks at least 3 languages. Display as tot_lan
  golden_query: SELECT COUNT(T2.Language) as tot_lan,  T1.Name FROM spider_dev.world_1.country
    AS T1 JOIN spider_dev.world_1.countrylanguage AS T2 ON T1.Code  =  T2.CountryCode
    GROUP BY T1.Name HAVING COUNT(*)  >  2
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - tot_lan
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_794:
  query_name: spider_794
  question: What are the names of countries that speak more than 2 languages, as well
    as how many languages they speak?Display as tot_lan
  golden_query: SELECT COUNT(T2.Language) as tot_lan,  T1.Name FROM spider_dev.world_1.country
    AS T1 JOIN spider_dev.world_1.countrylanguage AS T2 ON T1.Code  =  T2.CountryCode
    GROUP BY T1.Name HAVING COUNT(*)  >  2
  tables:
  - country
  - countrylanguage
  comparison_rules:
  - columns:
    - tot_lan
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_795:
  query_name: spider_795
  question: Find the number of cities in each district whose population is greater
    than the average population of cities? Display as tot_city
  golden_query: SELECT count(*) as tot_city,  District FROM spider_dev.world_1.city
    WHERE Population  >  (SELECT avg(Population) FROM spider_dev.world_1.city) GROUP
    BY District
  tables:
  - city
  comparison_rules:
  - columns:
    - tot_city
    - District
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_796:
  query_name: spider_796
  question: How many cities in each district have a population that is above the average
    population across all cities?Display as tot_city
  golden_query: SELECT count(*) as tot_city,  District FROM spider_dev.world_1.city
    WHERE Population  >  (SELECT avg(Population) FROM spider_dev.world_1.city) GROUP
    BY District
  tables:
  - city
  comparison_rules:
  - columns:
    - tot_city
    - District
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_797:
  query_name: spider_797
  question: Find the government form name and total population for each government
    form whose average life expectancy is longer than 72. Display as tot_pop
  golden_query: SELECT sum(Population) as tot_pop,  GovernmentForm FROM spider_dev.world_1.country
    GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
  tables:
  - country
  comparison_rules:
  - columns:
    - tot_pop
    - GovernmentForm
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_798:
  query_name: spider_798
  question: What are the different government forms and what is the total population
    of each for government forms that have an average life expectancy greater than
    72? Display as tot_pop
  golden_query: SELECT sum(Population) as tot_pop,  GovernmentForm FROM spider_dev.world_1.country
    GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
  tables:
  - country
  comparison_rules:
  - columns:
    - tot_pop
    - GovernmentForm
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_799:
  query_name: spider_799
  question: Find the average life expectancy and total population for each continent
    where the average life expectancy is shorter than 72? Display as tot_pop, avg_life
  golden_query: SELECT sum(Population) as tot_pop,  avg(LifeExpectancy) as avg_life,  Continent
    FROM spider_dev.world_1.country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
  tables:
  - country
  comparison_rules:
  - columns:
    - tot_pop
    - avg_life
    - Continent
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_800:
  query_name: spider_800
  question: What are the different continents and the total popuation and average
    life expectancy corresponding to each, for continents that have an average life
    expectancy less than 72? Display as tot_pop, avg_life
  golden_query: SELECT sum(Population) as tot_pop,  avg(LifeExpectancy) as avg_life,  Continent
    FROM spider_dev.world_1.country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
  tables:
  - country
  comparison_rules:
  - columns:
    - tot_pop
    - avg_life
    - Continent
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_801:
  query_name: spider_801
  question: What are the names and areas of countries with the top 5 largest area?
  golden_query: SELECT Name ,  SurfaceArea FROM spider_dev.world_1.country ORDER BY
    SurfaceArea DESC LIMIT 5
  tables:
  - country
  comparison_rules:
  - columns:
    - Name
    - SurfaceArea
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_802:
  query_name: spider_802
  question: Return the names and surface areas of the 5 largest countries.
  golden_query: SELECT Name ,  SurfaceArea FROM spider_dev.world_1.country ORDER BY
    SurfaceArea DESC LIMIT 5
  tables:
  - country
  comparison_rules:
  - columns:
    - Name
    - SurfaceArea
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_803:
  query_name: spider_803
  question: What are names of countries with the top 3 largest population?
  golden_query: SELECT Name FROM spider_dev.world_1.country ORDER BY Population DESC
    LIMIT 3
  tables:
  - country
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_804:
  query_name: spider_804
  question: Return the names of the 3 most populated countries.
  golden_query: SELECT Name FROM spider_dev.world_1.country ORDER BY Population DESC
    LIMIT 3
  tables:
  - country
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_805:
  query_name: spider_805
  question: What are the names of the nations with the 3 lowest populations? Sort
    by population, name.
  golden_query: SELECT Name FROM spider_dev.world_1.country ORDER BY Population, Name
    ASC LIMIT 3
  tables:
  - country
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_806:
  query_name: spider_806
  question: Return the names of the 3 countries with the fewest people. Sort by population
    and name
  golden_query: SELECT Name FROM spider_dev.world_1.country ORDER BY Population, name
    ASC LIMIT 3
  tables:
  - country
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_807:
  query_name: spider_807
  question: how many countries are in Asia? Display as num_cou
  golden_query: SELECT count(*) as num_cou FROM spider_dev.world_1.country WHERE continent  =  'Asia'
  tables:
  - country
  comparison_rules:
  - columns:
    - num_cou
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_808:
  query_name: spider_808
  question: Count the number of countries in Asia.Display as num_cou
  golden_query: SELECT count(*) as num_cou FROM spider_dev.world_1.country WHERE continent  =  'Asia'
  tables:
  - country
  comparison_rules:
  - columns:
    - num_cou
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_809:
  query_name: spider_809
  question: What are the names of the countries that are in the continent of Europe
    and have a population of 80000?
  golden_query: SELECT Name FROM spider_dev.world_1.country WHERE continent  =  'Europe'
    AND Population  =  '80000'
  tables:
  - country
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_810:
  query_name: spider_810
  question: Give the names of countries that are in Europe and have a population equal
    to 80000.
  golden_query: SELECT Name FROM spider_dev.world_1.country WHERE continent  =  'Europe'
    AND Population  =  '80000'
  tables:
  - country
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_811:
  query_name: spider_811
  question: What is the total population and average area of countries in the continent
    of North America whose area is bigger than 3000 ?
  golden_query: select sum(population) as total_population,  avg(surfacearea) as average_area
    from spider_dev.world_1.country where continent  =  'North America' and surfacearea  >  3000
  tables:
  - country
  comparison_rules:
  - columns:
    - total_population
    - average_area
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_812:
  query_name: spider_812
  question: Give the total population and average surface area corresponding to countries
    in North America that have a surface area greater than 3000 . Display as total_population,
    avg_surface_area
  golden_query: select sum(population) as total_population,  avg(surfacearea) as avg_surface_area
    from spider_dev.world_1.country where continent  =  'North America' and surfacearea  >  3000
  tables:
  - country
  comparison_rules:
  - columns:
    - total_population
    - avg_surface_area
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_813:
  query_name: spider_813
  question: What are the cities whose population is between 160000 and 900000?
  golden_query: SELECT name FROM spider_dev.world_1.city WHERE Population BETWEEN
    160000 AND 900000
  tables:
  - city
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_814:
  query_name: spider_814
  question: Return the names of cities that have a population between 160000 and 900000
    .
  golden_query: select name from spider_dev.world_1.city where population between
    160000 and 900000
  tables:
  - city
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_815:
  query_name: spider_815
  question: Which language is spoken by the largest number of countries?
  golden_query: SELECT LANGUAGE FROM spider_dev.world_1.countrylanguage GROUP BY LANGUAGE
    ORDER BY count(*) DESC LIMIT 1
  tables:
  - countrylanguage
  comparison_rules:
  - columns:
    - LANGUAGE
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_816:
  query_name: spider_816
  question: Give the language that is spoken in the most countries.
  golden_query: SELECT LANGUAGE FROM spider_dev.world_1.countrylanguage GROUP BY LANGUAGE
    ORDER BY count(*) DESC LIMIT 1
  tables:
  - countrylanguage
  comparison_rules:
  - columns:
    - LANGUAGE
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_817:
  query_name: spider_817
  question: What is the language spoken by the largest percentage of people in each
    country? Display as max_percentage
  golden_query: "WITH max_percentage AS (\nSELECT\ncountrycode,\nMAX(percentage) AS
    max_percentage\nFROM spider_dev.world_1.countrylanguage\nGROUP BY\ncountrycode\n
    )\n\nSELECT\ncl.countrycode,\ncl.language,\ncl.percentage as max_percentage \n
    FROM spider_dev.world_1.countrylanguage AS cl\nINNER JOIN max_percentage AS mp\n
    ON cl.countrycode = mp.countrycode AND cl.percentage = mp.max_percentage"
  tables:
  - countrylanguage
  comparison_rules:
  - columns:
    - LANGUAGE
    - CountryCode
    - max_percentage
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_818:
  query_name: spider_818
  question: What are the country codes of the different countries, and what are the
    languages spoken by the greatest percentage of people for each?
  golden_query: "WITH max_percentage AS (\n    SELECT\n        countrycode,\n    \
    \    MAX(percentage) AS max_percentage\n    FROM spider_dev.world_1.countrylanguage\n\
    \    GROUP BY\n        countrycode\n)\n\nSELECT\n    cl.countrycode,\n    cl.language\n
    FROM spider_dev.world_1.countrylanguage AS cl\nINNER JOIN max_percentage AS mp\n\
    \    ON cl.countrycode = mp.countrycode AND cl.percentage = mp.max_percentage"
  tables:
  - countrylanguage
  comparison_rules:
  - columns:
    - LANGUAGE
    - CountryCode
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_819:
  query_name: spider_819
  question: What is the total number of countries where Spanish is spoken by the largest
    percentage of people? Largest percentage can be defined as anything > 50%. Display
    as total_countries.
  golden_query: select count(*) as total_countries from (select countrycode, sum(percentage)
    as total from spider_dev.world_1.countrylanguage where language = 'Spanish' group
    by countrycode) a where total > 50
  tables:
  - countrylanguage
  comparison_rules:
  - columns:
    - total_countries
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_820:
  query_name: spider_820
  question: Count the number of countries for which Spanish is the predominantly spoken
    language. Display as total_countries
  golden_query: select count(*) as total_countries from (select countrycode, sum(percentage)
    as total from spider_dev.world_1.countrylanguage where language = 'Spanish' group
    by countrycode) a where total > 50
  tables:
  - countrylanguage
  comparison_rules:
  - columns:
    - total_countries
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_821:
  query_name: spider_821
  question: Compute the total percentage of people speaking 'Spanish' language in
    each country and tell me the country code of countries where it is spoken by >
    50%. Display as countrycode and total_percentage
  golden_query: "WITH spanish_speaking AS (\n    SELECT\n        countrycode,\n  \
    \      SUM(percentage) AS total_percentage\n    FROM spider_dev.world_1.countrylanguage\n\
    \    WHERE\n        language = 'Spanish'\n    GROUP BY\n        countrycode\n\
    )\n\nSELECT\n    countrycode,\n    total_percentage\nFROM spanish_speaking\nWHERE\n\
    \    total_percentage > 50"
  tables:
  - countrylanguage
  comparison_rules:
  - columns:
    - countrycode
    - total_percentage
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_822:
  query_name: spider_822
  question: Compute the total percentage of people speaking 'Spanish' language in
    each country and return the codes of countries where it is the predominantly spoken
    language with > 50%. Display as countrycode and total_percentage.
  golden_query: SELECT CountryCode , sum(Percentage) as total_percentage FROM spider_dev.world_1.countrylanguage
    WHERE LANGUAGE = 'Spanish' GROUP BY CountryCode having sum(percentage) > 50
  tables:
  - countrylanguage
  comparison_rules:
  - columns:
    - countrycode
    - total_percentage
    match: exact
  auto_select_schema: 'false'
  schemas:
  - world_1
spider_823:
  query_name: spider_823
  question: How many conductors are there? Display as num_cond
  golden_query: SELECT count(*) as num_cond FROM spider_dev.orchestra.conductor
  tables:
  - conductor
  comparison_rules:
  - columns:
    - num_cond
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_824:
  query_name: spider_824
  question: Count the number of conductors. Display as num_cond
  golden_query: SELECT count(*) as num_cond FROM spider_dev.orchestra.conductor
  tables:
  - conductor
  comparison_rules:
  - columns:
    - num_cond
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_825:
  query_name: spider_825
  question: List the names of conductors in ascending order of age.
  golden_query: SELECT Name FROM spider_dev.orchestra.conductor ORDER BY Age ASC
  tables:
  - conductor
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_826:
  query_name: spider_826
  question: What are the names of conductors, ordered by age?
  golden_query: SELECT Name FROM spider_dev.orchestra.conductor ORDER BY Age ASC
  tables:
  - conductor
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_827:
  query_name: spider_827
  question: What are the names of conductors whose nationalities are not 'USA'?
  golden_query: SELECT Name FROM spider_dev.orchestra.conductor WHERE Nationality
    != 'USA'
  tables:
  - conductor
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_828:
  query_name: spider_828
  question: Return the names of conductors that do not have the nationality 'USA'.
  golden_query: SELECT Name FROM spider_dev.orchestra.conductor WHERE Nationality
    != 'USA'
  tables:
  - conductor
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_829:
  query_name: spider_829
  question: What are the record companies of orchestras in descending order of years
    in which they were founded?
  golden_query: SELECT Record_Company FROM spider_dev.orchestra.orchestra ORDER BY
    Year_of_Founded DESC
  tables:
  - orchestra
  comparison_rules:
  - columns:
    - Record_Company
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_830:
  query_name: spider_830
  question: Return the record companies of orchestras, sorted descending by the years
    in which they were founded.
  golden_query: SELECT Record_Company FROM spider_dev.orchestra.orchestra ORDER BY
    Year_of_Founded DESC
  tables:
  - orchestra
  comparison_rules:
  - columns:
    - Record_Company
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_831:
  query_name: spider_831
  question: What is the average attendance of shows? Display as avg_att
  golden_query: SELECT avg(Attendance) as avg_att FROM spider_dev.orchestra.SHOW
  tables:
  - SHOW
  comparison_rules:
  - columns:
    - avg_att
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_832:
  query_name: spider_832
  question: Return the average attendance across all shows. Display as avg_att.
  golden_query: SELECT avg(Attendance) as avg_att FROM spider_dev.orchestra.SHOW
  tables:
  - SHOW
  comparison_rules:
  - columns:
    - avg_att
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_833:
  query_name: spider_833
  question: What are the maximum and minimum share of performances whose type is not
    'Live final'. Display as min_share, max_share.
  golden_query: SELECT min(SHARE) as min_share ,  max(SHARE) as max_share FROM spider_dev.orchestra.performance WHERE TYPE != 'Live final'
  tables:
    - performance
  comparison_rules:
  - columns:
    - min_share
    - max_share
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_834:
  query_name: spider_834
  question: Return the maximum and minimum shares for performances that do not have
    the type 'Live final'. Display as min_share, max_share.
  golden_query: SELECT min(SHARE) as min_share ,  max(SHARE) as max_share FROM spider_dev.orchestra.performance WHERE TYPE != 'Live final'
  tables:
    - performance
  comparison_rules:
  - columns:
    - min_share
    - max_share
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_835:
  query_name: spider_835
  question: How many different nationalities do conductors have? Display as num_nat.
  golden_query: SELECT count(DISTINCT Nationality) as num_nat FROM spider_dev.orchestra.conductor
  tables:
  - conductor
  comparison_rules:
  - columns:
    - num_nat
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_836:
  query_name: spider_836
  question: Count the number of different nationalities of conductors.Display as num_nat.
  golden_query: SELECT count(DISTINCT Nationality) as num_nat FROM spider_dev.orchestra.conductor
  tables:
  - conductor
  comparison_rules:
  - columns:
    - num_nat
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_837:
  query_name: spider_837
  question: List names of conductors in descending order of years of work.
  golden_query: SELECT Name FROM spider_dev.orchestra.conductor ORDER BY Year_of_Work
    DESC
  tables:
  - conductor
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_838:
  query_name: spider_838
  question: What are the names of conductors, sorted descending by the number of years
    they have worked?
  golden_query: SELECT Name FROM spider_dev.orchestra.conductor ORDER BY Year_of_Work
    DESC
  tables:
  - conductor
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_839:
  query_name: spider_839
  question: List the name of the conductor with the most years of work.
  golden_query: SELECT Name FROM spider_dev.orchestra.conductor ORDER BY Year_of_Work
    DESC LIMIT 1
  tables:
  - conductor
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_840:
  query_name: spider_840
  question: What is the name of the conductor who has worked the greatest number of
    years?
  golden_query: SELECT Name FROM spider_dev.orchestra.conductor ORDER BY Year_of_Work
    DESC LIMIT 1
  tables:
  - conductor
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_841:
  query_name: spider_841
  question: Show the names of conductors and the orchestras they have conducted.
  golden_query: SELECT T1.Name ,  T2.Orchestra FROM spider_dev.orchestra.conductor
    AS T1 JOIN spider_dev.orchestra.orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID
  tables:
  - orchestra
  - conductor
  comparison_rules:
  - columns:
    - Name
    - Orchestra
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_842:
  query_name: spider_842
  question: What are the names of conductors as well as the corresonding orchestras
    that they have conducted?
  golden_query: SELECT T1.Name ,  T2.Orchestra FROM spider_dev.orchestra.conductor
    AS T1 JOIN spider_dev.orchestra.orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID
  tables:
  - orchestra
  - conductor
  comparison_rules:
  - columns:
    - Name
    - Orchestra
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_843:
  query_name: spider_843
  question: Show the names of conductors that have conducted more than one orchestras.
  golden_query: SELECT T1.Name FROM spider_dev.orchestra.conductor AS T1 JOIN spider_dev.orchestra.orchestra
    AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Name HAVING COUNT(*)  >  1
  tables:
  - orchestra
  - conductor
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_844:
  query_name: spider_844
  question: What are the names of conductors who have conducted at more than one orchestra?
  golden_query: SELECT T1.Name FROM spider_dev.orchestra.conductor AS T1 JOIN spider_dev.orchestra.orchestra
    AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Name HAVING COUNT(*)  >  1
  tables:
  - orchestra
  - conductor
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_845:
  query_name: spider_845
  question: Show the name of the conductor that has conducted the most number of orchestras.
    Sort by number of orchestras. Show 1 row.
  golden_query: SELECT T1.Name FROM spider_dev.orchestra.conductor AS T1 JOIN spider_dev.orchestra.orchestra
    AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Name ORDER BY COUNT(*)
    DESC LIMIT 1
  tables:
  - orchestra
  - conductor
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_846:
  query_name: spider_846
  question: What is the name of the conductor who has conducted the most orchestras?
  golden_query: SELECT T1.Name FROM spider_dev.orchestra.conductor AS T1 JOIN spider_dev.orchestra.orchestra
    AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Name ORDER BY COUNT(*)
    DESC LIMIT 1
  tables:
  - orchestra
  - conductor
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_847:
  query_name: spider_847
  question: Please show the name of the conductor that has conducted orchestras founded
    after 2008.
  golden_query: SELECT T1.Name FROM spider_dev.orchestra.conductor AS T1 JOIN spider_dev.orchestra.orchestra
    AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008
  tables:
  - orchestra
  - conductor
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_848:
  query_name: spider_848
  question: What are the names of conductors who have conducted orchestras founded
    after the year 2008?
  golden_query: SELECT T1.Name FROM spider_dev.orchestra.conductor AS T1 JOIN spider_dev.orchestra.orchestra
    AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008
  tables:
  - orchestra
  - conductor
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_849:
  query_name: spider_849
  question: Please show the different record companies and the corresponding number
    of orchestras. Display as num_orc.
  golden_query: SELECT Record_Company ,  COUNT(*) as num_orc FROM spider_dev.orchestra.orchestra
    GROUP BY Record_Company
  tables:
  - orchestra
  comparison_rules:
  - columns:
    - Record_Company
    - num_orc
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_850:
  query_name: spider_850
  question: How many orchestras does each record company manage? Display as num_orc.
  golden_query: SELECT Record_Company ,  COUNT(*) as num_orc FROM spider_dev.orchestra.orchestra
    GROUP BY Record_Company
  tables:
  - orchestra
  comparison_rules:
  - columns:
    - Record_Company
    - num_orc
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_851:
  query_name: spider_851
  question: Please show the record formats of orchestras in ascending order of count.
  golden_query: SELECT Major_Record_Format FROM spider_dev.orchestra.orchestra GROUP
    BY Major_Record_Format ORDER BY COUNT(*) ASC
  tables:
  - orchestra
  comparison_rules:
  - columns:
    - Major_Record_Format
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_852:
  query_name: spider_852
  question: What are the major record formats of orchestras, sorted by their frequency?
  golden_query: SELECT Major_Record_Format FROM spider_dev.orchestra.orchestra GROUP
    BY Major_Record_Format ORDER BY COUNT(*) ASC
  tables:
  - orchestra
  comparison_rules:
  - columns:
    - Major_Record_Format
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_853:
  query_name: spider_853
  question: List the record company shared by the most number of orchestras.
  golden_query: SELECT Record_Company FROM spider_dev.orchestra.orchestra GROUP BY
    Record_Company ORDER BY COUNT(*) DESC LIMIT 1
  tables:
  - orchestra
  comparison_rules:
  - columns:
    - Record_Company
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_854:
  query_name: spider_854
  question: What is the record company used by the greatest number of orchestras?
  golden_query: SELECT Record_Company FROM spider_dev.orchestra.orchestra GROUP BY
    Record_Company ORDER BY COUNT(*) DESC LIMIT 1
  tables:
  - orchestra
  comparison_rules:
  - columns:
    - Record_Company
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_855:
  query_name: spider_855
  question: List the names of orchestras that have no performance.
  golden_query: SELECT Orchestra FROM spider_dev.orchestra.orchestra WHERE Orchestra_ID
    NOT IN (SELECT Orchestra_ID FROM spider_dev.orchestra.performance)
  tables:
  - orchestra
  - performance
  comparison_rules:
  - columns:
    - Orchestra
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_856:
  query_name: spider_856
  question: What are the orchestras that do not have any performances?
  golden_query: SELECT Orchestra FROM spider_dev.orchestra.orchestra WHERE Orchestra_ID
    NOT IN (SELECT Orchestra_ID FROM spider_dev.orchestra.performance)
  tables:
  - orchestra
  - performance
  comparison_rules:
  - columns:
    - Orchestra
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_857:
  query_name: spider_857
  question: Show the record companies shared by orchestras founded before 2003 and
    after 2003.
  golden_query: SELECT Record_Company FROM spider_dev.orchestra.orchestra WHERE Year_of_Founded  <  2003
    INTERSECT SELECT Record_Company FROM spider_dev.orchestra.orchestra WHERE Year_of_Founded  >  2003
  tables:
  - orchestra
  comparison_rules:
  - columns:
    - Record_Company
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_858:
  query_name: spider_858
  question: What are the record companies that are used by both orchestras founded
    before 2003 and those founded after 2003?
  golden_query: SELECT Record_Company FROM spider_dev.orchestra.orchestra WHERE Year_of_Founded  <  2003
    INTERSECT SELECT Record_Company FROM spider_dev.orchestra.orchestra WHERE Year_of_Founded  >  2003
  tables:
  - orchestra
  comparison_rules:
  - columns:
    - Record_Company
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_859:
  query_name: spider_859
  question: Find the number of orchestras whose record format is 'CD' or 'DVD'. Display
    as num_orc.
  golden_query: SELECT COUNT(*) as num_orc FROM spider_dev.orchestra.orchestra WHERE
    Major_Record_Format  =  'CD' OR Major_Record_Format  =  'DVD'
  tables:
  - orchestra
  comparison_rules:
  - columns:
    - num_orc
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_860:
  query_name: spider_860
  question: Count the number of orchestras that have CD or DVD as their record format.Display
    as num_orc.
  golden_query: SELECT COUNT(*) as num_orc FROM spider_dev.orchestra.orchestra WHERE
    Major_Record_Format  =  'CD' OR Major_Record_Format  =  'DVD'
  tables:
  - orchestra
  comparison_rules:
  - columns:
    - num_orc
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_861:
  query_name: spider_861
  question: Show the years in which orchestras that have given more than one performance
    are founded.
  golden_query: "select tt1.year_of_founded from (\nSELECT T1.Orchestra_ID FROM spider_dev.orchestra.orchestra
    AS T1 JOIN spider_dev.orchestra.performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID
    GROUP BY T1.orchestra_id HAVING COUNT(*)  >  1)  as tt2, spider_dev.orchestra.orchestra
    as tt1  where tt1.orchestra_id = tt2.orchestra_id"
  tables:
  - orchestra
  - performance
  comparison_rules:
  - columns:
    - Year_of_Founded
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_862:
  query_name: spider_862
  question: What are years of founding for orchestras that have had more than a single
    performance?
  golden_query: "select tt1.year_of_founded from (\nSELECT T1.Orchestra_ID FROM spider_dev.orchestra.orchestra
    AS T1 JOIN spider_dev.orchestra.performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID
    GROUP BY T1.orchestra_id HAVING COUNT(*)  >  1)  as tt2, spider_dev.orchestra.orchestra
    as tt1  where tt1.orchestra_id = tt2.orchestra_id"
  tables:
  - orchestra
  - performance
  comparison_rules:
  - columns:
    - Year_of_Founded
    match: exact
  auto_select_schema: 'false'
  schemas:
  - orchestra
spider_863:
  query_name: spider_863
  question: How many high schoolers are there? Display as num_stu
  golden_query: SELECT count(*) as num_stu FROM spider_dev.network_1.Highschooler
  tables:
  - Highschooler
  comparison_rules:
  - columns:
    - num_stu
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_864:
  query_name: spider_864
  question: Count the number of high schoolers.Display as num_stu
  golden_query: SELECT count(*) as num_stu FROM spider_dev.network_1.Highschooler
  tables:
  - Highschooler
  comparison_rules:
  - columns:
    - num_stu
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_865:
  query_name: spider_865
  question: Show the names and grades of each high schooler.
  golden_query: SELECT name ,  grade FROM spider_dev.network_1.Highschooler
  tables:
  - Highschooler
  comparison_rules:
  - columns:
    - name
    - grade
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_866:
  query_name: spider_866
  question: What are the names and grades for each high schooler?
  golden_query: SELECT name ,  grade FROM spider_dev.network_1.Highschooler
  tables:
  - Highschooler
  comparison_rules:
  - columns:
    - name
    - grade
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_867:
  query_name: spider_867
  question: Show all the grades of the high schoolers.
  golden_query: SELECT distinct grade FROM spider_dev.network_1.Highschooler
  tables:
  - Highschooler
  comparison_rules:
  - columns:
    - grade
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_868:
  query_name: spider_868
  question: What is the grade of each high schooler?
  golden_query: SELECT grade FROM spider_dev.network_1.Highschooler
  tables:
  - Highschooler
  comparison_rules:
  - columns:
    - grade
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_869:
  query_name: spider_869
  question: What grade is Kyle in?
  golden_query: SELECT grade FROM spider_dev.network_1.Highschooler WHERE name  =  'Kyle'
  tables:
  - Highschooler
  comparison_rules:
  - columns:
    - grade
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_870:
  query_name: spider_870
  question: Return the grade for the high schooler named Kyle.
  golden_query: SELECT grade FROM spider_dev.network_1.Highschooler WHERE name  =  'Kyle'
  tables:
  - Highschooler
  comparison_rules:
  - columns:
    - grade
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_871:
  query_name: spider_871
  question: Show the names of all high schoolers in grade 10.
  golden_query: SELECT name FROM spider_dev.network_1.Highschooler WHERE grade  =  10
  tables:
  - Highschooler
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_872:
  query_name: spider_872
  question: What are the names of all high schoolers in grade 10?
  golden_query: SELECT name FROM spider_dev.network_1.Highschooler WHERE grade  =  10
  tables:
  - Highschooler
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_873:
  query_name: spider_873
  question: Show the ID of the high schooler named Kyle.
  golden_query: SELECT ID FROM spider_dev.network_1.Highschooler WHERE name  =  'Kyle'
  tables:
  - Highschooler
  comparison_rules:
  - columns:
    - ID
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_874:
  query_name: spider_874
  question: What is Kyle's id?
  golden_query: SELECT ID FROM spider_dev.network_1.Highschooler WHERE name  =  'Kyle'
  tables:
  - Highschooler
  comparison_rules:
  - columns:
    - ID
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_875:
  query_name: spider_875
  question: How many high schoolers are there in grade 9 or 10? Display as num_sch
  golden_query: SELECT count(*) as num_sch FROM spider_dev.network_1.Highschooler
    WHERE grade  =  9 OR grade  =  10
  tables:
  - Highschooler
  comparison_rules:
  - columns:
    - num_sch
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_876:
  query_name: spider_876
  question: Count the number of high schoolers in grades 9 or 10. Display as num_sch
  golden_query: SELECT count(*) as num_sch FROM spider_dev.network_1.Highschooler
    WHERE grade  =  9 OR grade  =  10
  tables:
  - Highschooler
  comparison_rules:
  - columns:
    - num_sch
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_877:
  query_name: spider_877
  question: Show the number of high schoolers for each grade. Display as num_sch.
  golden_query: SELECT grade ,  count(*) as num_sch FROM spider_dev.network_1.Highschooler
    GROUP BY grade
  tables:
  - Highschooler
  comparison_rules:
  - columns:
    - grade
    - num_sch
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_878:
  query_name: spider_878
  question: How many high schoolers are in each grade?Display as num_sch.
  golden_query: SELECT grade ,  count(*) as num_sch FROM spider_dev.network_1.Highschooler
    GROUP BY grade
  tables:
  - Highschooler
  comparison_rules:
  - columns:
    - grade
    - num_sch
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_879:
  query_name: spider_879
  question: Which grade has the most high schoolers? Show me 1 row.
  golden_query: SELECT grade FROM spider_dev.network_1.Highschooler GROUP BY grade
    ORDER BY count(*) DESC LIMIT 1
  tables:
  - Highschooler
  comparison_rules:
  - columns:
    - grade
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_880:
  query_name: spider_880
  question: Return the grade that has the greatest number of high schoolers.
  golden_query: SELECT grade FROM spider_dev.network_1.Highschooler GROUP BY grade
    ORDER BY count(*) DESC LIMIT 1
  tables:
  - Highschooler
  comparison_rules:
  - columns:
    - grade
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_881:
  query_name: spider_881
  question: Show me all grades that have at least 4 students.
  golden_query: SELECT grade FROM spider_dev.network_1.Highschooler GROUP BY grade
    HAVING count(*)  >=  4
  tables:
  - Highschooler
  comparison_rules:
  - columns:
    - grade
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_882:
  query_name: spider_882
  question: Which grades have 4 or more high schoolers?
  golden_query: SELECT grade FROM spider_dev.network_1.Highschooler GROUP BY grade
    HAVING count(*)  >=  4
  tables:
  - Highschooler
  comparison_rules:
  - columns:
    - grade
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_883:
  query_name: spider_883
  question: For each of the student ID, show me the student id and the number of friends
    for them. Display as num_friends
  golden_query: SELECT student_id ,  count(*) as num_friends FROM spider_dev.network_1.Friend
    GROUP BY student_id
  tables:
  - Friend
  comparison_rules:
  - columns:
    - student_id
    - num_friends
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_884:
  query_name: spider_884
  question: How many friends does each student have? Display count as num_friends
  golden_query: "WITH friend_count AS (\nSELECT\nstudent_id,\nCOUNT(friend_id) AS
    num_friends\nFROM spider_dev.network_1.friend\nGROUP BY\nstudent_id\n)\n\nSELECT\n
    hs.id,\nhs.name,\nhs.grade,\nCOALESCE(fc.num_friends, 0) AS num_friends\nFROM
    spider_dev.network_1.highschooler AS hs\nLEFT JOIN friend_count AS fc\nON hs.id
    = fc.student_id\nORDER BY\nhs.id"
  tables:
  - highschooler
  - friend
  comparison_rules:
  - columns:
    - id
    - num_friends
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_885:
  query_name: spider_885
  question: Show all names of high school students and their corresponding number
    of friends. Group by student_id.
  golden_query: "WITH friend_count AS (\n    SELECT\n        student_id,\n       \
    \ COUNT(friend_id) AS num_friends\n    FROM spider_dev.network_1.friend\n    GROUP
    BY\n        student_id\n)\n\nSELECT\n    h.name,\n    COALESCE(fc.num_friends,
    0) AS num_friends\nFROM spider_dev.network_1.highschooler AS h\nLEFT JOIN friend_count
    AS fc\n    ON h.id = fc.student_id\n"
  tables:
  - highschooler
  - friend
  comparison_rules:
  - columns:
    - name
    - num_friends
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_886:
  query_name: spider_886
  question: What are all the names of the high schoolers and how many friends does
    each have? Group by student_id.
  golden_query: "WITH friend_count AS (\n    SELECT\n        student_id,\n       \
    \ COUNT(friend_id) AS num_friends\n    FROM spider_dev.network_1.friend\n    GROUP
    BY\n        student_id\n)\n\nSELECT\n    h.name,\n    COALESCE(fc.num_friends,
    0) AS num_friends\nFROM spider_dev.network_1.highschooler AS h\nLEFT JOIN friend_count
    AS fc\n    ON h.id = fc.student_id\n"
  tables:
  - highschooler
  - friend
  comparison_rules:
  - columns:
    - name
    - num_friends
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_887:
  query_name: spider_887
  question: What is the name of the high schooler who has the greatest number of friends?
    Show me 1 row.
  golden_query: select name from spider_dev.network_1.Highschooler where id in (SELECT
    T1.student_id FROM spider_dev.network_1.Friend AS T1 JOIN spider_dev.network_1.Highschooler
    AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC
    LIMIT 1)
  tables:
  - Highschooler
  - Friend
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_888:
  query_name: spider_888
  question: Return the name of the high school student with the most friends. Show
    me 1 row
  golden_query: select name from spider_dev.network_1.Highschooler where id in (SELECT
    T1.student_id FROM spider_dev.network_1.Friend AS T1 JOIN spider_dev.network_1.Highschooler
    AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC
    LIMIT 1)
  tables:
  - Highschooler
  - Friend
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_889:
  query_name: spider_889
  question: Show the names of high schoolers who have at least 3 friends.
  golden_query: "select T2.name, T2.id from spider_dev.network_1.Highschooler T2 where
    T2.id IN(\nSELECT T2.id FROM spider_dev.network_1.Friend AS T1 JOIN spider_dev.network_1.Highschooler
    AS T2 ON T1.student_id  =  T2.id  GROUP BY T2.id HAVING count(*)  >=  3)"
  tables:
  - Highschooler
  - Friend
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_890:
  query_name: spider_890
  question: What are the names of high schoolers who have 3 or more friends?
  golden_query: "select T2.name, T2.id from spider_dev.network_1.Highschooler T2 where
    T2.id IN(\nSELECT T2.id FROM spider_dev.network_1.Friend AS T1 JOIN spider_dev.network_1.Highschooler
    AS T2 ON T1.student_id  =  T2.id  GROUP BY T2.id HAVING count(*)  >=  3)"
  tables:
  - Highschooler
  - Friend
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_891:
  query_name: spider_891
  question: Show the names of all of the high schooler Kyle's friends.
  golden_query: SELECT T3.name FROM spider_dev.network_1.Friend AS T1 JOIN spider_dev.network_1.Highschooler
    AS T2 ON T1.student_id  =  T2.id JOIN spider_dev.network_1.Highschooler AS T3
    ON T1.friend_id  =  T3.id WHERE T2.name  =  'Kyle'
  tables:
  - Highschooler
  - Friend
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_892:
  query_name: spider_892
  question: Return the names of friends of the high school student Kyle.
  golden_query: SELECT T3.name FROM spider_dev.network_1.Friend AS T1 JOIN spider_dev.network_1.Highschooler
    AS T2 ON T1.student_id  =  T2.id JOIN spider_dev.network_1.Highschooler AS T3
    ON T1.friend_id  =  T3.id WHERE T2.name  =  'Kyle'
  tables:
  - Highschooler
  - Friend
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_893:
  query_name: spider_893
  question: How many friends does the high school student Kyle have? Display as num_friends
  golden_query: SELECT count(*) as num_friends FROM spider_dev.network_1.Friend AS
    T1 JOIN spider_dev.network_1.Highschooler AS T2 ON T1.student_id  =  T2.id WHERE
    T2.name  =  'Kyle'
  tables:
  - Highschooler
  - Friend
  comparison_rules:
  - columns:
    - num_friends
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_894:
  query_name: spider_894
  question: Count the number of friends Kyle has. Display as num_friends
  golden_query: SELECT count(*) as num_friends FROM spider_dev.network_1.Friend AS
    T1 JOIN spider_dev.network_1.Highschooler AS T2 ON T1.student_id  =  T2.id WHERE
    T2.name  =  'Kyle'
  tables:
  - Highschooler
  - Friend
  comparison_rules:
  - columns:
    - num_friends
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_895:
  query_name: spider_895
  question: Show ids of all students who do not have any friends.
  golden_query: SELECT id FROM spider_dev.network_1.Highschooler EXCEPT SELECT student_id
    FROM spider_dev.network_1.Friend
  tables:
  - Highschooler
  - Friend
  comparison_rules:
  - columns:
    - id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_896:
  query_name: spider_896
  question: What are the ids of high school students who do not have friends?
  golden_query: SELECT id FROM spider_dev.network_1.Highschooler EXCEPT SELECT student_id
    FROM spider_dev.network_1.Friend
  tables:
  - Highschooler
  - Friend
  comparison_rules:
  - columns:
    - id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_897:
  query_name: spider_897
  question: Show names of all high school students who do not have any friends.
  golden_query: SELECT name FROM spider_dev.network_1.Highschooler EXCEPT SELECT T2.name
    FROM spider_dev.network_1.Friend AS T1 JOIN spider_dev.network_1.Highschooler
    AS T2 ON T1.student_id  =  T2.id
  tables:
  - Highschooler
  - Friend
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_898:
  query_name: spider_898
  question: What are the names of students who have no friends?
  golden_query: SELECT name FROM spider_dev.network_1.Highschooler EXCEPT SELECT T2.name
    FROM spider_dev.network_1.Friend AS T1 JOIN spider_dev.network_1.Highschooler
    AS T2 ON T1.student_id  =  T2.id
  tables:
  - Highschooler
  - Friend
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_899:
  query_name: spider_899
  question: Show the ids of high schoolers who have friends and are also liked by
    someone else.
  golden_query: SELECT student_id FROM spider_dev.network_1.Friend INTERSECT SELECT
    liked_id FROM spider_dev.network_1.Likes
  tables:
  - Friend
  - Likes
  comparison_rules:
  - columns:
    - student_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_900:
  query_name: spider_900
  question: What are the ids of students who both have friends and are liked?
  golden_query: select distinct t1.student_id from spider_dev.network_1.friend t1
    inner join spider_dev.network_1.likes t2 on t1.student_id = t2.student_id;
  tables:
  - friend
  - likes
  comparison_rules:
  - columns:
    - student_id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_901:
  query_name: spider_901
  question: Show name of all students who have some friends and also are liked by
    someone else.
  golden_query: SELECT T2.name FROM spider_dev.network_1.Friend AS T1 JOIN spider_dev.network_1.Highschooler
    AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM spider_dev.network_1.Likes
    AS T1 JOIN spider_dev.network_1.Highschooler AS T2 ON T1.liked_id  =  T2.id
  tables:
  - Highschooler
  - Friend
  - Likes
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_902:
  query_name: spider_902
  question: What are the distinct names of high schoolers who both have friends and
    are liked?
  golden_query: SELECT distinct T2.name FROM spider_dev.network_1.Friend AS T1 JOIN
    spider_dev.network_1.Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT
    T2.name FROM spider_dev.network_1.Likes AS T1 JOIN spider_dev.network_1.Highschooler
    AS T2 ON T1.student_id  =  T2.id
  tables:
  - Highschooler
  - Friend
  - Likes
  comparison_rules:
  - columns:
    - name
    match: oneof
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_903:
  query_name: spider_903
  question: Count the number of likes for each student id. Display as num_likes.
  golden_query: SELECT student_id ,  count(*) as num_likes FROM spider_dev.network_1.Likes
    GROUP BY student_id
  tables:
  - Likes
  comparison_rules:
  - columns:
    - student_id
    - num_likes
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_904:
  query_name: spider_904
  question: How many likes correspond to each student id?Display as num_likes.
  golden_query: SELECT student_id ,  count(*) as num_likes FROM spider_dev.network_1.Likes
    GROUP BY student_id
  tables:
  - Likes
  comparison_rules:
  - columns:
    - student_id
    - num_likes
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_905:
  query_name: spider_905
  question: Show the names of high schoolers who have likes, and numbers of likes
    for each.
  golden_query: "select b.name, num_likes from (\nSELECT T2.id , count(*) as num_likes
    FROM spider_dev.network_1.Likes AS T1 JOIN spider_dev.network_1.Highschooler AS
    T2 ON T1.student_id = T2.id GROUP BY T2.id) a \ninner join spider_dev.network_1.Highschooler
    b on a.id = b.id;"
  tables:
  - Highschooler
  - Likes
  comparison_rules:
  - columns:
    - name
    - num_likes
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_906:
  query_name: spider_906
  question: What are the names of high schoolers who have likes, and how many likes
    does each have?
  golden_query: "select b.name, num_likes from (\nSELECT T2.id , count(*) as num_likes
    FROM spider_dev.network_1.Likes AS T1 JOIN spider_dev.network_1.Highschooler AS
    T2 ON T1.student_id = T2.id GROUP BY T2.id) a \ninner join spider_dev.network_1.Highschooler
    b on a.id = b.id;"
  tables:
  - Highschooler
  - Likes
  comparison_rules:
  - columns:
    - name
    - num_likes
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_907:
  query_name: spider_907
  question: What is the name of the high schooler who has the greatest number of likes?
    Group by id and then compute the name. Show me 1 row
  golden_query: select name from spider_dev.network_1.Highschooler a inner join (SELECT
    T2.id FROM spider_dev.network_1.Likes AS T1 JOIN spider_dev.network_1.Highschooler
    AS T2 ON T1.student_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC limit 1)
    b on a.id = b.id limit 1
  tables:
  - Highschooler
  - Likes
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_908:
  query_name: spider_908
  question: Give the name of the student with the most likes. Sort by number of likes
    and show me 1 row.
  golden_query: SELECT T2.name FROM spider_dev.network_1.Likes AS T1 JOIN spider_dev.network_1.Highschooler
    AS T2 ON T1.student_id  =  T2.id GROUP BY T2.name ORDER BY count(*) DESC LIMIT
    1
  tables:
  - Highschooler
  - Likes
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_909:
  query_name: spider_909
  question: Show the id of students who have at least 2 likes.
  golden_query: "select b.name from (\nSELECT T2.id FROM spider_dev.network_1.Likes
    AS T1 JOIN spider_dev.network_1.Highschooler AS T2 ON T1.student_id = T2.id GROUP
    BY T2.id HAVING count(*) >= 2) a \ninner join spider_dev.network_1.Highschooler
    b on b.id = a.id"
  tables:
  - Highschooler
  - Likes
  comparison_rules:
  - columns:
    - id
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_910:
  query_name: spider_910
  question: What are the names of students who have 2 or more likes?
  golden_query: select name from spider_dev.network_1.Highschooler a inner join (SELECT
    T2.id FROM spider_dev.network_1.Likes AS T1 JOIN spider_dev.network_1.Highschooler
    AS T2 ON T1.student_id  =  T2.id GROUP BY T2.id HAVING count(*)  >=  2) b on a.id
    = b.id;
  tables:
  - Highschooler
  - Likes
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_911:
  query_name: spider_911
  question: Show the names of students who have a grade higher than 5 and have at
    least 2 friends.
  golden_query: SELECT T2.name FROM spider_dev.network_1.Friend AS T1 JOIN spider_dev.network_1.Highschooler
    AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T2.name HAVING
    count(*)  >=  2
  tables:
  - Highschooler
  - Friend
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_912:
  query_name: spider_912
  question: What are the names of high schoolers who have a grade of over 5 and have
    2 or more friends?
  golden_query: SELECT T2.name FROM spider_dev.network_1.Friend AS T1 JOIN spider_dev.network_1.Highschooler
    AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T2.name HAVING
    count(*)  >=  2
  tables:
  - Highschooler
  - Friend
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_913:
  query_name: spider_913
  question: How many likes does Kyle have? Display as num_likes.
  golden_query: SELECT count(*) as num_likes FROM spider_dev.network_1.Likes AS T1
    JOIN spider_dev.network_1.Highschooler AS T2 ON T1.student_id  =  T2.id WHERE
    T2.name  =  'Kyle'
  tables:
  - Highschooler
  - Likes
  comparison_rules:
  - columns:
    - num_likes
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_914:
  query_name: spider_914
  question: Return the number of likes that the high schooler named Kyle has. Display
    as num_likes.
  golden_query: SELECT count(*) as num_likes FROM spider_dev.network_1.Likes AS T1
    JOIN spider_dev.network_1.Highschooler AS T2 ON T1.student_id  =  T2.id WHERE
    T2.name  =  'Kyle'
  tables:
  - Highschooler
  - Likes
  comparison_rules:
  - columns:
    - num_likes
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_915:
  query_name: spider_915
  question: Find the average grade of all students who have some friends. Display
    average grade as average_grade
  golden_query: SELECT avg(grade) as average_grade FROM spider_dev.network_1.Highschooler
    WHERE id IN (SELECT T1.student_id FROM spider_dev.network_1.Friend AS T1 JOIN
    spider_dev.network_1.Highschooler AS T2 ON T1.student_id  =  T2.id)
  tables:
  - Highschooler
  - Friend
  comparison_rules:
  - columns:
    - average_grade
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_916:
  query_name: spider_916
  question: What is the average grade of students who have friends? Display as avg_grade
  golden_query: SELECT avg(grade) as avg_grade FROM spider_dev.network_1.Highschooler
    WHERE id IN (SELECT T1.student_id FROM spider_dev.network_1.Friend AS T1 JOIN
    spider_dev.network_1.Highschooler AS T2 ON T1.student_id  =  T2.id)
  tables:
  - Highschooler
  - Friend
  comparison_rules:
  - columns:
    - avg_grade
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_917:
  query_name: spider_917
  question: Find the minimum grade of students who have no friends. Display as min_grade.
  golden_query: SELECT min(grade) as min_grade FROM spider_dev.network_1.Highschooler
    WHERE id NOT IN (SELECT T1.student_id FROM spider_dev.network_1.Friend AS T1 JOIN
    spider_dev.network_1.Highschooler AS T2 ON T1.student_id  =  T2.id)
  tables:
  - Highschooler
  - Friend
  comparison_rules:
  - columns:
    - min_grade
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_918:
  query_name: spider_918
  question: What is the lowest grade of students who do not have any friends? Display
    as min_grade.
  golden_query: SELECT min(grade) as min_grade FROM spider_dev.network_1.Highschooler
    WHERE id NOT IN (SELECT T1.student_id FROM spider_dev.network_1.Friend AS T1 JOIN
    spider_dev.network_1.Highschooler AS T2 ON T1.student_id  =  T2.id)
  tables:
  - Highschooler
  - Friend
  comparison_rules:
  - columns:
    - min_grade
    match: exact
  auto_select_schema: 'false'
  schemas:
  - network_1
spider_919:
  query_name: spider_919
  question: Which states have both owners and professionals living there?
  golden_query: SELECT state FROM spider_dev.dog_kennels.Owners INTERSECT SELECT state
    FROM spider_dev.dog_kennels.Professionals
  tables:
  - Owners
  - Professionals
  comparison_rules:
  - columns:
    - state
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_920:
  query_name: spider_920
  question: Find the states where both owners and professionals live.
  golden_query: SELECT state FROM spider_dev.dog_kennels.Owners INTERSECT SELECT state
    FROM spider_dev.dog_kennels.Professionals
  tables:
  - Owners
  - Professionals
  comparison_rules:
  - columns:
    - state
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_921:
  query_name: spider_921
  question: What is the average age of the dogs who have gone through any treatments?
    display as avg_age
  golden_query: SELECT avg(age) as avg_age FROM spider_dev.dog_kennels.Dogs WHERE
    dog_id IN ( SELECT dog_id FROM spider_dev.dog_kennels.Treatments )
  tables:
  - Dogs
  - Treatments
  comparison_rules:
  - columns:
    - avg_age
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_922:
  query_name: spider_922
  question: Get unique dog ids and then compute average age of these dogs who went
    through treatments. Display as AVERAGE_AGE
  golden_query: SELECT avg(age) as AVERAGE_AGE FROM spider_dev.dog_kennels.Dogs WHERE
    dog_id IN ( SELECT dog_id FROM spider_dev.dog_kennels.Treatments )
  tables:
  - Dogs
  - Treatments
  comparison_rules:
  - columns:
    - AVERAGE_AGE
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_923:
  query_name: spider_923
  question: Which professionals live in the state of Indiana or have done treatment
    on more than 2 treatments? List his or her id, last name and cell phone.
  golden_query: SELECT professional_id ,  last_name ,  cell_number FROM spider_dev.dog_kennels.Professionals
    WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number
    FROM spider_dev.dog_kennels.Professionals AS T1 JOIN spider_dev.dog_kennels.Treatments
    AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id
    ,  T1.last_name ,  T1.cell_number HAVING count(*)  >  2
  tables:
  - Professionals
  - Treatments
  comparison_rules:
  - columns:
    - professional_id
    - last_name
    - cell_number
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_924:
  query_name: spider_924
  question: Find the id, last name and cell phone of the professionals who live in
    the state of Indiana or have performed more than two treatments.
  golden_query: SELECT professional_id ,  last_name ,  cell_number FROM spider_dev.dog_kennels.Professionals
    T0 WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number
    FROM spider_dev.dog_kennels.Professionals AS T1 JOIN spider_dev.dog_kennels.Treatments
    AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id
    ,  T1.last_name ,  T1.cell_number HAVING count(*)  >  2
  tables:
  - Professionals
  - Treatments
  comparison_rules:
  - columns:
    - professional_id
    - last_name
    - cell_number
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_925:
  query_name: spider_925
  question: Which dogs have not cost their owner more than 1000 for treatment ? List
    the dog names .
  golden_query: select name from spider_dev.dog_kennels.dogs where dog_id  in ( select
    dog_id from spider_dev.dog_kennels.treatments group by dog_id having sum(cost_of_treatment)  <=  1000
    )
  tables:
  - dogs
  - treatments
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_926:
  query_name: spider_926
  question: What are the names of the dogs for which the owner has not spend more
    than 1000 for treatment ?
  golden_query: select name from spider_dev.dog_kennels.dogs where dog_id  in ( select
    dog_id from spider_dev.dog_kennels.treatments group by dog_id having sum(cost_of_treatment)  <=  1000
    )
  tables:
  - dogs
  - treatments
  comparison_rules:
  - columns:
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_927:
  query_name: spider_927
  question: Which first names are used for professionals or owners but are not used
    as dog names?
  golden_query: SELECT first_name FROM spider_dev.dog_kennels.Professionals UNION
    SELECT first_name FROM spider_dev.dog_kennels.Owners EXCEPT SELECT name FROM spider_dev.dog_kennels.Dogs
  tables:
  - Owners
  - Dogs
  - Professionals
  comparison_rules:
  - columns:
    - first_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_928:
  query_name: spider_928
  question: Find the first names that are used for professionals or owners but are
    not used as dog names.
  golden_query: SELECT first_name FROM spider_dev.dog_kennels.Professionals UNION
    SELECT first_name FROM spider_dev.dog_kennels.Owners EXCEPT SELECT name FROM spider_dev.dog_kennels.Dogs
  tables:
  - Owners
  - Dogs
  - Professionals
  comparison_rules:
  - columns:
    - first_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_929:
  query_name: spider_929
  question: Which professional did not operate any treatment on dogs? List the professional's
    id, role and email.
  golden_query: SELECT professional_id ,  role_code ,  email_address FROM spider_dev.dog_kennels.Professionals
    EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM spider_dev.dog_kennels.Professionals
    AS T1 JOIN spider_dev.dog_kennels.Treatments AS T2 ON T1.professional_id  =  T2.professional_id
  tables:
  - Professionals
  - Treatments
  comparison_rules:
  - columns:
    - professional_id
    - role_code
    - email_address
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_930:
  query_name: spider_930
  question: Give me the id, role and email of the professionals who did not perform
    any treatment on dogs.
  golden_query: SELECT professional_id ,  role_code ,  email_address FROM spider_dev.dog_kennels.Professionals
    EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM spider_dev.dog_kennels.Professionals
    AS T1 JOIN spider_dev.dog_kennels.Treatments AS T2 ON T1.professional_id  =  T2.professional_id
  tables:
  - Professionals
  - Treatments
  comparison_rules:
  - columns:
    - professional_id
    - role_code
    - email_address
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_931:
  query_name: spider_931
  question: Which owner owns the most dogs? List the owner id, first name and last
    name.
  golden_query: SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM spider_dev.dog_kennels.Dogs
    AS T1 JOIN spider_dev.dog_kennels.Owners AS T2 ON T1.owner_id  =  T2.owner_id
    GROUP BY T1.owner_id ,  T2.first_name ,  T2.last_name ORDER BY count(*) DESC LIMIT
    1
  tables:
  - Owners
  - Dogs
  comparison_rules:
  - columns:
    - owner_id
    - first_name
    - last_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_932:
  query_name: spider_932
  question: Return the owner id, first name and last name of the owner who has the
    most dogs.
  golden_query: SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM spider_dev.dog_kennels.Dogs
    AS T1 JOIN spider_dev.dog_kennels.Owners AS T2 ON T1.owner_id  =  T2.owner_id
    GROUP BY T1.owner_id ,  T2.first_name ,  T2.last_name ORDER BY count(*) DESC LIMIT
    1
  tables:
  - Owners
  - Dogs
  comparison_rules:
  - columns:
    - owner_id
    - first_name
    - last_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_933:
  query_name: spider_933
  question: Which professionals have done at least two treatments? List the professional's
    id, role, and first name.
  golden_query: SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM spider_dev.dog_kennels.Professionals
    AS T1 JOIN spider_dev.dog_kennels.Treatments AS T2 ON T1.professional_id  =  T2.professional_id
    GROUP BY T1.professional_id ,  T1.role_code ,  T1.first_name HAVING count(*)  >=  2
  tables:
  - Professionals
  - Treatments
  comparison_rules:
  - columns:
    - professional_id
    - role_code
    - first_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_934:
  query_name: spider_934
  question: What are the id, role, and first name of the professionals who have performed
    two or more treatments?
  golden_query: SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM spider_dev.dog_kennels.Professionals
    AS T1 JOIN spider_dev.dog_kennels.Treatments AS T2 ON T1.professional_id  =  T2.professional_id
    GROUP BY T1.professional_id ,  T1.role_code ,  T1.first_name HAVING count(*)  >=  2
  tables:
  - Professionals
  - Treatments
  comparison_rules:
  - columns:
    - professional_id
    - role_code
    - first_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_935:
  query_name: spider_935
  question: What is the name of the breed with the most dogs?
  golden_query: SELECT T1.breed_name FROM spider_dev.dog_kennels.Breeds AS T1 JOIN
    spider_dev.dog_kennels.Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY
    T1.breed_name ORDER BY count(*) DESC LIMIT 1
  tables:
  - Dogs
  - Breeds
  comparison_rules:
  - columns:
    - breed_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_936:
  query_name: spider_936
  question: Which breed do the most dogs have? Give me the breed name.
  golden_query: SELECT T1.breed_name FROM spider_dev.dog_kennels.Breeds AS T1 JOIN
    spider_dev.dog_kennels.Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY
    T1.breed_name ORDER BY count(*) DESC LIMIT 1
  tables:
  - Dogs
  - Breeds
  comparison_rules:
  - columns:
    - breed_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_937:
  query_name: spider_937
  question: Which owner has paid for the most treatments on his or her dogs? List
    the owner id and last name.
  golden_query: SELECT T1.owner_id ,  T1.last_name FROM spider_dev.dog_kennels.Owners
    AS T1 JOIN spider_dev.dog_kennels.Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN
    spider_dev.dog_kennels.Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id
    ,  T1.last_name ORDER BY count(*) DESC LIMIT 1
  tables:
  - Owners
  - Dogs
  - Treatments
  comparison_rules:
  - columns:
    - owner_id
    - last_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_938:
  query_name: spider_938
  question: Find out the total cost of treatment for the dogs. Tell me the owner id
    and last name of the owner for such dogs who spent the highest on treatments.
    Show me 1 row.
  golden_query: "WITH total_cost AS (\nSELECT\ndog_id,\nSUM(cost_of_treatment) AS
    total_cost_of_treatment\nFROM spider_dev.dog_kennels.treatments\nGROUP BY\ndog_id\n
    ),\n\nmax_cost AS (\nSELECT MAX(total_cost_of_treatment) AS max_cost_of_treatment\n
    FROM total_cost\n)\n\nSELECT\no.owner_id,\no.last_name\nFROM spider_dev.dog_kennels.owners
    AS o\nINNER JOIN spider_dev.dog_kennels.dogs AS d\nON o.owner_id = d.owner_id\n
    INNER JOIN total_cost AS tc\nON d.dog_id = tc.dog_id\nINNER JOIN max_cost AS mc\n
    ON tc.total_cost_of_treatment = mc.max_cost_of_treatment"
  tables:
  - dogs
  - owners
  - treatments
  comparison_rules:
  - columns:
    - owner_id
    - last_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_939:
  query_name: spider_939
  question: What is the description of the treatment type that costs the least money
    in total?
  golden_query: SELECT T1.treatment_type_description FROM spider_dev.dog_kennels.Treatment_types
    AS T1 JOIN spider_dev.dog_kennels.Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code
    GROUP BY T1.treatment_type_description ORDER BY sum(cost_of_treatment) ASC LIMIT
    1
  tables:
  - Treatment_types
  - Treatments
  comparison_rules:
  - columns:
    - treatment_type_description
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_940:
  query_name: spider_940
  question: Give me the description of the treatment type whose total cost is the
    lowest.
  golden_query: SELECT T1.treatment_type_description FROM spider_dev.dog_kennels.Treatment_types
    AS T1 JOIN spider_dev.dog_kennels.Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code
    GROUP BY T1.treatment_type_description ORDER BY sum(cost_of_treatment) ASC LIMIT
    1
  tables:
  - Treatment_types
  - Treatments
  comparison_rules:
  - columns:
    - treatment_type_description
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_941:
  query_name: spider_941
  question: Which owner has paid the largest amount of money in total for their dogs?
    Show the owner id and zip code.
  golden_query: SELECT T1.owner_id ,  T1.zip_code FROM spider_dev.dog_kennels.Owners
    AS T1 JOIN spider_dev.dog_kennels.Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN
    spider_dev.dog_kennels.Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id
    ,  T1.zip_code ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1
  tables:
  - Owners
  - Dogs
  - Treatments
  comparison_rules:
  - columns:
    - owner_id
    - zip_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_942:
  query_name: spider_942
  question: Find the owner id and zip code of the owner who spent the most money in
    total for his or her dogs. Sort by money spent in descending order. Show 1 row.
  golden_query: SELECT T1.owner_id ,  T1.zip_code FROM spider_dev.dog_kennels.Owners
    AS T1 JOIN spider_dev.dog_kennels.Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN
    spider_dev.dog_kennels.Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id
    ,  T1.zip_code ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1
  tables:
  - Owners
  - Dogs
  - Treatments
  comparison_rules:
  - columns:
    - owner_id
    - zip_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_943:
  query_name: spider_943
  question: Which professionals have done at least two types of treatments? List the
    professional id and cell phone.
  golden_query: SELECT T1.professional_id ,  T1.cell_number FROM spider_dev.dog_kennels.Professionals
    AS T1 JOIN spider_dev.dog_kennels.Treatments AS T2 ON T1.professional_id  =  T2.professional_id
    GROUP BY T1.professional_id ,  T1.cell_number HAVING count(distinct treatment_type_code)  >=  2
  tables:
  - Professionals
  - Treatments
  comparison_rules:
  - columns:
    - professional_id
    - cell_number
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_944:
  query_name: spider_944
  question: Find the id and cell phone of the professionals who operate two or more
    types of treatments.
  golden_query: SELECT T1.professional_id ,  T1.cell_number FROM spider_dev.dog_kennels.Professionals
    AS T1 JOIN spider_dev.dog_kennels.Treatments AS T2 ON T1.professional_id  =  T2.professional_id
    GROUP BY T1.professional_id ,  T1.cell_number HAVING count(distinct treatment_type_code)  >=  2
  tables:
  - Professionals
  - Treatments
  comparison_rules:
  - columns:
    - professional_id
    - cell_number
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_945:
  query_name: spider_945
  question: What are unique first name and last name of the professionals who have
    done treatment with cost below average?
  golden_query: SELECT DISTINCT T1.first_name ,  T1.last_name FROM spider_dev.dog_kennels.Professionals
    AS T1 JOIN spider_dev.dog_kennels.Treatments AS T2  ON T1.professional_id = T2.professional_id  WHERE
    cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM spider_dev.dog_kennels.Treatments
    )
  tables:
  - Professionals
  - Treatments
  comparison_rules:
  - columns:
    - first_name
    - last_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_946:
  query_name: spider_946
  question: Which professionals have operated a treatment that costs less than the
    average? Give me their unique first names and last names.
  golden_query: "SELECT DISTINCT T1.first_name ,  T1.last_name FROM spider_dev.dog_kennels.Professionals
    AS T1 JOIN spider_dev.dog_kennels.Treatments AS T2 ON\nt1.professional_id = t2.professional_id\n
    WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM spider_dev.dog_kennels.Treatments
    )"
  tables:
  - Professionals
  - Treatments
  comparison_rules:
  - columns:
    - first_name
    - last_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_947:
  query_name: spider_947
  question: List the date of each treatment, together with the first name of the professional
    who operated it.
  golden_query: SELECT T1.date_of_treatment ,  T2.first_name FROM spider_dev.dog_kennels.Treatments
    AS T1 JOIN spider_dev.dog_kennels.Professionals AS T2 ON T1.professional_id  =  T2.professional_id
  tables:
  - Professionals
  - Treatments
  comparison_rules:
  - columns:
    - date_of_treatment
    - first_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_948:
  query_name: spider_948
  question: What are the date and the operating professional's first name of each
    treatment?
  golden_query: SELECT T1.date_of_treatment ,  T2.first_name FROM spider_dev.dog_kennels.Treatments
    AS T1 JOIN spider_dev.dog_kennels.Professionals AS T2 ON T1.professional_id  =  T2.professional_id
  tables:
  - Professionals
  - Treatments
  comparison_rules:
  - columns:
    - date_of_treatment
    - first_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_949:
  query_name: spider_949
  question: List the cost of each treatment and the corresponding treatment type description.
  golden_query: SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM
    spider_dev.dog_kennels.Treatments AS T1 JOIN spider_dev.dog_kennels.treatment_types
    AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code
  tables:
  - Treatments
  - treatment_types
  comparison_rules:
  - columns:
    - cost_of_treatment
    - treatment_type_description
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_950:
  query_name: spider_950
  question: What are the cost and treatment type description of each treatment?
  golden_query: SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM
    spider_dev.dog_kennels.Treatments AS T1 JOIN spider_dev.dog_kennels.treatment_types
    AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code
  tables:
  - Treatments
  - treatment_types
  comparison_rules:
  - columns:
    - cost_of_treatment
    - treatment_type_description
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_951:
  query_name: spider_951
  question: List each owner's first name, last name, and the size code of his for
    her dog.
  golden_query: SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM spider_dev.dog_kennels.Owners
    AS T1 JOIN spider_dev.dog_kennels.Dogs AS T2 ON T1.owner_id  =  T2.owner_id
  tables:
  - Owners
  - Dogs
  comparison_rules:
  - columns:
    - first_name
    - last_name
    - size_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_952:
  query_name: spider_952
  question: What are each owners first name, last name, and the size code of their
    dog?
  golden_query: SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM spider_dev.dog_kennels.Owners
    AS T1 JOIN spider_dev.dog_kennels.Dogs AS T2 ON T1.owner_id  =  T2.owner_id
  tables:
  - Owners
  - Dogs
  comparison_rules:
  - columns:
    - first_name
    - last_name
    - size_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_953:
  query_name: spider_953
  question: List pairs of the owner's first name and the dogs's name.
  golden_query: SELECT T1.first_name ,  T2.name FROM spider_dev.dog_kennels.Owners
    AS T1 JOIN spider_dev.dog_kennels.Dogs AS T2 ON T1.owner_id  =  T2.owner_id
  tables:
  - Owners
  - Dogs
  comparison_rules:
  - columns:
    - first_name
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_954:
  query_name: spider_954
  question: What are each owner's first name and their dogs's name?
  golden_query: SELECT T1.first_name ,  T2.name FROM spider_dev.dog_kennels.Owners
    AS T1 JOIN spider_dev.dog_kennels.Dogs AS T2 ON T1.owner_id  =  T2.owner_id
  tables:
  - Owners
  - Dogs
  comparison_rules:
  - columns:
    - first_name
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_955:
  query_name: spider_955
  question: List the names of the dogs of the rarest breed and the treatment dates
    of them.
  golden_query: SELECT T1.name ,  T2.date_of_treatment FROM spider_dev.dog_kennels.Dogs
    AS T1 JOIN spider_dev.dog_kennels.Treatments AS T2 ON T1.dog_id  =  T2.dog_id
    WHERE T1.breed_code  =  ( SELECT breed_code FROM spider_dev.dog_kennels.Dogs GROUP
    BY breed_code ORDER BY count(*) ASC LIMIT 1 )
  tables:
  - Dogs
  - Treatments
  comparison_rules:
  - columns:
    - name
    - date_of_treatment
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_956:
  query_name: spider_956
  question: Which dogs are of the rarest breed? Show their names and treatment dates.
  golden_query: SELECT T1.name ,  T2.date_of_treatment FROM spider_dev.dog_kennels.Dogs
    AS T1 JOIN spider_dev.dog_kennels.Treatments AS T2 ON T1.dog_id  =  T2.dog_id
    WHERE T1.breed_code  =  ( SELECT breed_code FROM spider_dev.dog_kennels.Dogs GROUP
    BY breed_code ORDER BY count(*) ASC LIMIT 1 )
  tables:
  - Dogs
  - Treatments
  comparison_rules:
  - columns:
    - name
    - date_of_treatment
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_957:
  query_name: spider_957
  question: Which dogs are owned by someone who lives in Virginia? List the owner's
    first name and the dog's name.
  golden_query: SELECT T1.first_name ,  T2.name FROM spider_dev.dog_kennels.Owners
    AS T1 JOIN spider_dev.dog_kennels.Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE
    T1.state  =  'Virginia'
  tables:
  - Owners
  - Dogs
  comparison_rules:
  - columns:
    - first_name
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_958:
  query_name: spider_958
  question: Find the first names of owners living in Virginia and the names of dogs
    they own.
  golden_query: SELECT T1.first_name ,  T2.name FROM spider_dev.dog_kennels.Owners
    AS T1 JOIN spider_dev.dog_kennels.Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE
    T1.state  =  'Virginia'
  tables:
  - Owners
  - Dogs
  comparison_rules:
  - columns:
    - first_name
    - name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_959:
  query_name: spider_959
  question: What are the arriving date and the departing date of unique dogs who have
    gone through a treatment?
  golden_query: SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM spider_dev.dog_kennels.Dogs
    AS T1 JOIN spider_dev.dog_kennels.Treatments AS T2 ON T1.dog_id  =  T2.dog_id
  tables:
  - Dogs
  - Treatments
  comparison_rules:
  - columns:
    - date_arrived
    - date_departed
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_960:
  query_name: spider_960
  question: Find the arriving date and the departing date of unique dogs that received
    a treatment.
  golden_query: SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM spider_dev.dog_kennels.Dogs
    AS T1 JOIN spider_dev.dog_kennels.Treatments AS T2 ON T1.dog_id  =  T2.dog_id
  tables:
  - Dogs
  - Treatments
  comparison_rules:
  - columns:
    - date_arrived
    - date_departed
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_961:
  query_name: spider_961
  question: List the last name of the owner owning the youngest dog. Use age instead of date_of_birth.
  golden_query: SELECT T1.last_name FROM spider_dev.dog_kennels.Owners AS T1 JOIN
    spider_dev.dog_kennels.Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  (
    SELECT min(age) FROM spider_dev.dog_kennels.Dogs )
  tables:
  - Owners
  - Dogs
  comparison_rules:
  - columns:
    - last_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_962:
  query_name: spider_962
  question: Who owns the youngest dog? Give me his or her last name.
  golden_query: SELECT T1.last_name FROM spider_dev.dog_kennels.Owners AS T1 JOIN
    spider_dev.dog_kennels.Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  (
    SELECT min(age) FROM spider_dev.dog_kennels.Dogs )
  tables:
  - Owners
  - Dogs
  comparison_rules:
  - columns:
    - last_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_963:
  query_name: spider_963
  question: List the emails of the professionals who live in the state of Hawaii or
    the state of Wisconsin.
  golden_query: SELECT email_address FROM spider_dev.dog_kennels.Professionals WHERE
    state  =  'Hawaii' OR state  =  'Wisconsin'
  tables:
  - Professionals
  comparison_rules:
  - columns:
    - email_address
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_964:
  query_name: spider_964
  question: What are the emails of the professionals living in either the state of
    Hawaii or the state of Wisconsin?
  golden_query: SELECT email_address FROM spider_dev.dog_kennels.Professionals WHERE
    state  =  'Hawaii' OR state  =  'Wisconsin'
  tables:
  - Professionals
  comparison_rules:
  - columns:
    - email_address
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_965:
  query_name: spider_965
  question: What are the arriving date and the departing date of all the dogs?
  golden_query: SELECT date_arrived ,  date_departed FROM spider_dev.dog_kennels.Dogs
  tables:
  - Dogs
  comparison_rules:
  - columns:
    - date_arrived
    - date_departed
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_966:
  query_name: spider_966
  question: List the arrival date and the departure date for all the dogs.
  golden_query: SELECT date_arrived ,  date_departed FROM spider_dev.dog_kennels.Dogs
  tables:
  - Dogs
  comparison_rules:
  - columns:
    - date_arrived
    - date_departed
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_967:
  query_name: spider_967
  question: How many dogs went through any treatments? Display as treatments.
  golden_query: SELECT count(DISTINCT dog_id) as treatments FROM spider_dev.dog_kennels.Treatments
  tables:
  - Treatments
  comparison_rules:
  - columns:
    - treatments
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_968:
  query_name: spider_968
  question: Count the number of dogs that went through a treatment. Display as treatments.
  golden_query: SELECT count(DISTINCT dog_id) as treatments FROM spider_dev.dog_kennels.Treatments
  tables:
  - Treatments
  comparison_rules:
  - columns:
    - treatments
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_969:
  query_name: spider_969
  question: How many professionals have performed any treatment to dogs? Display as
    treatments.
  golden_query: SELECT count(DISTINCT professional_id) as treatments FROM spider_dev.dog_kennels.Treatments
  tables:
  - Treatments
  comparison_rules:
  - columns:
    - treatments
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_970:
  query_name: spider_970
  question: Find the number of professionals who have ever treated dogs. Display as
    treatments.
  golden_query: SELECT count(DISTINCT professional_id) as treatments FROM spider_dev.dog_kennels.Treatments
  tables:
  - Treatments
  comparison_rules:
  - columns:
    - treatments
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_971:
  query_name: spider_971
  question: Which professionals live in a city containing the substring 'West'? List
    his or her role, street, city and state.
  golden_query: SELECT role_code ,  street ,  city ,  state FROM spider_dev.dog_kennels.professionals
    WHERE city LIKE '%West%'
  tables:
  - professionals
  comparison_rules:
  - columns:
    - role_code
    - street
    - city
    - state
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_972:
  query_name: spider_972
  question: Find the role, street, city and state of the professionals living in a
    city that contains the substring 'West'.
  golden_query: SELECT role_code ,  street ,  city ,  state FROM spider_dev.dog_kennels.professionals
    WHERE city LIKE '%West%'
  tables:
  - professionals
  comparison_rules:
  - columns:
    - role_code
    - street
    - city
    - state
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_973:
  query_name: spider_973
  question: Which owners live in the state whose name contains the substring 'North'?
    List his first name, last name and email.
  golden_query: SELECT first_name ,  last_name ,  email_address FROM spider_dev.dog_kennels.Owners
    WHERE state LIKE '%North%'
  tables:
  - Owners
  comparison_rules:
  - columns:
    - first_name
    - last_name
    - email_address
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_974:
  query_name: spider_974
  question: Return the first name, last name and email of the owners living in a state
    whose name contains the substring 'North'.
  golden_query: SELECT first_name ,  last_name ,  email_address FROM spider_dev.dog_kennels.Owners
    WHERE state LIKE '%North%'
  tables:
  - Owners
  comparison_rules:
  - columns:
    - first_name
    - last_name
    - email_address
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_975:
  query_name: spider_975
  question: How many dogs have an age below the average? Display as num_dogs.
  golden_query: SELECT count(*) as num_dogs FROM spider_dev.dog_kennels.Dogs WHERE
    age  <  ( SELECT avg(age) FROM spider_dev.dog_kennels.Dogs )
  tables:
  - Dogs
  comparison_rules:
  - columns:
    - num_dogs
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_976:
  query_name: spider_976
  question: Count the number of dogs of an age below the average. Display as num_dogs.
  golden_query: SELECT count(*) as num_dogs FROM spider_dev.dog_kennels.Dogs WHERE
    age  <  ( SELECT avg(age) FROM spider_dev.dog_kennels.Dogs )
  tables:
  - Dogs
  comparison_rules:
  - columns:
    - num_dogs
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_977:
  query_name: spider_977
  question: How much does the most recent treatment cost?
  golden_query: SELECT cost_of_treatment FROM spider_dev.dog_kennels.Treatments ORDER
    BY date_of_treatment DESC LIMIT 1
  tables:
  - Treatments
  comparison_rules:
  - columns:
    - cost_of_treatment
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_978:
  query_name: spider_978
  question: Show me the cost of the most recently performed treatment.
  golden_query: SELECT cost_of_treatment FROM spider_dev.dog_kennels.Treatments ORDER
    BY date_of_treatment DESC LIMIT 1
  tables:
  - Treatments
  comparison_rules:
  - columns:
    - cost_of_treatment
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_979:
  query_name: spider_979
  question: How many dogs have not gone through any treatment? Display as num_dogs.
  golden_query: SELECT count(*) as num_dogs FROM spider_dev.dog_kennels.Dogs WHERE
    dog_id NOT IN ( SELECT dog_id FROM spider_dev.dog_kennels.Treatments )
  tables:
  - Dogs
  - Treatments
  comparison_rules:
  - columns:
    - num_dogs
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_980:
  query_name: spider_980
  question: Tell me the number of dogs that have not received any treatment . Display
    as num_dogs.
  golden_query: select count(*) as num_dogs from spider_dev.dog_kennels.dogs where
    dog_id not in ( select dog_id from spider_dev.dog_kennels.treatments )
  tables:
  - dogs
  - treatments
  comparison_rules:
  - columns:
    - num_dogs
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_981:
  query_name: spider_981
  question: How many owners temporarily do not have any dogs? Display as num_owners.
  golden_query: SELECT count(*) as num_owners FROM spider_dev.dog_kennels.Owners WHERE
    owner_id NOT IN ( SELECT owner_id FROM spider_dev.dog_kennels.Dogs )
  tables:
  - Owners
  - Dogs
  comparison_rules:
  - columns:
    - num_owners
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_982:
  query_name: spider_982
  question: Find the number of owners who do not own any dogs at this moment. Display
    as owners_without_dogs
  golden_query: SELECT count(*) as owners_without_dogs FROM spider_dev.dog_kennels.Owners
    WHERE owner_id NOT IN ( SELECT owner_id FROM spider_dev.dog_kennels.Dogs )
  tables:
  - Owners
  - Dogs
  comparison_rules:
  - columns:
    - owners_without_dogs
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_983:
  query_name: spider_983
  question: How many professionals did not operate any treatment on dogs? Display
    as num_prof.
  golden_query: SELECT count(*) as num_prof FROM spider_dev.dog_kennels.Professionals
    WHERE professional_id NOT IN ( SELECT professional_id FROM spider_dev.dog_kennels.Treatments
    )
  tables:
  - Professionals
  - Treatments
  comparison_rules:
  - columns:
    - num_prof
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_984:
  query_name: spider_984
  question: Find the number of professionals who have not treated any dogs. Display
    as num_prof.
  golden_query: SELECT count(*) as num_prof FROM spider_dev.dog_kennels.Professionals
    WHERE professional_id NOT IN ( SELECT professional_id FROM spider_dev.dog_kennels.Treatments
    )
  tables:
  - Professionals
  - Treatments
  comparison_rules:
  - columns:
    - num_prof
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_985:
  query_name: spider_985
  question: List the dog name, age and weight of the dogs who have been abandoned?
    1 stands for yes, and 0 stands for no.
  golden_query: SELECT name ,  age ,  weight FROM spider_dev.dog_kennels.Dogs WHERE
    abandoned_yn  =  1
  tables:
  - Dogs
  comparison_rules:
  - columns:
    - name
    - age
    - weight
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_986:
  query_name: spider_986
  question: What are the dog name, age and weight of the dogs that were abandoned?
    Note that 1 stands for yes, and 0 stands for no in the tables.
  golden_query: SELECT name ,  age ,  weight FROM spider_dev.dog_kennels.Dogs WHERE
    abandoned_yn  =  1
  tables:
  - Dogs
  comparison_rules:
  - columns:
    - name
    - age
    - weight
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_987:
  query_name: spider_987
  question: What is the average age of all the dogs? Display as avg_age
  golden_query: SELECT avg(age) avg_age FROM spider_dev.dog_kennels.Dogs
  tables:
  - Dogs
  comparison_rules:
  - columns:
    - avg_age
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_988:
  query_name: spider_988
  question: Compute the average age of all the dogs.Display as avg_age
  golden_query: SELECT avg(age) as avg_age FROM spider_dev.dog_kennels.Dogs
  tables:
  - Dogs
  comparison_rules:
  - columns:
    - avg_age
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_989:
  query_name: spider_989
  question: What is the age of the oldest dog? Display as oldest_dog_age
  golden_query: SELECT max(age) as oldest_dog_age FROM spider_dev.dog_kennels.Dogs
  tables:
  - Dogs
  comparison_rules:
  - columns:
    - oldest_dog_age
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_990:
  query_name: spider_990
  question: Tell me the age of the oldest dog. Display as oldest_dog_age
  golden_query: SELECT max(age) as oldest_dog_age FROM spider_dev.dog_kennels.Dogs
  tables:
  - Dogs
  comparison_rules:
  - columns:
    - oldest_dog_age
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_991:
  query_name: spider_991
  question: How much does each charge type costs? List both charge type and amount.
  golden_query: SELECT charge_type ,  charge_amount FROM spider_dev.dog_kennels.Charges
  tables:
  - Charges
  comparison_rules:
  - columns:
    - charge_type
    - charge_amount
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_992:
  query_name: spider_992
  question: List each charge type and its amount.
  golden_query: SELECT charge_type ,  charge_amount FROM spider_dev.dog_kennels.Charges
  tables:
  - Charges
  comparison_rules:
  - columns:
    - charge_type
    - charge_amount
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_993:
  query_name: spider_993
  question: How much does the most expensive charge type costs? Display as exp_charge.
  golden_query: SELECT max(charge_amount) as exp_charge FROM spider_dev.dog_kennels.Charges
  tables:
  - Charges
  comparison_rules:
  - columns:
    - exp_charge
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_994:
  query_name: spider_994
  question: What is the charge amount of the most expensive charge type? Display as
    exp_charge.
  golden_query: SELECT max(charge_amount) as exp_charge FROM spider_dev.dog_kennels.Charges
  tables:
  - Charges
  comparison_rules:
  - columns:
    - exp_charge
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_995:
  query_name: spider_995
  question: List the email, cell phone and home phone of all the professionals.
  golden_query: SELECT email_address ,  cell_number ,  home_phone FROM spider_dev.dog_kennels.professionals
  tables:
  - professionals
  comparison_rules:
  - columns:
    - email_address
    - cell_number
    - home_phone
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_996:
  query_name: spider_996
  question: What are the email, cell phone and home phone of each professional?
  golden_query: SELECT email_address ,  cell_number ,  home_phone FROM spider_dev.dog_kennels.professionals
  tables:
  - professionals
  comparison_rules:
  - columns:
    - email_address
    - cell_number
    - home_phone
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_997:
  query_name: spider_997
  question: What are all the possible breed type and size type combinations? Breed
    type and size type are available in dogs table. Display breed code and size code.
  golden_query: SELECT DISTINCT breed_code ,  size_code FROM spider_dev.dog_kennels.dogs
  tables:
  - dogs
  comparison_rules:
  - columns:
    - breed_code
    - size_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_998:
  query_name: spider_998
  question: Find the distinct breed type and size code combinations for dogs. Display breed code and size code.
  golden_query: SELECT DISTINCT breed_code ,  size_code FROM spider_dev.dog_kennels.dogs
  tables:
  - dogs
  comparison_rules:
  - columns:
    - breed_code
    - size_code
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_999:
  query_name: spider_999
  question: List unique first name of all the professionals along with the description
    of the treatment they have done.
  golden_query: SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM
    spider_dev.dog_kennels.professionals AS T1 JOIN spider_dev.dog_kennels.Treatments
    AS T2 ON T1.professional_id  =  T2.professional_id JOIN spider_dev.dog_kennels.Treatment_types
    AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code
  tables:
  - Treatment_types
  - professionals
  - Treatments
  comparison_rules:
  - columns:
    - first_name
    - treatment_type_description
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_1000:
  query_name: spider_1000
  question: What are each professional's unique first name and description of the
    treatment they have performed?
  golden_query: SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM
    spider_dev.dog_kennels.professionals AS T1 JOIN spider_dev.dog_kennels.Treatments
    AS T2 ON T1.professional_id  =  T2.professional_id JOIN spider_dev.dog_kennels.Treatment_types
    AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code
  tables:
  - Treatment_types
  - professionals
  - Treatments
  comparison_rules:
  - columns:
    - first_name
    - treatment_type_description
    match: exact
  auto_select_schema: 'false'
  schemas:
  - dog_kennels
spider_1001:
  query_name: spider_1001
  question: How many singers are there? Display as num_singers.
  golden_query: SELECT count(*) as num_singers FROM spider_dev.singer.singer
  tables:
  - singer
  comparison_rules:
  - columns:
    - num_singers
    match: exact
  auto_select_schema: 'false'
  schemas:
  - singer
spider_1002:
  query_name: spider_1002
  question: What is the count of singers? Display as num_singers.
  golden_query: SELECT count(*) as num_singers FROM spider_dev.singer.singer
  tables:
  - singer
  comparison_rules:
  - columns:
    - num_singers
    match: exact
  auto_select_schema: 'false'
  schemas:
  - singer
spider_1003:
  query_name: spider_1003
  question: List the name of singers in ascending order of net worth.
  golden_query: SELECT Name FROM spider_dev.singer.singer ORDER BY Net_Worth_Millions
    ASC
  tables:
  - singer
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - singer
spider_1004:
  query_name: spider_1004
  question: What are the names of singers ordered by ascending net worth?
  golden_query: SELECT Name FROM spider_dev.singer.singer ORDER BY Net_Worth_Millions
    ASC
  tables:
  - singer
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - singer
spider_1005:
  query_name: spider_1005
  question: What are the birth year and citizenship of singers?
  golden_query: SELECT Birth_Year ,  Citizenship FROM spider_dev.singer.singer
  tables:
  - singer
  comparison_rules:
  - columns:
    - Birth_Year
    - Citizenship
    match: exact
  auto_select_schema: 'false'
  schemas:
  - singer
spider_1006:
  query_name: spider_1006
  question: What are the birth years and citizenships of the singers?
  golden_query: SELECT Birth_Year ,  Citizenship FROM spider_dev.singer.singer
  tables:
  - singer
  comparison_rules:
  - columns:
    - Birth_Year
    - Citizenship
    match: exact
  auto_select_schema: 'false'
  schemas:
  - singer
spider_1007:
  query_name: spider_1007
  question: List the name of singers whose citizenship is not 'France'.
  golden_query: SELECT Name FROM spider_dev.singer.singer WHERE Citizenship != 'France'
  tables:
  - singer
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - singer
spider_1008:
  query_name: spider_1008
  question: What are the names of the singers who are not French citizens?
  golden_query: SELECT Name FROM spider_dev.singer.singer WHERE Citizenship != 'France'
  tables:
  - singer
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - singer
spider_1009:
  query_name: spider_1009
  question: Show the name of singers whose birth year is either 1948 or 1949?
  golden_query: SELECT Name FROM spider_dev.singer.singer WHERE Birth_Year  =  1948
    OR Birth_Year  =  1949
  tables:
  - singer
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - singer
spider_1010:
  query_name: spider_1010
  question: What are the names of the singers whose birth years are either 1948 or
    1949?
  golden_query: SELECT Name FROM spider_dev.singer.singer WHERE Birth_Year  =  1948
    OR Birth_Year  =  1949
  tables:
  - singer
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - singer
spider_1011:
  query_name: spider_1011
  question: What is the name of the singer with the largest net worth?
  golden_query: SELECT Name FROM spider_dev.singer.singer ORDER BY Net_Worth_Millions
    DESC LIMIT 1
  tables:
  - singer
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - singer
spider_1012:
  query_name: spider_1012
  question: What is the name of the singer who is worth the most?
  golden_query: SELECT Name FROM spider_dev.singer.singer ORDER BY Net_Worth_Millions
    DESC LIMIT 1
  tables:
  - singer
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - singer
spider_1013:
  query_name: spider_1013
  question: Show different citizenship of singers and the number of singers of each
    citizenship. Display as num_singers.
  golden_query: SELECT Citizenship ,  COUNT(*) as num_singers FROM spider_dev.singer.singer
    GROUP BY Citizenship
  tables:
  - singer
  comparison_rules:
  - columns:
    - Citizenship
    - num_singers
    match: exact
  auto_select_schema: 'false'
  schemas:
  - singer
spider_1014:
  query_name: spider_1014
  question: For each citizenship, how many singers are from that country? Display
    as num_singers.
  golden_query: SELECT Citizenship ,  COUNT(*) as num_singers FROM spider_dev.singer.singer
    GROUP BY Citizenship
  tables:
  - singer
  comparison_rules:
  - columns:
    - Citizenship
    - num_singers
    match: exact
  auto_select_schema: 'false'
  schemas:
  - singer
spider_1015:
  query_name: spider_1015
  question: Please show the most common citizenship of singers.
  golden_query: SELECT Citizenship FROM spider_dev.singer.singer GROUP BY Citizenship
    ORDER BY COUNT(*) DESC LIMIT 1
  tables:
  - singer
  comparison_rules:
  - columns:
    - Citizenship
    match: exact
  auto_select_schema: 'false'
  schemas:
  - singer
spider_1016:
  query_name: spider_1016
  question: What is the most common singer citizenship ?
  golden_query: select citizenship from spider_dev.singer.singer group by citizenship
    order by count(*) desc limit 1
  tables:
  - singer
  comparison_rules:
  - columns:
    - citizenship
    match: exact
  auto_select_schema: 'false'
  schemas:
  - singer
spider_1017:
  query_name: spider_1017
  question: Show different citizenships and the maximum net worth of singers of each
    citizenship. Display as max_net_worth.
  golden_query: SELECT Citizenship ,  max(Net_Worth_Millions) as max_net_worth FROM
    spider_dev.singer.singer GROUP BY Citizenship
  tables:
  - singer
  comparison_rules:
  - columns:
    - Citizenship
    - max_net_worth
    match: exact
  auto_select_schema: 'false'
  schemas:
  - singer
spider_1018:
  query_name: spider_1018
  question: For each citizenship, what is the maximum net worth? Display as max_net_worth.
  golden_query: SELECT Citizenship ,  max(Net_Worth_Millions) as max_net_worth FROM
    spider_dev.singer.singer GROUP BY Citizenship
  tables:
  - singer
  comparison_rules:
  - columns:
    - Citizenship
    - max_net_worth
    match: exact
  auto_select_schema: 'false'
  schemas:
  - singer
spider_1019:
  query_name: spider_1019
  question: Show titles of songs and names of singers.
  golden_query: SELECT T2.Title ,  T1.Name FROM spider_dev.singer.singer AS T1 JOIN
    spider_dev.singer.song AS T2 ON T1.Singer_ID  =  T2.Singer_ID
  tables:
  - song
  - singer
  comparison_rules:
  - columns:
    - Title
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - singer
spider_1020:
  query_name: spider_1020
  question: What are the song titles and singer names?
  golden_query: SELECT T2.Title ,  T1.Name FROM spider_dev.singer.singer AS T1 JOIN
    spider_dev.singer.song AS T2 ON T1.Singer_ID  =  T2.Singer_ID
  tables:
  - song
  - singer
  comparison_rules:
  - columns:
    - Title
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - singer
spider_1021:
  query_name: spider_1021
  question: Show distinct names of singers that have songs with sales more than 300000.
  golden_query: SELECT DISTINCT T1.Name FROM spider_dev.singer.singer AS T1 JOIN spider_dev.singer.song
    AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000
  tables:
  - song
  - singer
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - singer
spider_1022:
  query_name: spider_1022
  question: what are the different names of the singers that have sales more than
    300000?
  golden_query: SELECT DISTINCT T1.Name FROM spider_dev.singer.singer AS T1 JOIN spider_dev.singer.song
    AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000
  tables:
  - song
  - singer
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - singer
spider_1023:
  query_name: spider_1023
  question: Show the names of singers that have more than one song.
  golden_query: SELECT T1.Name FROM spider_dev.singer.singer AS T1 JOIN spider_dev.singer.song
    AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1
  tables:
  - song
  - singer
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - singer
spider_1024:
  query_name: spider_1024
  question: What are the names of the singers that have more than one songs?
  golden_query: SELECT T1.Name FROM spider_dev.singer.singer AS T1 JOIN spider_dev.singer.song
    AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1
  tables:
  - song
  - singer
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - singer
spider_1025:
  query_name: spider_1025
  question: Show the names of singers and the total sales of their songs. Display
    as tot_sales
  golden_query: SELECT T1.Name ,  sum(T2.Sales) as tot_sales FROM spider_dev.singer.singer
    AS T1 JOIN spider_dev.singer.song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP
    BY T1.Name
  tables:
  - song
  - singer
  comparison_rules:
  - columns:
    - Name
    - tot_sales
    match: exact
  auto_select_schema: 'false'
  schemas:
  - singer
spider_1026:
  query_name: spider_1026
  question: For each singer name, what is the total sales for their songs? Display
    as tot_sales
  golden_query: SELECT T1.Name ,  sum(T2.Sales) as tot_sales FROM spider_dev.singer.singer
    AS T1 JOIN spider_dev.singer.song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP
    BY T1.Name
  tables:
  - song
  - singer
  comparison_rules:
  - columns:
    - Name
    - tot_sales
    match: exact
  auto_select_schema: 'false'
  schemas:
  - singer
spider_1027:
  query_name: spider_1027
  question: List the name of singers that do not have any song.
  golden_query: SELECT Name FROM spider_dev.singer.singer WHERE Singer_ID NOT IN (SELECT
    Singer_ID FROM spider_dev.singer.song)
  tables:
  - song
  - singer
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - singer
spider_1028:
  query_name: spider_1028
  question: What is the sname of every sing that does not have any song?
  golden_query: SELECT Name FROM spider_dev.singer.singer WHERE Singer_ID NOT IN (SELECT
    Singer_ID FROM spider_dev.singer.song)
  tables:
  - song
  - singer
  comparison_rules:
  - columns:
    - Name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - singer
spider_1029:
  query_name: spider_1029
  question: Retrieve the citizenships that are shared between singers born before
    1945 and singers born after 1955
  golden_query: SELECT Citizenship FROM spider_dev.singer.singer WHERE Birth_Year  <  1945
    INTERSECT SELECT Citizenship FROM spider_dev.singer.singer WHERE Birth_Year  >  1955
  tables:
  - singer
  comparison_rules:
  - columns:
    - Citizenship
    match: exact
  auto_select_schema: 'false'
  schemas:
  - singer
spider_1030:
  query_name: spider_1030
  question: What are the citizenships that are shared by singers with a birth year
    before 1945 and after 1955?
  golden_query: SELECT Citizenship FROM spider_dev.singer.singer WHERE Birth_Year  <  1945
    INTERSECT SELECT Citizenship FROM spider_dev.singer.singer WHERE Birth_Year  >  1955
  tables:
  - singer
  comparison_rules:
  - columns:
    - Citizenship
    match: exact
  auto_select_schema: 'false'
  schemas:
  - singer
spider_1031:
  query_name: spider_1031
  question: How many available features are there in total? Display as num_features.
  golden_query: SELECT count(*) as num_features FROM spider_dev.real_estate_properties.Other_Available_Features
  tables:
  - Other_Available_Features
  comparison_rules:
  - columns:
    - num_features
    match: exact
  auto_select_schema: 'false'
  schemas:
  - real_estate_properties
spider_1032:
  query_name: spider_1032
  question: What is the feature type name of feature AirCon?
  golden_query: SELECT T2.feature_type_name FROM spider_dev.real_estate_properties.Other_Available_Features
    AS T1 JOIN spider_dev.real_estate_properties.Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code
    WHERE T1.feature_name  =  'AirCon'
  tables:
  - Ref_Feature_Types
  - Other_Available_Features
  comparison_rules:
  - columns:
    - feature_type_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - real_estate_properties
spider_1033:
  query_name: spider_1033
  question: Show unique property type descriptions of properties belonging to that
    code.
  golden_query: SELECT distinct T2.property_type_description FROM spider_dev.real_estate_properties.Properties
    AS T1 JOIN spider_dev.real_estate_properties.Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code
    GROUP BY T2.property_type_description
  tables:
  - Properties
  - Ref_Property_Types
  comparison_rules:
  - columns:
    - property_type_description
    match: exact
  auto_select_schema: 'false'
  schemas:
  - real_estate_properties
spider_1034:
  query_name: spider_1034
  question: What are the names of properties that are either houses or apartments
    with more than 1 room?
  golden_query: SELECT distinct property_name FROM spider_dev.real_estate_properties.Properties
    WHERE property_type_code  =  'House' AND room_count  >  1 UNION SELECT property_name
    FROM spider_dev.real_estate_properties.Properties WHERE property_type_code  =  'Apartment'
    AND room_count  >  1
  tables:
  - Properties
  comparison_rules:
  - columns:
    - property_name
    match: exact
  auto_select_schema: 'false'
  schemas:
  - real_estate_properties
